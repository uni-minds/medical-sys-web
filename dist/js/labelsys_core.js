/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/hls.js/dist/hls.js":
/*!*****************************************!*\
  !*** ./node_modules/hls.js/dist/hls.js ***!
  \*****************************************/
/***/ (function(module) {

eval("typeof window !== \"undefined\" &&\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_562__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_562__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_562__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_562__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_562__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_562__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__nested_webpack_require_562__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__nested_webpack_require_562__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_562__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__nested_webpack_require_562__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_562__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_562__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_562__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_562__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_562__.p = \"/dist/\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_562__(__nested_webpack_require_562__.s = \"./src/hls.ts\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./node_modules/eventemitter3/index.js\":\n/*!*********************************************!*\\\n  !*** ./node_modules/eventemitter3/index.js ***!\n  \\*********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif (true) {\n  module.exports = EventEmitter;\n}\n\n\n/***/ }),\n\n/***/ \"./node_modules/url-toolkit/src/url-toolkit.js\":\n/*!*****************************************************!*\\\n  !*** ./node_modules/url-toolkit/src/url-toolkit.js ***!\n  \\*****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n// see https://tools.ietf.org/html/rfc1808\n\n(function (root) {\n  var URL_REGEX =\n    /^(?=((?:[a-zA-Z0-9+\\-.]+:)?))\\1(?=((?:\\/\\/[^\\/?#]*)?))\\2(?=((?:(?:[^?#\\/]*\\/)*[^;?#\\/]*)?))\\3((?:;[^?#]*)?)(\\?[^#]*)?(#[^]*)?$/;\n  var FIRST_SEGMENT_REGEX = /^(?=([^\\/?#]*))\\1([^]*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n\n  var URLToolkit = {\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function (baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(\n          basePartsForNormalise.path\n        );\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment,\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath =\n              baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) +\n              relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize\n          ? URLToolkit.normalizePath(relativeParts.path)\n          : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function (url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || '',\n      };\n    },\n    normalizePath: function (path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (\n        path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length\n      ) {}\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function (parts) {\n      return (\n        parts.scheme +\n        parts.netLoc +\n        parts.path +\n        parts.params +\n        parts.query +\n        parts.fragment\n      );\n    },\n  };\n\n  if (true)\n    module.exports = URLToolkit;\n  else {}\n})(this);\n\n\n/***/ }),\n\n/***/ \"./node_modules/webworkify-webpack/index.js\":\n/*!**************************************************!*\\\n  !*** ./node_modules/webworkify-webpack/index.js ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __nested_webpack_require_20895__) {\n\nfunction webpackBootstrapFunc (modules) {\n/******/  // The module cache\n/******/  var installedModules = {};\n\n/******/  // The require function\n/******/  function __nested_webpack_require_21073__(moduleId) {\n\n/******/    // Check if module is in cache\n/******/    if(installedModules[moduleId])\n/******/      return installedModules[moduleId].exports;\n\n/******/    // Create a new module (and put it into the cache)\n/******/    var module = installedModules[moduleId] = {\n/******/      i: moduleId,\n/******/      l: false,\n/******/      exports: {}\n/******/    };\n\n/******/    // Execute the module function\n/******/    modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_21073__);\n\n/******/    // Flag the module as loaded\n/******/    module.l = true;\n\n/******/    // Return the exports of the module\n/******/    return module.exports;\n/******/  }\n\n/******/  // expose the modules object (__webpack_modules__)\n/******/  __nested_webpack_require_21073__.m = modules;\n\n/******/  // expose the module cache\n/******/  __nested_webpack_require_21073__.c = installedModules;\n\n/******/  // identity function for calling harmony imports with the correct context\n/******/  __nested_webpack_require_21073__.i = function(value) { return value; };\n\n/******/  // define getter function for harmony exports\n/******/  __nested_webpack_require_21073__.d = function(exports, name, getter) {\n/******/    if(!__nested_webpack_require_21073__.o(exports, name)) {\n/******/      Object.defineProperty(exports, name, {\n/******/        configurable: false,\n/******/        enumerable: true,\n/******/        get: getter\n/******/      });\n/******/    }\n/******/  };\n\n/******/  // define __esModule on exports\n/******/  __nested_webpack_require_21073__.r = function(exports) {\n/******/    Object.defineProperty(exports, '__esModule', { value: true });\n/******/  };\n\n/******/  // getDefaultExport function for compatibility with non-harmony modules\n/******/  __nested_webpack_require_21073__.n = function(module) {\n/******/    var getter = module && module.__esModule ?\n/******/      function getDefault() { return module['default']; } :\n/******/      function getModuleExports() { return module; };\n/******/    __nested_webpack_require_21073__.d(getter, 'a', getter);\n/******/    return getter;\n/******/  };\n\n/******/  // Object.prototype.hasOwnProperty.call\n/******/  __nested_webpack_require_21073__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/  // __webpack_public_path__\n/******/  __nested_webpack_require_21073__.p = \"/\";\n\n/******/  // on error function for async loading\n/******/  __nested_webpack_require_21073__.oe = function(err) { console.error(err); throw err; };\n\n  var f = __nested_webpack_require_21073__(__nested_webpack_require_21073__.s = ENTRY_MODULE)\n  return f.default || f // try to call default if defined to also support babel esmodule exports\n}\n\nvar moduleNameReqExp = '[\\\\.|\\\\-|\\\\+|\\\\w|\\/|@]+'\nvar dependencyRegExp = '\\\\(\\\\s*(\\/\\\\*.*?\\\\*\\/)?\\\\s*.*?(' + moduleNameReqExp + ').*?\\\\)' // additional chars when output.pathinfo is true\n\n// http://stackoverflow.com/a/2593661/130442\nfunction quoteRegExp (str) {\n  return (str + '').replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&')\n}\n\nfunction isNumeric(n) {\n  return !isNaN(1 * n); // 1 * n converts integers, integers as string (\"123\"), 1e3 and \"1e3\" to integers and strings to NaN\n}\n\nfunction getModuleDependencies (sources, module, queueName) {\n  var retval = {}\n  retval[queueName] = []\n\n  var fnString = module.toString()\n  var wrapperSignature = fnString.match(/^function\\s?\\w*\\(\\w+,\\s*\\w+,\\s*(\\w+)\\)/)\n  if (!wrapperSignature) return retval\n  var webpackRequireName = wrapperSignature[1]\n\n  // main bundle deps\n  var re = new RegExp('(\\\\\\\\n|\\\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g')\n  var match\n  while ((match = re.exec(fnString))) {\n    if (match[3] === 'dll-reference') continue\n    retval[queueName].push(match[3])\n  }\n\n  // dll deps\n  re = new RegExp('\\\\(' + quoteRegExp(webpackRequireName) + '\\\\(\"(dll-reference\\\\s(' + moduleNameReqExp + '))\"\\\\)\\\\)' + dependencyRegExp, 'g')\n  while ((match = re.exec(fnString))) {\n    if (!sources[match[2]]) {\n      retval[queueName].push(match[1])\n      sources[match[2]] = __nested_webpack_require_20895__(match[1]).m\n    }\n    retval[match[2]] = retval[match[2]] || []\n    retval[match[2]].push(match[4])\n  }\n\n  // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3\n  var keys = Object.keys(retval);\n  for (var i = 0; i < keys.length; i++) {\n    for (var j = 0; j < retval[keys[i]].length; j++) {\n      if (isNumeric(retval[keys[i]][j])) {\n        retval[keys[i]][j] = 1 * retval[keys[i]][j];\n      }\n    }\n  }\n\n  return retval\n}\n\nfunction hasValuesInQueues (queues) {\n  var keys = Object.keys(queues)\n  return keys.reduce(function (hasValues, key) {\n    return hasValues || queues[key].length > 0\n  }, false)\n}\n\nfunction getRequiredModules (sources, moduleId) {\n  var modulesQueue = {\n    main: [moduleId]\n  }\n  var requiredModules = {\n    main: []\n  }\n  var seenModules = {\n    main: {}\n  }\n\n  while (hasValuesInQueues(modulesQueue)) {\n    var queues = Object.keys(modulesQueue)\n    for (var i = 0; i < queues.length; i++) {\n      var queueName = queues[i]\n      var queue = modulesQueue[queueName]\n      var moduleToCheck = queue.pop()\n      seenModules[queueName] = seenModules[queueName] || {}\n      if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue\n      seenModules[queueName][moduleToCheck] = true\n      requiredModules[queueName] = requiredModules[queueName] || []\n      requiredModules[queueName].push(moduleToCheck)\n      var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName)\n      var newModulesKeys = Object.keys(newModules)\n      for (var j = 0; j < newModulesKeys.length; j++) {\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || []\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]])\n      }\n    }\n  }\n\n  return requiredModules\n}\n\nmodule.exports = function (moduleId, options) {\n  options = options || {}\n  var sources = {\n    main: __nested_webpack_require_20895__.m\n  }\n\n  var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId)\n\n  var src = ''\n\n  Object.keys(requiredModules).filter(function (m) { return m !== 'main' }).forEach(function (module) {\n    var entryModule = 0\n    while (requiredModules[module][entryModule]) {\n      entryModule++\n    }\n    requiredModules[module].push(entryModule)\n    sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'\n    src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[module][id].toString() }).join(',') + '});\\n'\n  })\n\n  src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources.main[id].toString() }).join(',') + '}))(self);'\n\n  var blob = new window.Blob([src], { type: 'text/javascript' })\n  if (options.bare) { return blob }\n\n  var URL = window.URL || window.webkitURL || window.mozURL || window.msURL\n\n  var workerUrl = URL.createObjectURL(blob)\n  var worker = new window.Worker(workerUrl)\n  worker.objectURL = workerUrl\n\n  return worker\n}\n\n\n/***/ }),\n\n/***/ \"./src/config.ts\":\n/*!***********************!*\\\n  !*** ./src/config.ts ***!\n  \\***********************/\n/*! exports provided: hlsDefaultConfig, mergeConfig, enableStreamingMode */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_28606__) {\n\n\"use strict\";\n__nested_webpack_require_28606__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_28606__.d(__webpack_exports__, \"hlsDefaultConfig\", function() { return hlsDefaultConfig; });\n/* harmony export (binding) */ __nested_webpack_require_28606__.d(__webpack_exports__, \"mergeConfig\", function() { return mergeConfig; });\n/* harmony export (binding) */ __nested_webpack_require_28606__.d(__webpack_exports__, \"enableStreamingMode\", function() { return enableStreamingMode; });\n/* harmony import */ var _controller_abr_controller__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_28606__(/*! ./controller/abr-controller */ \"./src/controller/abr-controller.ts\");\n/* harmony import */ var _controller_audio_stream_controller__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_28606__(/*! ./controller/audio-stream-controller */ \"./src/controller/audio-stream-controller.ts\");\n/* harmony import */ var _controller_audio_track_controller__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_28606__(/*! ./controller/audio-track-controller */ \"./src/controller/audio-track-controller.ts\");\n/* harmony import */ var _controller_subtitle_stream_controller__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_28606__(/*! ./controller/subtitle-stream-controller */ \"./src/controller/subtitle-stream-controller.ts\");\n/* harmony import */ var _controller_subtitle_track_controller__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_28606__(/*! ./controller/subtitle-track-controller */ \"./src/controller/subtitle-track-controller.ts\");\n/* harmony import */ var _controller_buffer_controller__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_28606__(/*! ./controller/buffer-controller */ \"./src/controller/buffer-controller.ts\");\n/* harmony import */ var _controller_timeline_controller__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_28606__(/*! ./controller/timeline-controller */ \"./src/controller/timeline-controller.ts\");\n/* harmony import */ var _controller_cap_level_controller__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_28606__(/*! ./controller/cap-level-controller */ \"./src/controller/cap-level-controller.ts\");\n/* harmony import */ var _controller_fps_controller__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_28606__(/*! ./controller/fps-controller */ \"./src/controller/fps-controller.ts\");\n/* harmony import */ var _controller_eme_controller__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_28606__(/*! ./controller/eme-controller */ \"./src/controller/eme-controller.ts\");\n/* harmony import */ var _controller_cmcd_controller__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_28606__(/*! ./controller/cmcd-controller */ \"./src/controller/cmcd-controller.ts\");\n/* harmony import */ var _utils_xhr_loader__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_28606__(/*! ./utils/xhr-loader */ \"./src/utils/xhr-loader.ts\");\n/* harmony import */ var _utils_fetch_loader__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_28606__(/*! ./utils/fetch-loader */ \"./src/utils/fetch-loader.ts\");\n/* harmony import */ var _utils_cues__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_28606__(/*! ./utils/cues */ \"./src/utils/cues.ts\");\n/* harmony import */ var _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_14__ = __nested_webpack_require_28606__(/*! ./utils/mediakeys-helper */ \"./src/utils/mediakeys-helper.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_15__ = __nested_webpack_require_28606__(/*! ./utils/logger */ \"./src/utils/logger.ts\");\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// If possible, keep hlsDefaultConfig shallow\n// It is cloned whenever a new Hls instance is created, by keeping the config\n// shallow the properties are cloned, and we don't end up manipulating the default\nvar hlsDefaultConfig = _objectSpread(_objectSpread({\n  autoStartLoad: true,\n  // used by stream-controller\n  startPosition: -1,\n  // used by stream-controller\n  defaultAudioCodec: undefined,\n  // used by stream-controller\n  debug: false,\n  // used by logger\n  capLevelOnFPSDrop: false,\n  // used by fps-controller\n  capLevelToPlayerSize: false,\n  // used by cap-level-controller\n  ignoreDevicePixelRatio: false,\n  // used by cap-level-controller\n  initialLiveManifestSize: 1,\n  // used by stream-controller\n  maxBufferLength: 30,\n  // used by stream-controller\n  backBufferLength: Infinity,\n  // used by buffer-controller\n  maxBufferSize: 60 * 1000 * 1000,\n  // used by stream-controller\n  maxBufferHole: 0.1,\n  // used by stream-controller\n  highBufferWatchdogPeriod: 2,\n  // used by stream-controller\n  nudgeOffset: 0.1,\n  // used by stream-controller\n  nudgeMaxRetry: 3,\n  // used by stream-controller\n  maxFragLookUpTolerance: 0.25,\n  // used by stream-controller\n  liveSyncDurationCount: 3,\n  // used by latency-controller\n  liveMaxLatencyDurationCount: Infinity,\n  // used by latency-controller\n  liveSyncDuration: undefined,\n  // used by latency-controller\n  liveMaxLatencyDuration: undefined,\n  // used by latency-controller\n  maxLiveSyncPlaybackRate: 1,\n  // used by latency-controller\n  liveDurationInfinity: false,\n  // used by buffer-controller\n  liveBackBufferLength: null,\n  // used by buffer-controller\n  maxMaxBufferLength: 600,\n  // used by stream-controller\n  enableWorker: true,\n  // used by demuxer\n  enableSoftwareAES: true,\n  // used by decrypter\n  manifestLoadingTimeOut: 10000,\n  // used by playlist-loader\n  manifestLoadingMaxRetry: 1,\n  // used by playlist-loader\n  manifestLoadingRetryDelay: 1000,\n  // used by playlist-loader\n  manifestLoadingMaxRetryTimeout: 64000,\n  // used by playlist-loader\n  startLevel: undefined,\n  // used by level-controller\n  levelLoadingTimeOut: 10000,\n  // used by playlist-loader\n  levelLoadingMaxRetry: 4,\n  // used by playlist-loader\n  levelLoadingRetryDelay: 1000,\n  // used by playlist-loader\n  levelLoadingMaxRetryTimeout: 64000,\n  // used by playlist-loader\n  fragLoadingTimeOut: 20000,\n  // used by fragment-loader\n  fragLoadingMaxRetry: 6,\n  // used by fragment-loader\n  fragLoadingRetryDelay: 1000,\n  // used by fragment-loader\n  fragLoadingMaxRetryTimeout: 64000,\n  // used by fragment-loader\n  startFragPrefetch: false,\n  // used by stream-controller\n  fpsDroppedMonitoringPeriod: 5000,\n  // used by fps-controller\n  fpsDroppedMonitoringThreshold: 0.2,\n  // used by fps-controller\n  appendErrorMaxRetry: 3,\n  // used by buffer-controller\n  loader: _utils_xhr_loader__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\n  // loader: FetchLoader,\n  fLoader: undefined,\n  // used by fragment-loader\n  pLoader: undefined,\n  // used by playlist-loader\n  xhrSetup: undefined,\n  // used by xhr-loader\n  licenseXhrSetup: undefined,\n  // used by eme-controller\n  licenseResponseCallback: undefined,\n  // used by eme-controller\n  abrController: _controller_abr_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  bufferController: _controller_buffer_controller__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n  capLevelController: _controller_cap_level_controller__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n  fpsController: _controller_fps_controller__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n  stretchShortVideoTrack: false,\n  // used by mp4-remuxer\n  maxAudioFramesDrift: 1,\n  // used by mp4-remuxer\n  forceKeyFrameOnDiscontinuity: true,\n  // used by ts-demuxer\n  abrEwmaFastLive: 3,\n  // used by abr-controller\n  abrEwmaSlowLive: 9,\n  // used by abr-controller\n  abrEwmaFastVoD: 3,\n  // used by abr-controller\n  abrEwmaSlowVoD: 9,\n  // used by abr-controller\n  abrEwmaDefaultEstimate: 5e5,\n  // 500 kbps  // used by abr-controller\n  abrBandWidthFactor: 0.95,\n  // used by abr-controller\n  abrBandWidthUpFactor: 0.7,\n  // used by abr-controller\n  abrMaxWithRealBitrate: false,\n  // used by abr-controller\n  maxStarvationDelay: 4,\n  // used by abr-controller\n  maxLoadingDelay: 4,\n  // used by abr-controller\n  minAutoBitrate: 0,\n  // used by hls\n  emeEnabled: false,\n  // used by eme-controller\n  widevineLicenseUrl: undefined,\n  // used by eme-controller\n  drmSystemOptions: {},\n  // used by eme-controller\n  requestMediaKeySystemAccessFunc: _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_14__[\"requestMediaKeySystemAccess\"],\n  // used by eme-controller\n  testBandwidth: true,\n  progressive: false,\n  lowLatencyMode: true,\n  cmcd: undefined,\n  enableDateRangeMetadataCues: true,\n  enableEmsgMetadataCues: true,\n  enableID3MetadataCues: true\n}, timelineConfig()), {}, {\n  subtitleStreamController:   true ? _controller_subtitle_stream_controller__WEBPACK_IMPORTED_MODULE_3__[\"SubtitleStreamController\"] : 0,\n  subtitleTrackController:   true ? _controller_subtitle_track_controller__WEBPACK_IMPORTED_MODULE_4__[\"default\"] : 0,\n  timelineController:   true ? _controller_timeline_controller__WEBPACK_IMPORTED_MODULE_6__[\"TimelineController\"] : 0,\n  audioStreamController:   true ? _controller_audio_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"default\"] : 0,\n  audioTrackController:   true ? _controller_audio_track_controller__WEBPACK_IMPORTED_MODULE_2__[\"default\"] : 0,\n  emeController:   true ? _controller_eme_controller__WEBPACK_IMPORTED_MODULE_9__[\"default\"] : 0,\n  cmcdController:   true ? _controller_cmcd_controller__WEBPACK_IMPORTED_MODULE_10__[\"default\"] : 0\n});\n\nfunction timelineConfig() {\n  return {\n    cueHandler: _utils_cues__WEBPACK_IMPORTED_MODULE_13__[\"default\"],\n    // used by timeline-controller\n    enableWebVTT: true,\n    // used by timeline-controller\n    enableIMSC1: true,\n    // used by timeline-controller\n    enableCEA708Captions: true,\n    // used by timeline-controller\n    captionsTextTrack1Label: 'English',\n    // used by timeline-controller\n    captionsTextTrack1LanguageCode: 'en',\n    // used by timeline-controller\n    captionsTextTrack2Label: 'Spanish',\n    // used by timeline-controller\n    captionsTextTrack2LanguageCode: 'es',\n    // used by timeline-controller\n    captionsTextTrack3Label: 'Unknown CC',\n    // used by timeline-controller\n    captionsTextTrack3LanguageCode: '',\n    // used by timeline-controller\n    captionsTextTrack4Label: 'Unknown CC',\n    // used by timeline-controller\n    captionsTextTrack4LanguageCode: '',\n    // used by timeline-controller\n    renderTextTracksNatively: true\n  };\n}\n\nfunction mergeConfig(defaultConfig, userConfig) {\n  if ((userConfig.liveSyncDurationCount || userConfig.liveMaxLatencyDurationCount) && (userConfig.liveSyncDuration || userConfig.liveMaxLatencyDuration)) {\n    throw new Error(\"Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration\");\n  }\n\n  if (userConfig.liveMaxLatencyDurationCount !== undefined && (userConfig.liveSyncDurationCount === undefined || userConfig.liveMaxLatencyDurationCount <= userConfig.liveSyncDurationCount)) {\n    throw new Error('Illegal hls.js config: \"liveMaxLatencyDurationCount\" must be greater than \"liveSyncDurationCount\"');\n  }\n\n  if (userConfig.liveMaxLatencyDuration !== undefined && (userConfig.liveSyncDuration === undefined || userConfig.liveMaxLatencyDuration <= userConfig.liveSyncDuration)) {\n    throw new Error('Illegal hls.js config: \"liveMaxLatencyDuration\" must be greater than \"liveSyncDuration\"');\n  }\n\n  return _extends({}, defaultConfig, userConfig);\n}\nfunction enableStreamingMode(config) {\n  var currentLoader = config.loader;\n\n  if (currentLoader !== _utils_fetch_loader__WEBPACK_IMPORTED_MODULE_12__[\"default\"] && currentLoader !== _utils_xhr_loader__WEBPACK_IMPORTED_MODULE_11__[\"default\"]) {\n    // If a developer has configured their own loader, respect that choice\n    _utils_logger__WEBPACK_IMPORTED_MODULE_15__[\"logger\"].log('[config]: Custom loader detected, cannot enable progressive streaming');\n    config.progressive = false;\n  } else {\n    var canStreamProgressively = Object(_utils_fetch_loader__WEBPACK_IMPORTED_MODULE_12__[\"fetchSupported\"])();\n\n    if (canStreamProgressively) {\n      config.loader = _utils_fetch_loader__WEBPACK_IMPORTED_MODULE_12__[\"default\"];\n      config.progressive = true;\n      config.enableSoftwareAES = true;\n      _utils_logger__WEBPACK_IMPORTED_MODULE_15__[\"logger\"].log('[config]: Progressive streaming enabled, using FetchLoader');\n    }\n  }\n}\n\n/***/ }),\n\n/***/ \"./src/controller/abr-controller.ts\":\n/*!******************************************!*\\\n  !*** ./src/controller/abr-controller.ts ***!\n  \\******************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_42274__) {\n\n\"use strict\";\n__nested_webpack_require_42274__.r(__webpack_exports__);\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_42274__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _utils_ewma_bandwidth_estimator__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_42274__(/*! ../utils/ewma-bandwidth-estimator */ \"./src/utils/ewma-bandwidth-estimator.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_42274__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_42274__(/*! ../utils/buffer-helper */ \"./src/utils/buffer-helper.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_42274__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_42274__(/*! ../types/loader */ \"./src/types/loader.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_42274__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n\n\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\nvar AbrController = /*#__PURE__*/function () {\n  function AbrController(hls) {\n    this.hls = void 0;\n    this.lastLoadedFragLevel = 0;\n    this._nextAutoLevel = -1;\n    this.timer = void 0;\n    this.onCheck = this._abandonRulesCheck.bind(this);\n    this.fragCurrent = null;\n    this.partCurrent = null;\n    this.bitrateTestDelay = 0;\n    this.bwEstimator = void 0;\n    this.hls = hls;\n    var config = hls.config;\n    this.bwEstimator = new _utils_ewma_bandwidth_estimator__WEBPACK_IMPORTED_MODULE_1__[\"default\"](config.abrEwmaSlowVoD, config.abrEwmaFastVoD, config.abrEwmaDefaultEstimate);\n    this.registerListeners();\n  }\n\n  var _proto = AbrController.prototype;\n\n  _proto.registerListeners = function registerListeners() {\n    var hls = this.hls;\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].FRAG_LOADING, this.onFragLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].FRAG_LOADED, this.onFragLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].FRAG_BUFFERED, this.onFragBuffered, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].ERROR, this.onError, this);\n  };\n\n  _proto.unregisterListeners = function unregisterListeners() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].FRAG_LOADING, this.onFragLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].FRAG_LOADED, this.onFragLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].FRAG_BUFFERED, this.onFragBuffered, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].ERROR, this.onError, this);\n  };\n\n  _proto.destroy = function destroy() {\n    this.unregisterListeners();\n    this.clearTimer(); // @ts-ignore\n\n    this.hls = this.onCheck = null;\n    this.fragCurrent = this.partCurrent = null;\n  };\n\n  _proto.onFragLoading = function onFragLoading(event, data) {\n    var frag = data.frag;\n\n    if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_5__[\"PlaylistLevelType\"].MAIN) {\n      if (!this.timer) {\n        var _data$part;\n\n        this.fragCurrent = frag;\n        this.partCurrent = (_data$part = data.part) != null ? _data$part : null;\n        this.timer = self.setInterval(this.onCheck, 100);\n      }\n    }\n  };\n\n  _proto.onLevelLoaded = function onLevelLoaded(event, data) {\n    var config = this.hls.config;\n\n    if (data.details.live) {\n      this.bwEstimator.update(config.abrEwmaSlowLive, config.abrEwmaFastLive);\n    } else {\n      this.bwEstimator.update(config.abrEwmaSlowVoD, config.abrEwmaFastVoD);\n    }\n  }\n  /*\n      This method monitors the download rate of the current fragment, and will downswitch if that fragment will not load\n      quickly enough to prevent underbuffering\n    */\n  ;\n\n  _proto._abandonRulesCheck = function _abandonRulesCheck() {\n    var frag = this.fragCurrent,\n        part = this.partCurrent,\n        hls = this.hls;\n    var autoLevelEnabled = hls.autoLevelEnabled,\n        config = hls.config,\n        media = hls.media;\n\n    if (!frag || !media) {\n      return;\n    }\n\n    var stats = part ? part.stats : frag.stats;\n    var duration = part ? part.duration : frag.duration; // If loading has been aborted and not in lowLatencyMode, stop timer and return\n\n    if (stats.aborted) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].warn('frag loader destroy or aborted, disarm abandonRules');\n      this.clearTimer(); // reset forced auto level value so that next level will be selected\n\n      this._nextAutoLevel = -1;\n      return;\n    } // This check only runs if we're in ABR mode and actually playing\n\n\n    if (!autoLevelEnabled || media.paused || !media.playbackRate || !media.readyState) {\n      return;\n    }\n\n    var requestDelay = performance.now() - stats.loading.start;\n    var playbackRate = Math.abs(media.playbackRate); // In order to work with a stable bandwidth, only begin monitoring bandwidth after half of the fragment has been loaded\n\n    if (requestDelay <= 500 * duration / playbackRate) {\n      return;\n    }\n\n    var levels = hls.levels,\n        minAutoLevel = hls.minAutoLevel;\n    var level = levels[frag.level];\n    var expectedLen = stats.total || Math.max(stats.loaded, Math.round(duration * level.maxBitrate / 8));\n    var loadRate = Math.max(1, stats.bwEstimate ? stats.bwEstimate / 8 : stats.loaded * 1000 / requestDelay); // fragLoadDelay is an estimate of the time (in seconds) it will take to buffer the entire fragment\n\n    var fragLoadedDelay = (expectedLen - stats.loaded) / loadRate;\n    var pos = media.currentTime; // bufferStarvationDelay is an estimate of the amount time (in seconds) it will take to exhaust the buffer\n\n    var bufferStarvationDelay = (_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__[\"BufferHelper\"].bufferInfo(media, pos, config.maxBufferHole).end - pos) / playbackRate; // Attempt an emergency downswitch only if less than 2 fragment lengths are buffered, and the time to finish loading\n    // the current fragment is greater than the amount of buffer we have left\n\n    if (bufferStarvationDelay >= 2 * duration / playbackRate || fragLoadedDelay <= bufferStarvationDelay) {\n      return;\n    }\n\n    var fragLevelNextLoadedDelay = Number.POSITIVE_INFINITY;\n    var nextLoadLevel; // Iterate through lower level and try to find the largest one that avoids rebuffering\n\n    for (nextLoadLevel = frag.level - 1; nextLoadLevel > minAutoLevel; nextLoadLevel--) {\n      // compute time to load next fragment at lower level\n      // 0.8 : consider only 80% of current bw to be conservative\n      // 8 = bits per byte (bps/Bps)\n      var levelNextBitrate = levels[nextLoadLevel].maxBitrate;\n      fragLevelNextLoadedDelay = duration * levelNextBitrate / (8 * 0.8 * loadRate);\n\n      if (fragLevelNextLoadedDelay < bufferStarvationDelay) {\n        break;\n      }\n    } // Only emergency switch down if it takes less time to load a new fragment at lowest level instead of continuing\n    // to load the current one\n\n\n    if (fragLevelNextLoadedDelay >= fragLoadedDelay) {\n      return;\n    }\n\n    var bwEstimate = this.bwEstimator.getEstimate();\n    _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].warn(\"Fragment \" + frag.sn + (part ? ' part ' + part.index : '') + \" of level \" + frag.level + \" is loading too slowly and will cause an underbuffer; aborting and switching to level \" + nextLoadLevel + \"\\n      Current BW estimate: \" + (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(bwEstimate) ? (bwEstimate / 1024).toFixed(3) : 'Unknown') + \" Kb/s\\n      Estimated load time for current fragment: \" + fragLoadedDelay.toFixed(3) + \" s\\n      Estimated load time for the next fragment: \" + fragLevelNextLoadedDelay.toFixed(3) + \" s\\n      Time to underbuffer: \" + bufferStarvationDelay.toFixed(3) + \" s\");\n    hls.nextLoadLevel = nextLoadLevel;\n    this.bwEstimator.sample(requestDelay, stats.loaded);\n    this.clearTimer();\n\n    if (frag.loader) {\n      this.fragCurrent = this.partCurrent = null;\n      frag.loader.abort();\n    }\n\n    hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].FRAG_LOAD_EMERGENCY_ABORTED, {\n      frag: frag,\n      part: part,\n      stats: stats\n    });\n  };\n\n  _proto.onFragLoaded = function onFragLoaded(event, _ref) {\n    var frag = _ref.frag,\n        part = _ref.part;\n\n    if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_5__[\"PlaylistLevelType\"].MAIN && Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(frag.sn)) {\n      var stats = part ? part.stats : frag.stats;\n      var duration = part ? part.duration : frag.duration; // stop monitoring bw once frag loaded\n\n      this.clearTimer(); // store level id after successful fragment load\n\n      this.lastLoadedFragLevel = frag.level; // reset forced auto level value so that next level will be selected\n\n      this._nextAutoLevel = -1; // compute level average bitrate\n\n      if (this.hls.config.abrMaxWithRealBitrate) {\n        var level = this.hls.levels[frag.level];\n        var loadedBytes = (level.loaded ? level.loaded.bytes : 0) + stats.loaded;\n        var loadedDuration = (level.loaded ? level.loaded.duration : 0) + duration;\n        level.loaded = {\n          bytes: loadedBytes,\n          duration: loadedDuration\n        };\n        level.realBitrate = Math.round(8 * loadedBytes / loadedDuration);\n      }\n\n      if (frag.bitrateTest) {\n        var fragBufferedData = {\n          stats: stats,\n          frag: frag,\n          part: part,\n          id: frag.type\n        };\n        this.onFragBuffered(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].FRAG_BUFFERED, fragBufferedData);\n      }\n    }\n  };\n\n  _proto.onFragBuffered = function onFragBuffered(event, data) {\n    var frag = data.frag,\n        part = data.part;\n    var stats = part ? part.stats : frag.stats;\n\n    if (stats.aborted) {\n      return;\n    } // Only count non-alt-audio frags which were actually buffered in our BW calculations\n\n\n    if (frag.type !== _types_loader__WEBPACK_IMPORTED_MODULE_5__[\"PlaylistLevelType\"].MAIN || frag.sn === 'initSegment') {\n      return;\n    } // Use the difference between parsing and request instead of buffering and request to compute fragLoadingProcessing;\n    // rationale is that buffer appending only happens once media is attached. This can happen when config.startFragPrefetch\n    // is used. If we used buffering in that case, our BW estimate sample will be very large.\n\n\n    var processingMs = stats.parsing.end - stats.loading.start;\n    this.bwEstimator.sample(processingMs, stats.loaded);\n    stats.bwEstimate = this.bwEstimator.getEstimate();\n\n    if (frag.bitrateTest) {\n      this.bitrateTestDelay = processingMs / 1000;\n    } else {\n      this.bitrateTestDelay = 0;\n    }\n  };\n\n  _proto.onError = function onError(event, data) {\n    // stop timer in case of frag loading error\n    switch (data.details) {\n      case _errors__WEBPACK_IMPORTED_MODULE_4__[\"ErrorDetails\"].FRAG_LOAD_ERROR:\n      case _errors__WEBPACK_IMPORTED_MODULE_4__[\"ErrorDetails\"].FRAG_LOAD_TIMEOUT:\n        this.clearTimer();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  _proto.clearTimer = function clearTimer() {\n    self.clearInterval(this.timer);\n    this.timer = undefined;\n  } // return next auto level\n  ;\n\n  _proto.getNextABRAutoLevel = function getNextABRAutoLevel() {\n    var fragCurrent = this.fragCurrent,\n        partCurrent = this.partCurrent,\n        hls = this.hls;\n    var maxAutoLevel = hls.maxAutoLevel,\n        config = hls.config,\n        minAutoLevel = hls.minAutoLevel,\n        media = hls.media;\n    var currentFragDuration = partCurrent ? partCurrent.duration : fragCurrent ? fragCurrent.duration : 0;\n    var pos = media ? media.currentTime : 0; // playbackRate is the absolute value of the playback rate; if media.playbackRate is 0, we use 1 to load as\n    // if we're playing back at the normal rate.\n\n    var playbackRate = media && media.playbackRate !== 0 ? Math.abs(media.playbackRate) : 1.0;\n    var avgbw = this.bwEstimator ? this.bwEstimator.getEstimate() : config.abrEwmaDefaultEstimate; // bufferStarvationDelay is the wall-clock time left until the playback buffer is exhausted.\n\n    var bufferStarvationDelay = (_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__[\"BufferHelper\"].bufferInfo(media, pos, config.maxBufferHole).end - pos) / playbackRate; // First, look to see if we can find a level matching with our avg bandwidth AND that could also guarantee no rebuffering at all\n\n    var bestLevel = this.findBestLevel(avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, config.abrBandWidthFactor, config.abrBandWidthUpFactor);\n\n    if (bestLevel >= 0) {\n      return bestLevel;\n    }\n\n    _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].trace((bufferStarvationDelay ? 'rebuffering expected' : 'buffer is empty') + \", finding optimal quality level\"); // not possible to get rid of rebuffering ... let's try to find level that will guarantee less than maxStarvationDelay of rebuffering\n    // if no matching level found, logic will return 0\n\n    var maxStarvationDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxStarvationDelay) : config.maxStarvationDelay;\n    var bwFactor = config.abrBandWidthFactor;\n    var bwUpFactor = config.abrBandWidthUpFactor;\n\n    if (!bufferStarvationDelay) {\n      // in case buffer is empty, let's check if previous fragment was loaded to perform a bitrate test\n      var bitrateTestDelay = this.bitrateTestDelay;\n\n      if (bitrateTestDelay) {\n        // if it is the case, then we need to adjust our max starvation delay using maxLoadingDelay config value\n        // max video loading delay used in  automatic start level selection :\n        // in that mode ABR controller will ensure that video loading time (ie the time to fetch the first fragment at lowest quality level +\n        // the time to fetch the fragment at the appropriate quality level is less than ```maxLoadingDelay``` )\n        // cap maxLoadingDelay and ensure it is not bigger 'than bitrate test' frag duration\n        var maxLoadingDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxLoadingDelay) : config.maxLoadingDelay;\n        maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;\n        _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].trace(\"bitrate test took \" + Math.round(1000 * bitrateTestDelay) + \"ms, set first fragment max fetchDuration to \" + Math.round(1000 * maxStarvationDelay) + \" ms\"); // don't use conservative factor on bitrate test\n\n        bwFactor = bwUpFactor = 1;\n      }\n    }\n\n    bestLevel = this.findBestLevel(avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay + maxStarvationDelay, bwFactor, bwUpFactor);\n    return Math.max(bestLevel, 0);\n  };\n\n  _proto.findBestLevel = function findBestLevel(currentBw, minAutoLevel, maxAutoLevel, maxFetchDuration, bwFactor, bwUpFactor) {\n    var _level$details;\n\n    var fragCurrent = this.fragCurrent,\n        partCurrent = this.partCurrent,\n        currentLevel = this.lastLoadedFragLevel;\n    var levels = this.hls.levels;\n    var level = levels[currentLevel];\n    var live = !!(level !== null && level !== void 0 && (_level$details = level.details) !== null && _level$details !== void 0 && _level$details.live);\n    var currentCodecSet = level === null || level === void 0 ? void 0 : level.codecSet;\n    var currentFragDuration = partCurrent ? partCurrent.duration : fragCurrent ? fragCurrent.duration : 0;\n\n    for (var i = maxAutoLevel; i >= minAutoLevel; i--) {\n      var levelInfo = levels[i];\n\n      if (!levelInfo || currentCodecSet && levelInfo.codecSet !== currentCodecSet) {\n        continue;\n      }\n\n      var levelDetails = levelInfo.details;\n      var avgDuration = (partCurrent ? levelDetails === null || levelDetails === void 0 ? void 0 : levelDetails.partTarget : levelDetails === null || levelDetails === void 0 ? void 0 : levelDetails.averagetargetduration) || currentFragDuration;\n      var adjustedbw = void 0; // follow algorithm captured from stagefright :\n      // https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp\n      // Pick the highest bandwidth stream below or equal to estimated bandwidth.\n      // consider only 80% of the available bandwidth, but if we are switching up,\n      // be even more conservative (70%) to avoid overestimating and immediately\n      // switching back.\n\n      if (i <= currentLevel) {\n        adjustedbw = bwFactor * currentBw;\n      } else {\n        adjustedbw = bwUpFactor * currentBw;\n      }\n\n      var bitrate = levels[i].maxBitrate;\n      var fetchDuration = bitrate * avgDuration / adjustedbw;\n      _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].trace(\"level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: \" + i + \"/\" + Math.round(adjustedbw) + \"/\" + bitrate + \"/\" + avgDuration + \"/\" + maxFetchDuration + \"/\" + fetchDuration); // if adjusted bw is greater than level bitrate AND\n\n      if (adjustedbw > bitrate && ( // fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches\n      // we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...\n      // special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that findBestLevel will return -1\n      !fetchDuration || live && !this.bitrateTestDelay || fetchDuration < maxFetchDuration)) {\n        // as we are looping from highest to lowest, this will return the best achievable quality level\n        return i;\n      }\n    } // not enough time budget even with quality level 0 ... rebuffering might happen\n\n\n    return -1;\n  };\n\n  _createClass(AbrController, [{\n    key: \"nextAutoLevel\",\n    get: function get() {\n      var forcedAutoLevel = this._nextAutoLevel;\n      var bwEstimator = this.bwEstimator; // in case next auto level has been forced, and bw not available or not reliable, return forced value\n\n      if (forcedAutoLevel !== -1 && !bwEstimator.canEstimate()) {\n        return forcedAutoLevel;\n      } // compute next level using ABR logic\n\n\n      var nextABRAutoLevel = this.getNextABRAutoLevel(); // use forced auto level when ABR selected level has errored\n\n      if (forcedAutoLevel !== -1 && this.hls.levels[nextABRAutoLevel].loadError) {\n        return forcedAutoLevel;\n      } // if forced auto level has been defined, use it to cap ABR computed quality level\n\n\n      if (forcedAutoLevel !== -1) {\n        nextABRAutoLevel = Math.min(forcedAutoLevel, nextABRAutoLevel);\n      }\n\n      return nextABRAutoLevel;\n    },\n    set: function set(nextLevel) {\n      this._nextAutoLevel = nextLevel;\n    }\n  }]);\n\n  return AbrController;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AbrController);\n\n/***/ }),\n\n/***/ \"./src/controller/audio-stream-controller.ts\":\n/*!***************************************************!*\\\n  !*** ./src/controller/audio-stream-controller.ts ***!\n  \\***************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_62421__) {\n\n\"use strict\";\n__nested_webpack_require_62421__.r(__webpack_exports__);\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_62421__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_62421__(/*! ./base-stream-controller */ \"./src/controller/base-stream-controller.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_62421__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_62421__(/*! ../utils/buffer-helper */ \"./src/utils/buffer-helper.ts\");\n/* harmony import */ var _fragment_tracker__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_62421__(/*! ./fragment-tracker */ \"./src/controller/fragment-tracker.ts\");\n/* harmony import */ var _types_level__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_62421__(/*! ../types/level */ \"./src/types/level.ts\");\n/* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_62421__(/*! ../types/loader */ \"./src/types/loader.ts\");\n/* harmony import */ var _loader_fragment__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_62421__(/*! ../loader/fragment */ \"./src/loader/fragment.ts\");\n/* harmony import */ var _demux_chunk_cache__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_62421__(/*! ../demux/chunk-cache */ \"./src/demux/chunk-cache.ts\");\n/* harmony import */ var _demux_transmuxer_interface__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_62421__(/*! ../demux/transmuxer-interface */ \"./src/demux/transmuxer-interface.ts\");\n/* harmony import */ var _types_transmuxer__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_62421__(/*! ../types/transmuxer */ \"./src/types/transmuxer.ts\");\n/* harmony import */ var _fragment_finders__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_62421__(/*! ./fragment-finders */ \"./src/controller/fragment-finders.ts\");\n/* harmony import */ var _utils_discontinuities__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_62421__(/*! ../utils/discontinuities */ \"./src/utils/discontinuities.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_62421__(/*! ../errors */ \"./src/errors.ts\");\n\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar TICK_INTERVAL = 100; // how often to tick in ms\n\nvar AudioStreamController = /*#__PURE__*/function (_BaseStreamController) {\n  _inheritsLoose(AudioStreamController, _BaseStreamController);\n\n  function AudioStreamController(hls, fragmentTracker) {\n    var _this;\n\n    _this = _BaseStreamController.call(this, hls, fragmentTracker, '[audio-stream-controller]') || this;\n    _this.videoBuffer = null;\n    _this.videoTrackCC = -1;\n    _this.waitingVideoCC = -1;\n    _this.audioSwitch = false;\n    _this.trackId = -1;\n    _this.waitingData = null;\n    _this.mainDetails = null;\n    _this.bufferFlushed = false;\n    _this.cachedTrackLoadedData = null;\n\n    _this._registerListeners();\n\n    return _this;\n  }\n\n  var _proto = AudioStreamController.prototype;\n\n  _proto.onHandlerDestroying = function onHandlerDestroying() {\n    this._unregisterListeners();\n\n    this.mainDetails = null;\n  };\n\n  _proto._registerListeners = function _registerListeners() {\n    var hls = this.hls;\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].ERROR, this.onError, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].BUFFER_RESET, this.onBufferReset, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].BUFFER_CREATED, this.onBufferCreated, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].BUFFER_FLUSHED, this.onBufferFlushed, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].INIT_PTS_FOUND, this.onInitPtsFound, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].FRAG_BUFFERED, this.onFragBuffered, this);\n  };\n\n  _proto._unregisterListeners = function _unregisterListeners() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].ERROR, this.onError, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].BUFFER_RESET, this.onBufferReset, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].BUFFER_CREATED, this.onBufferCreated, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].BUFFER_FLUSHED, this.onBufferFlushed, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].INIT_PTS_FOUND, this.onInitPtsFound, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].FRAG_BUFFERED, this.onFragBuffered, this);\n  } // INIT_PTS_FOUND is triggered when the video track parsed in the stream-controller has a new PTS value\n  ;\n\n  _proto.onInitPtsFound = function onInitPtsFound(event, _ref) {\n    var frag = _ref.frag,\n        id = _ref.id,\n        initPTS = _ref.initPTS;\n\n    // Always update the new INIT PTS\n    // Can change due level switch\n    if (id === 'main') {\n      var cc = frag.cc;\n      this.initPTS[frag.cc] = initPTS;\n      this.log(\"InitPTS for cc: \" + cc + \" found from main: \" + initPTS);\n      this.videoTrackCC = cc; // If we are waiting, tick immediately to unblock audio fragment transmuxing\n\n      if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_INIT_PTS) {\n        this.tick();\n      }\n    }\n  };\n\n  _proto.startLoad = function startLoad(startPosition) {\n    if (!this.levels) {\n      this.startPosition = startPosition;\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].STOPPED;\n      return;\n    }\n\n    var lastCurrentTime = this.lastCurrentTime;\n    this.stopLoad();\n    this.setInterval(TICK_INTERVAL);\n    this.fragLoadError = 0;\n\n    if (lastCurrentTime > 0 && startPosition === -1) {\n      this.log(\"Override startPosition with lastCurrentTime @\" + lastCurrentTime.toFixed(3));\n      startPosition = lastCurrentTime;\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n    } else {\n      this.loadedmetadata = false;\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_TRACK;\n    }\n\n    this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;\n    this.tick();\n  };\n\n  _proto.doTick = function doTick() {\n    switch (this.state) {\n      case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE:\n        this.doTickIdle();\n        break;\n\n      case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_TRACK:\n        {\n          var _levels$trackId;\n\n          var levels = this.levels,\n              trackId = this.trackId;\n          var details = levels === null || levels === void 0 ? void 0 : (_levels$trackId = levels[trackId]) === null || _levels$trackId === void 0 ? void 0 : _levels$trackId.details;\n\n          if (details) {\n            if (this.waitForCdnTuneIn(details)) {\n              break;\n            }\n\n            this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_INIT_PTS;\n          }\n\n          break;\n        }\n\n      case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].FRAG_LOADING_WAITING_RETRY:\n        {\n          var _this$media;\n\n          var now = performance.now();\n          var retryDate = this.retryDate; // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading\n\n          if (!retryDate || now >= retryDate || (_this$media = this.media) !== null && _this$media !== void 0 && _this$media.seeking) {\n            this.log('RetryDate reached, switch back to IDLE state');\n            this.resetStartWhenNotLoaded(this.trackId);\n            this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n          }\n\n          break;\n        }\n\n      case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_INIT_PTS:\n        {\n          // Ensure we don't get stuck in the WAITING_INIT_PTS state if the waiting frag CC doesn't match any initPTS\n          var waitingData = this.waitingData;\n\n          if (waitingData) {\n            var frag = waitingData.frag,\n                part = waitingData.part,\n                cache = waitingData.cache,\n                complete = waitingData.complete;\n\n            if (this.initPTS[frag.cc] !== undefined) {\n              this.waitingData = null;\n              this.waitingVideoCC = -1;\n              this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].FRAG_LOADING;\n              var payload = cache.flush();\n              var data = {\n                frag: frag,\n                part: part,\n                payload: payload,\n                networkDetails: null\n              };\n\n              this._handleFragmentLoadProgress(data);\n\n              if (complete) {\n                _BaseStreamController.prototype._handleFragmentLoadComplete.call(this, data);\n              }\n            } else if (this.videoTrackCC !== this.waitingVideoCC) {\n              // Drop waiting fragment if videoTrackCC has changed since waitingFragment was set and initPTS was not found\n              this.log(\"Waiting fragment cc (\" + frag.cc + \") cancelled because video is at cc \" + this.videoTrackCC);\n              this.clearWaitingFragment();\n            } else {\n              // Drop waiting fragment if an earlier fragment is needed\n              var pos = this.getLoadPosition();\n              var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__[\"BufferHelper\"].bufferInfo(this.mediaBuffer, pos, this.config.maxBufferHole);\n              var waitingFragmentAtPosition = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_11__[\"fragmentWithinToleranceTest\"])(bufferInfo.end, this.config.maxFragLookUpTolerance, frag);\n\n              if (waitingFragmentAtPosition < 0) {\n                this.log(\"Waiting fragment cc (\" + frag.cc + \") @ \" + frag.start + \" cancelled because another fragment at \" + bufferInfo.end + \" is needed\");\n                this.clearWaitingFragment();\n              }\n            }\n          } else {\n            this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n          }\n        }\n    }\n\n    this.onTickEnd();\n  };\n\n  _proto.clearWaitingFragment = function clearWaitingFragment() {\n    var waitingData = this.waitingData;\n\n    if (waitingData) {\n      this.fragmentTracker.removeFragment(waitingData.frag);\n      this.waitingData = null;\n      this.waitingVideoCC = -1;\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n    }\n  };\n\n  _proto.resetLoadingState = function resetLoadingState() {\n    this.clearWaitingFragment();\n\n    _BaseStreamController.prototype.resetLoadingState.call(this);\n  };\n\n  _proto.onTickEnd = function onTickEnd() {\n    var media = this.media;\n\n    if (!media || !media.readyState) {\n      // Exit early if we don't have media or if the media hasn't buffered anything yet (readyState 0)\n      return;\n    }\n\n    var mediaBuffer = this.mediaBuffer ? this.mediaBuffer : media;\n    var buffered = mediaBuffer.buffered;\n\n    if (!this.loadedmetadata && buffered.length) {\n      this.loadedmetadata = true;\n    }\n\n    this.lastCurrentTime = media.currentTime;\n  };\n\n  _proto.doTickIdle = function doTickIdle() {\n    var _frag$decryptdata, _frag$decryptdata2;\n\n    var hls = this.hls,\n        levels = this.levels,\n        media = this.media,\n        trackId = this.trackId;\n    var config = hls.config;\n\n    if (!levels || !levels[trackId]) {\n      return;\n    } // if video not attached AND\n    // start fragment already requested OR start frag prefetch not enabled\n    // exit loop\n    // => if media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop\n\n\n    if (!media && (this.startFragRequested || !config.startFragPrefetch)) {\n      return;\n    }\n\n    var levelInfo = levels[trackId];\n    var trackDetails = levelInfo.details;\n\n    if (!trackDetails || trackDetails.live && this.levelLastLoaded !== trackId || this.waitForCdnTuneIn(trackDetails)) {\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_TRACK;\n      return;\n    }\n\n    var bufferable = this.mediaBuffer ? this.mediaBuffer : this.media;\n\n    if (this.bufferFlushed && bufferable) {\n      this.bufferFlushed = false;\n      this.afterBufferFlushed(bufferable, _loader_fragment__WEBPACK_IMPORTED_MODULE_7__[\"ElementaryStreamTypes\"].AUDIO, _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].AUDIO);\n    }\n\n    var bufferInfo = this.getFwdBufferInfo(bufferable, _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].AUDIO);\n\n    if (bufferInfo === null) {\n      return;\n    }\n\n    var mainBufferInfo = this.getFwdBufferInfo(this.videoBuffer ? this.videoBuffer : this.media, _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].MAIN);\n    var bufferLen = bufferInfo.len;\n    var maxBufLen = this.getMaxBufferLength(mainBufferInfo === null || mainBufferInfo === void 0 ? void 0 : mainBufferInfo.len);\n    var audioSwitch = this.audioSwitch; // if buffer length is less than maxBufLen try to load a new fragment\n\n    if (bufferLen >= maxBufLen && !audioSwitch) {\n      return;\n    }\n\n    if (!audioSwitch && this._streamEnded(bufferInfo, trackDetails)) {\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].BUFFER_EOS, {\n        type: 'audio'\n      });\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].ENDED;\n      return;\n    }\n\n    var fragments = trackDetails.fragments;\n    var start = fragments[0].start;\n    var targetBufferTime = bufferInfo.end;\n\n    if (audioSwitch && media) {\n      var pos = this.getLoadPosition();\n      targetBufferTime = pos; // if currentTime (pos) is less than alt audio playlist start time, it means that alt audio is ahead of currentTime\n\n      if (trackDetails.PTSKnown && pos < start) {\n        // if everything is buffered from pos to start or if audio buffer upfront, let's seek to start\n        if (bufferInfo.end > start || bufferInfo.nextStart) {\n          this.log('Alt audio track ahead of main track, seek to start of alt audio track');\n          media.currentTime = start + 0.05;\n        }\n      }\n    } // buffer audio up to one target duration ahead of main buffer\n\n\n    if (mainBufferInfo && targetBufferTime > mainBufferInfo.end + trackDetails.targetduration) {\n      return;\n    } // wait for main buffer after buffing some audio\n\n\n    if ((!mainBufferInfo || !mainBufferInfo.len) && bufferInfo.len) {\n      return;\n    }\n\n    var frag = this.getNextFragment(targetBufferTime, trackDetails);\n\n    if (!frag) {\n      this.bufferFlushed = true;\n      return;\n    }\n\n    if (((_frag$decryptdata = frag.decryptdata) === null || _frag$decryptdata === void 0 ? void 0 : _frag$decryptdata.keyFormat) === 'identity' && !((_frag$decryptdata2 = frag.decryptdata) !== null && _frag$decryptdata2 !== void 0 && _frag$decryptdata2.key)) {\n      this.loadKey(frag, trackDetails);\n    } else {\n      this.loadFragment(frag, trackDetails, targetBufferTime);\n    }\n  };\n\n  _proto.getMaxBufferLength = function getMaxBufferLength(mainBufferLength) {\n    var maxConfigBuffer = _BaseStreamController.prototype.getMaxBufferLength.call(this);\n\n    if (!mainBufferLength) {\n      return maxConfigBuffer;\n    }\n\n    return Math.max(maxConfigBuffer, mainBufferLength);\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    this.videoBuffer = null;\n\n    _BaseStreamController.prototype.onMediaDetaching.call(this);\n  };\n\n  _proto.onAudioTracksUpdated = function onAudioTracksUpdated(event, _ref2) {\n    var audioTracks = _ref2.audioTracks;\n    this.resetTransmuxer();\n    this.levels = audioTracks.map(function (mediaPlaylist) {\n      return new _types_level__WEBPACK_IMPORTED_MODULE_5__[\"Level\"](mediaPlaylist);\n    });\n  };\n\n  _proto.onAudioTrackSwitching = function onAudioTrackSwitching(event, data) {\n    // if any URL found on new audio track, it is an alternate audio track\n    var altAudio = !!data.url;\n    this.trackId = data.id;\n    var fragCurrent = this.fragCurrent;\n\n    if (fragCurrent !== null && fragCurrent !== void 0 && fragCurrent.loader) {\n      fragCurrent.loader.abort();\n    }\n\n    this.fragCurrent = null;\n    this.clearWaitingFragment(); // destroy useless transmuxer when switching audio to main\n\n    if (!altAudio) {\n      this.resetTransmuxer();\n    } else {\n      // switching to audio track, start timer if not already started\n      this.setInterval(TICK_INTERVAL);\n    } // should we switch tracks ?\n\n\n    if (altAudio) {\n      this.audioSwitch = true; // main audio track are handled by stream-controller, just do something if switching to alt audio track\n\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n    } else {\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].STOPPED;\n    }\n\n    this.tick();\n  };\n\n  _proto.onManifestLoading = function onManifestLoading() {\n    this.mainDetails = null;\n    this.fragmentTracker.removeAllFragments();\n    this.startPosition = this.lastCurrentTime = 0;\n    this.bufferFlushed = false;\n  };\n\n  _proto.onLevelLoaded = function onLevelLoaded(event, data) {\n    this.mainDetails = data.details;\n\n    if (this.cachedTrackLoadedData !== null) {\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].AUDIO_TRACK_LOADED, this.cachedTrackLoadedData);\n      this.cachedTrackLoadedData = null;\n    }\n  };\n\n  _proto.onAudioTrackLoaded = function onAudioTrackLoaded(event, data) {\n    var _track$details;\n\n    if (this.mainDetails == null) {\n      this.cachedTrackLoadedData = data;\n      return;\n    }\n\n    var levels = this.levels;\n    var newDetails = data.details,\n        trackId = data.id;\n\n    if (!levels) {\n      this.warn(\"Audio tracks were reset while loading level \" + trackId);\n      return;\n    }\n\n    this.log(\"Track \" + trackId + \" loaded [\" + newDetails.startSN + \",\" + newDetails.endSN + \"],duration:\" + newDetails.totalduration);\n    var track = levels[trackId];\n    var sliding = 0;\n\n    if (newDetails.live || (_track$details = track.details) !== null && _track$details !== void 0 && _track$details.live) {\n      var mainDetails = this.mainDetails;\n\n      if (!newDetails.fragments[0]) {\n        newDetails.deltaUpdateFailed = true;\n      }\n\n      if (newDetails.deltaUpdateFailed || !mainDetails) {\n        return;\n      }\n\n      if (!track.details && newDetails.hasProgramDateTime && mainDetails.hasProgramDateTime) {\n        // Make sure our audio rendition is aligned with the \"main\" rendition, using\n        // pdt as our reference times.\n        Object(_utils_discontinuities__WEBPACK_IMPORTED_MODULE_12__[\"alignMediaPlaylistByPDT\"])(newDetails, mainDetails);\n        sliding = newDetails.fragments[0].start;\n      } else {\n        sliding = this.alignPlaylists(newDetails, track.details);\n      }\n    }\n\n    track.details = newDetails;\n    this.levelLastLoaded = trackId; // compute start position if we are aligned with the main playlist\n\n    if (!this.startFragRequested && (this.mainDetails || !newDetails.live)) {\n      this.setStartPosition(track.details, sliding);\n    } // only switch back to IDLE state if we were waiting for track to start downloading a new fragment\n\n\n    if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_TRACK && !this.waitForCdnTuneIn(newDetails)) {\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n    } // trigger handler right now\n\n\n    this.tick();\n  };\n\n  _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(data) {\n    var _frag$initSegment;\n\n    var frag = data.frag,\n        part = data.part,\n        payload = data.payload;\n    var config = this.config,\n        trackId = this.trackId,\n        levels = this.levels;\n\n    if (!levels) {\n      this.warn(\"Audio tracks were reset while fragment load was in progress. Fragment \" + frag.sn + \" of level \" + frag.level + \" will not be buffered\");\n      return;\n    }\n\n    var track = levels[trackId];\n    console.assert(track, 'Audio track is defined on fragment load progress');\n    var details = track.details;\n    console.assert(details, 'Audio track details are defined on fragment load progress');\n    var audioCodec = config.defaultAudioCodec || track.audioCodec || 'mp4a.40.2';\n    var transmuxer = this.transmuxer;\n\n    if (!transmuxer) {\n      transmuxer = this.transmuxer = new _demux_transmuxer_interface__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this.hls, _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].AUDIO, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this));\n    } // Check if we have video initPTS\n    // If not we need to wait for it\n\n\n    var initPTS = this.initPTS[frag.cc];\n    var initSegmentData = (_frag$initSegment = frag.initSegment) === null || _frag$initSegment === void 0 ? void 0 : _frag$initSegment.data;\n\n    if (initPTS !== undefined) {\n      // this.log(`Transmuxing ${sn} of [${details.startSN} ,${details.endSN}],track ${trackId}`);\n      // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)\n      var accurateTimeOffset = false; // details.PTSKnown || !details.live;\n\n      var partIndex = part ? part.index : -1;\n      var partial = partIndex !== -1;\n      var chunkMeta = new _types_transmuxer__WEBPACK_IMPORTED_MODULE_10__[\"ChunkMetadata\"](frag.level, frag.sn, frag.stats.chunkCount, payload.byteLength, partIndex, partial);\n      transmuxer.push(payload, initSegmentData, audioCodec, '', frag, part, details.totalduration, accurateTimeOffset, chunkMeta, initPTS);\n    } else {\n      this.log(\"Unknown video PTS for cc \" + frag.cc + \", waiting for video PTS before demuxing audio frag \" + frag.sn + \" of [\" + details.startSN + \" ,\" + details.endSN + \"],track \" + trackId);\n\n      var _this$waitingData = this.waitingData = this.waitingData || {\n        frag: frag,\n        part: part,\n        cache: new _demux_chunk_cache__WEBPACK_IMPORTED_MODULE_8__[\"default\"](),\n        complete: false\n      },\n          cache = _this$waitingData.cache;\n\n      cache.push(new Uint8Array(payload));\n      this.waitingVideoCC = this.videoTrackCC;\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_INIT_PTS;\n    }\n  };\n\n  _proto._handleFragmentLoadComplete = function _handleFragmentLoadComplete(fragLoadedData) {\n    if (this.waitingData) {\n      this.waitingData.complete = true;\n      return;\n    }\n\n    _BaseStreamController.prototype._handleFragmentLoadComplete.call(this, fragLoadedData);\n  };\n\n  _proto.onBufferReset = function\n    /* event: Events.BUFFER_RESET */\n  onBufferReset() {\n    // reset reference to sourcebuffers\n    this.mediaBuffer = this.videoBuffer = null;\n    this.loadedmetadata = false;\n  };\n\n  _proto.onBufferCreated = function onBufferCreated(event, data) {\n    var audioTrack = data.tracks.audio;\n\n    if (audioTrack) {\n      this.mediaBuffer = audioTrack.buffer || null;\n    }\n\n    if (data.tracks.video) {\n      this.videoBuffer = data.tracks.video.buffer || null;\n    }\n  };\n\n  _proto.onFragBuffered = function onFragBuffered(event, data) {\n    var frag = data.frag,\n        part = data.part;\n\n    if (frag.type !== _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].AUDIO) {\n      return;\n    }\n\n    if (this.fragContextChanged(frag)) {\n      // If a level switch was requested while a fragment was buffering, it will emit the FRAG_BUFFERED event upon completion\n      // Avoid setting state back to IDLE or concluding the audio switch; otherwise, the switched-to track will not buffer\n      this.warn(\"Fragment \" + frag.sn + (part ? ' p: ' + part.index : '') + \" of level \" + frag.level + \" finished buffering, but was aborted. state: \" + this.state + \", audioSwitch: \" + this.audioSwitch);\n      return;\n    }\n\n    if (frag.sn !== 'initSegment') {\n      this.fragPrevious = frag;\n\n      if (this.audioSwitch) {\n        this.audioSwitch = false;\n        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].AUDIO_TRACK_SWITCHED, {\n          id: this.trackId\n        });\n      }\n    }\n\n    this.fragBufferedComplete(frag, part);\n  };\n\n  _proto.onError = function onError(event, data) {\n    switch (data.details) {\n      case _errors__WEBPACK_IMPORTED_MODULE_13__[\"ErrorDetails\"].FRAG_LOAD_ERROR:\n      case _errors__WEBPACK_IMPORTED_MODULE_13__[\"ErrorDetails\"].FRAG_LOAD_TIMEOUT:\n      case _errors__WEBPACK_IMPORTED_MODULE_13__[\"ErrorDetails\"].KEY_LOAD_ERROR:\n      case _errors__WEBPACK_IMPORTED_MODULE_13__[\"ErrorDetails\"].KEY_LOAD_TIMEOUT:\n        // TODO: Skip fragments that do not belong to this.fragCurrent audio-group id\n        this.onFragmentOrKeyLoadError(_types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].AUDIO, data);\n        break;\n\n      case _errors__WEBPACK_IMPORTED_MODULE_13__[\"ErrorDetails\"].AUDIO_TRACK_LOAD_ERROR:\n      case _errors__WEBPACK_IMPORTED_MODULE_13__[\"ErrorDetails\"].AUDIO_TRACK_LOAD_TIMEOUT:\n        //  when in ERROR state, don't switch back to IDLE state in case a non-fatal error is received\n        if (this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].ERROR && this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].STOPPED) {\n          // if fatal error, stop processing, otherwise move to IDLE to retry loading\n          this.state = data.fatal ? _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].ERROR : _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n          this.warn(data.details + \" while loading frag, switching to \" + this.state + \" state\");\n        }\n\n        break;\n\n      case _errors__WEBPACK_IMPORTED_MODULE_13__[\"ErrorDetails\"].BUFFER_FULL_ERROR:\n        // if in appending state\n        if (data.parent === 'audio' && (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].PARSING || this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].PARSED)) {\n          var flushBuffer = true;\n          var bufferedInfo = this.getFwdBufferInfo(this.mediaBuffer, _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].AUDIO); // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end\n          // reduce max buf len if current position is buffered\n\n          if (bufferedInfo && bufferedInfo.len > 0.5) {\n            flushBuffer = !this.reduceMaxBufferLength(bufferedInfo.len);\n          }\n\n          if (flushBuffer) {\n            // current position is not buffered, but browser is still complaining about buffer full error\n            // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708\n            // in that case flush the whole audio buffer to recover\n            this.warn('Buffer full error also media.currentTime is not buffered, flush audio buffer');\n            this.fragCurrent = null;\n\n            _BaseStreamController.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, 'audio');\n          }\n\n          this.resetLoadingState();\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  _proto.onBufferFlushed = function onBufferFlushed(event, _ref3) {\n    var type = _ref3.type;\n\n    if (type === _loader_fragment__WEBPACK_IMPORTED_MODULE_7__[\"ElementaryStreamTypes\"].AUDIO) {\n      this.bufferFlushed = true;\n    }\n  };\n\n  _proto._handleTransmuxComplete = function _handleTransmuxComplete(transmuxResult) {\n    var _id3$samples;\n\n    var id = 'audio';\n    var hls = this.hls;\n    var remuxResult = transmuxResult.remuxResult,\n        chunkMeta = transmuxResult.chunkMeta;\n    var context = this.getCurrentContext(chunkMeta);\n\n    if (!context) {\n      this.warn(\"The loading context changed while buffering fragment \" + chunkMeta.sn + \" of level \" + chunkMeta.level + \". This chunk will not be buffered.\");\n      this.resetStartWhenNotLoaded(chunkMeta.level);\n      return;\n    }\n\n    var frag = context.frag,\n        part = context.part,\n        details = context.level.details;\n    var audio = remuxResult.audio,\n        text = remuxResult.text,\n        id3 = remuxResult.id3,\n        initSegment = remuxResult.initSegment; // Check if the current fragment has been aborted. We check this by first seeing if we're still playing the current level.\n    // If we are, subsequently check if the currently loading fragment (fragCurrent) has changed.\n\n    if (this.fragContextChanged(frag) || !details) {\n      return;\n    }\n\n    this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].PARSING;\n\n    if (this.audioSwitch && audio) {\n      this.completeAudioSwitch();\n    }\n\n    if (initSegment !== null && initSegment !== void 0 && initSegment.tracks) {\n      this._bufferInitSegment(initSegment.tracks, frag, chunkMeta);\n\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].FRAG_PARSING_INIT_SEGMENT, {\n        frag: frag,\n        id: id,\n        tracks: initSegment.tracks\n      }); // Only flush audio from old audio tracks when PTS is known on new audio track\n    }\n\n    if (audio) {\n      var startPTS = audio.startPTS,\n          endPTS = audio.endPTS,\n          startDTS = audio.startDTS,\n          endDTS = audio.endDTS;\n\n      if (part) {\n        part.elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_7__[\"ElementaryStreamTypes\"].AUDIO] = {\n          startPTS: startPTS,\n          endPTS: endPTS,\n          startDTS: startDTS,\n          endDTS: endDTS\n        };\n      }\n\n      frag.setElementaryStreamInfo(_loader_fragment__WEBPACK_IMPORTED_MODULE_7__[\"ElementaryStreamTypes\"].AUDIO, startPTS, endPTS, startDTS, endDTS);\n      this.bufferFragmentData(audio, frag, part, chunkMeta);\n    }\n\n    if (id3 !== null && id3 !== void 0 && (_id3$samples = id3.samples) !== null && _id3$samples !== void 0 && _id3$samples.length) {\n      var emittedID3 = _extends({\n        id: id,\n        frag: frag,\n        details: details\n      }, id3);\n\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].FRAG_PARSING_METADATA, emittedID3);\n    }\n\n    if (text) {\n      var emittedText = _extends({\n        id: id,\n        frag: frag,\n        details: details\n      }, text);\n\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].FRAG_PARSING_USERDATA, emittedText);\n    }\n  };\n\n  _proto._bufferInitSegment = function _bufferInitSegment(tracks, frag, chunkMeta) {\n    if (this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].PARSING) {\n      return;\n    } // delete any video track found on audio transmuxer\n\n\n    if (tracks.video) {\n      delete tracks.video;\n    } // include levelCodec in audio and video tracks\n\n\n    var track = tracks.audio;\n\n    if (!track) {\n      return;\n    }\n\n    track.levelCodec = track.codec;\n    track.id = 'audio';\n    this.log(\"Init audio buffer, container:\" + track.container + \", codecs[parsed]=[\" + track.codec + \"]\");\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].BUFFER_CODECS, tracks);\n    var initSegment = track.initSegment;\n\n    if (initSegment !== null && initSegment !== void 0 && initSegment.byteLength) {\n      var segment = {\n        type: 'audio',\n        frag: frag,\n        part: null,\n        chunkMeta: chunkMeta,\n        parent: frag.type,\n        data: initSegment\n      };\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].BUFFER_APPENDING, segment);\n    } // trigger handler right now\n\n\n    this.tick();\n  };\n\n  _proto.loadFragment = function loadFragment(frag, trackDetails, targetBufferTime) {\n    // only load if fragment is not loaded or if in audio switch\n    var fragState = this.fragmentTracker.getState(frag);\n    this.fragCurrent = frag; // we force a frag loading in audio switch as fragment tracker might not have evicted previous frags in case of quick audio switch\n\n    if (this.audioSwitch || fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_4__[\"FragmentState\"].NOT_LOADED || fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_4__[\"FragmentState\"].PARTIAL) {\n      if (frag.sn === 'initSegment') {\n        this._loadInitSegment(frag);\n      } else if (trackDetails.live && !Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(this.initPTS[frag.cc])) {\n        this.log(\"Waiting for video PTS in continuity counter \" + frag.cc + \" of live stream before loading audio fragment \" + frag.sn + \" of level \" + this.trackId);\n        this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_INIT_PTS;\n      } else {\n        this.startFragRequested = true;\n\n        _BaseStreamController.prototype.loadFragment.call(this, frag, trackDetails, targetBufferTime);\n      }\n    }\n  };\n\n  _proto.completeAudioSwitch = function completeAudioSwitch() {\n    var hls = this.hls,\n        media = this.media,\n        trackId = this.trackId;\n\n    if (media) {\n      this.log('Switching audio track : flushing all audio');\n\n      _BaseStreamController.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, 'audio');\n    }\n\n    this.audioSwitch = false;\n    hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].AUDIO_TRACK_SWITCHED, {\n      id: trackId\n    });\n  };\n\n  return AudioStreamController;\n}(_base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AudioStreamController);\n\n/***/ }),\n\n/***/ \"./src/controller/audio-track-controller.ts\":\n/*!**************************************************!*\\\n  !*** ./src/controller/audio-track-controller.ts ***!\n  \\**************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_98328__) {\n\n\"use strict\";\n__nested_webpack_require_98328__.r(__webpack_exports__);\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_98328__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_98328__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _base_playlist_controller__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_98328__(/*! ./base-playlist-controller */ \"./src/controller/base-playlist-controller.ts\");\n/* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_98328__(/*! ../types/loader */ \"./src/types/loader.ts\");\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\nvar AudioTrackController = /*#__PURE__*/function (_BasePlaylistControll) {\n  _inheritsLoose(AudioTrackController, _BasePlaylistControll);\n\n  function AudioTrackController(hls) {\n    var _this;\n\n    _this = _BasePlaylistControll.call(this, hls, '[audio-track-controller]') || this;\n    _this.tracks = [];\n    _this.groupId = null;\n    _this.tracksInGroup = [];\n    _this.trackId = -1;\n    _this.trackName = '';\n    _this.selectDefaultTrack = true;\n\n    _this.registerListeners();\n\n    return _this;\n  }\n\n  var _proto = AudioTrackController.prototype;\n\n  _proto.registerListeners = function registerListeners() {\n    var hls = this.hls;\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].LEVEL_LOADING, this.onLevelLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].LEVEL_SWITCHING, this.onLevelSwitching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, this.onError, this);\n  };\n\n  _proto.unregisterListeners = function unregisterListeners() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].LEVEL_LOADING, this.onLevelLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].LEVEL_SWITCHING, this.onLevelSwitching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, this.onError, this);\n  };\n\n  _proto.destroy = function destroy() {\n    this.unregisterListeners();\n    this.tracks.length = 0;\n    this.tracksInGroup.length = 0;\n\n    _BasePlaylistControll.prototype.destroy.call(this);\n  };\n\n  _proto.onManifestLoading = function onManifestLoading() {\n    this.tracks = [];\n    this.groupId = null;\n    this.tracksInGroup = [];\n    this.trackId = -1;\n    this.trackName = '';\n    this.selectDefaultTrack = true;\n  };\n\n  _proto.onManifestParsed = function onManifestParsed(event, data) {\n    this.tracks = data.audioTracks || [];\n  };\n\n  _proto.onAudioTrackLoaded = function onAudioTrackLoaded(event, data) {\n    var id = data.id,\n        details = data.details;\n    var currentTrack = this.tracksInGroup[id];\n\n    if (!currentTrack) {\n      this.warn(\"Invalid audio track id \" + id);\n      return;\n    }\n\n    var curDetails = currentTrack.details;\n    currentTrack.details = data.details;\n    this.log(\"audioTrack \" + id + \" loaded [\" + details.startSN + \"-\" + details.endSN + \"]\");\n\n    if (id === this.trackId) {\n      this.retryCount = 0;\n      this.playlistLoaded(id, data, curDetails);\n    }\n  };\n\n  _proto.onLevelLoading = function onLevelLoading(event, data) {\n    this.switchLevel(data.level);\n  };\n\n  _proto.onLevelSwitching = function onLevelSwitching(event, data) {\n    this.switchLevel(data.level);\n  };\n\n  _proto.switchLevel = function switchLevel(levelIndex) {\n    var levelInfo = this.hls.levels[levelIndex];\n\n    if (!(levelInfo !== null && levelInfo !== void 0 && levelInfo.audioGroupIds)) {\n      return;\n    }\n\n    var audioGroupId = levelInfo.audioGroupIds[levelInfo.urlId];\n\n    if (this.groupId !== audioGroupId) {\n      this.groupId = audioGroupId;\n      var audioTracks = this.tracks.filter(function (track) {\n        return !audioGroupId || track.groupId === audioGroupId;\n      }); // Disable selectDefaultTrack if there are no default tracks\n\n      if (this.selectDefaultTrack && !audioTracks.some(function (track) {\n        return track.default;\n      })) {\n        this.selectDefaultTrack = false;\n      }\n\n      this.tracksInGroup = audioTracks;\n      var audioTracksUpdated = {\n        audioTracks: audioTracks\n      };\n      this.log(\"Updating audio tracks, \" + audioTracks.length + \" track(s) found in \\\"\" + audioGroupId + \"\\\" group-id\");\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].AUDIO_TRACKS_UPDATED, audioTracksUpdated);\n      this.selectInitialTrack();\n    }\n  };\n\n  _proto.onError = function onError(event, data) {\n    _BasePlaylistControll.prototype.onError.call(this, event, data);\n\n    if (data.fatal || !data.context) {\n      return;\n    }\n\n    if (data.context.type === _types_loader__WEBPACK_IMPORTED_MODULE_3__[\"PlaylistContextType\"].AUDIO_TRACK && data.context.id === this.trackId && data.context.groupId === this.groupId) {\n      this.retryLoadingOrFail(data);\n    }\n  };\n\n  _proto.setAudioTrack = function setAudioTrack(newId) {\n    var tracks = this.tracksInGroup; // check if level idx is valid\n\n    if (newId < 0 || newId >= tracks.length) {\n      this.warn('Invalid id passed to audio-track controller');\n      return;\n    } // stopping live reloading timer if any\n\n\n    this.clearTimer();\n    var lastTrack = tracks[this.trackId];\n    this.log(\"Now switching to audio-track index \" + newId);\n    var track = tracks[newId];\n    var id = track.id,\n        _track$groupId = track.groupId,\n        groupId = _track$groupId === void 0 ? '' : _track$groupId,\n        name = track.name,\n        type = track.type,\n        url = track.url;\n    this.trackId = newId;\n    this.trackName = name;\n    this.selectDefaultTrack = false;\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].AUDIO_TRACK_SWITCHING, {\n      id: id,\n      groupId: groupId,\n      name: name,\n      type: type,\n      url: url\n    }); // Do not reload track unless live\n\n    if (track.details && !track.details.live) {\n      return;\n    }\n\n    var hlsUrlParameters = this.switchParams(track.url, lastTrack === null || lastTrack === void 0 ? void 0 : lastTrack.details);\n    this.loadPlaylist(hlsUrlParameters);\n  };\n\n  _proto.selectInitialTrack = function selectInitialTrack() {\n    var audioTracks = this.tracksInGroup;\n    console.assert(audioTracks.length, 'Initial audio track should be selected when tracks are known');\n    var currentAudioTrackName = this.trackName;\n    var trackId = this.findTrackId(currentAudioTrackName) || this.findTrackId();\n\n    if (trackId !== -1) {\n      this.setAudioTrack(trackId);\n    } else {\n      this.warn(\"No track found for running audio group-ID: \" + this.groupId);\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].MEDIA_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].AUDIO_TRACK_LOAD_ERROR,\n        fatal: true\n      });\n    }\n  };\n\n  _proto.findTrackId = function findTrackId(name) {\n    var audioTracks = this.tracksInGroup;\n\n    for (var i = 0; i < audioTracks.length; i++) {\n      var track = audioTracks[i];\n\n      if (!this.selectDefaultTrack || track.default) {\n        if (!name || name === track.name) {\n          return track.id;\n        }\n      }\n    }\n\n    return -1;\n  };\n\n  _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {\n    var audioTrack = this.tracksInGroup[this.trackId];\n\n    if (this.shouldLoadTrack(audioTrack)) {\n      var id = audioTrack.id;\n      var groupId = audioTrack.groupId;\n      var url = audioTrack.url;\n\n      if (hlsUrlParameters) {\n        try {\n          url = hlsUrlParameters.addDirectives(url);\n        } catch (error) {\n          this.warn(\"Could not construct new URL with HLS Delivery Directives: \" + error);\n        }\n      } // track not retrieved yet, or live playlist we need to (re)load it\n\n\n      this.log(\"loading audio-track playlist for id: \" + id);\n      this.clearTimer();\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].AUDIO_TRACK_LOADING, {\n        url: url,\n        id: id,\n        groupId: groupId,\n        deliveryDirectives: hlsUrlParameters || null\n      });\n    }\n  };\n\n  _createClass(AudioTrackController, [{\n    key: \"audioTracks\",\n    get: function get() {\n      return this.tracksInGroup;\n    }\n  }, {\n    key: \"audioTrack\",\n    get: function get() {\n      return this.trackId;\n    },\n    set: function set(newId) {\n      // If audio track is selected from API then don't choose from the manifest default track\n      this.selectDefaultTrack = false;\n      this.setAudioTrack(newId);\n    }\n  }]);\n\n  return AudioTrackController;\n}(_base_playlist_controller__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AudioTrackController);\n\n/***/ }),\n\n/***/ \"./src/controller/base-playlist-controller.ts\":\n/*!****************************************************!*\\\n  !*** ./src/controller/base-playlist-controller.ts ***!\n  \\****************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_108989__) {\n\n\"use strict\";\n__nested_webpack_require_108989__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_108989__.d(__webpack_exports__, \"default\", function() { return BasePlaylistController; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_108989__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _types_level__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_108989__(/*! ../types/level */ \"./src/types/level.ts\");\n/* harmony import */ var _level_helper__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_108989__(/*! ./level-helper */ \"./src/controller/level-helper.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_108989__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_108989__(/*! ../errors */ \"./src/errors.ts\");\n\n\n\n\n\n\n\nvar BasePlaylistController = /*#__PURE__*/function () {\n  function BasePlaylistController(hls, logPrefix) {\n    this.hls = void 0;\n    this.timer = -1;\n    this.canLoad = false;\n    this.retryCount = 0;\n    this.log = void 0;\n    this.warn = void 0;\n    this.log = _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].log.bind(_utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"], logPrefix + \":\");\n    this.warn = _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn.bind(_utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"], logPrefix + \":\");\n    this.hls = hls;\n  }\n\n  var _proto = BasePlaylistController.prototype;\n\n  _proto.destroy = function destroy() {\n    this.clearTimer(); // @ts-ignore\n\n    this.hls = this.log = this.warn = null;\n  };\n\n  _proto.onError = function onError(event, data) {\n    if (data.fatal && data.type === _errors__WEBPACK_IMPORTED_MODULE_4__[\"ErrorTypes\"].NETWORK_ERROR) {\n      this.clearTimer();\n    }\n  };\n\n  _proto.clearTimer = function clearTimer() {\n    clearTimeout(this.timer);\n    this.timer = -1;\n  };\n\n  _proto.startLoad = function startLoad() {\n    this.canLoad = true;\n    this.retryCount = 0;\n    this.loadPlaylist();\n  };\n\n  _proto.stopLoad = function stopLoad() {\n    this.canLoad = false;\n    this.clearTimer();\n  };\n\n  _proto.switchParams = function switchParams(playlistUri, previous) {\n    var renditionReports = previous === null || previous === void 0 ? void 0 : previous.renditionReports;\n\n    if (renditionReports) {\n      for (var i = 0; i < renditionReports.length; i++) {\n        var attr = renditionReports[i];\n        var uri = '' + attr.URI;\n\n        if (uri === playlistUri.slice(-uri.length)) {\n          var msn = parseInt(attr['LAST-MSN']);\n          var part = parseInt(attr['LAST-PART']);\n\n          if (previous && this.hls.config.lowLatencyMode) {\n            var currentGoal = Math.min(previous.age - previous.partTarget, previous.targetduration);\n\n            if (part !== undefined && currentGoal > previous.partTarget) {\n              part += 1;\n            }\n          }\n\n          if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(msn)) {\n            return new _types_level__WEBPACK_IMPORTED_MODULE_1__[\"HlsUrlParameters\"](msn, Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(part) ? part : undefined, _types_level__WEBPACK_IMPORTED_MODULE_1__[\"HlsSkip\"].No);\n          }\n        }\n      }\n    }\n  };\n\n  _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {};\n\n  _proto.shouldLoadTrack = function shouldLoadTrack(track) {\n    return this.canLoad && track && !!track.url && (!track.details || track.details.live);\n  };\n\n  _proto.playlistLoaded = function playlistLoaded(index, data, previousDetails) {\n    var _this = this;\n\n    var details = data.details,\n        stats = data.stats; // Set last updated date-time\n\n    var elapsed = stats.loading.end ? Math.max(0, self.performance.now() - stats.loading.end) : 0;\n    details.advancedDateTime = Date.now() - elapsed; // if current playlist is a live playlist, arm a timer to reload it\n\n    if (details.live || previousDetails !== null && previousDetails !== void 0 && previousDetails.live) {\n      details.reloaded(previousDetails);\n\n      if (previousDetails) {\n        this.log(\"live playlist \" + index + \" \" + (details.advanced ? 'REFRESHED ' + details.lastPartSn + '-' + details.lastPartIndex : 'MISSED'));\n      } // Merge live playlists to adjust fragment starts and fill in delta playlist skipped segments\n\n\n      if (previousDetails && details.fragments.length > 0) {\n        Object(_level_helper__WEBPACK_IMPORTED_MODULE_2__[\"mergeDetails\"])(previousDetails, details);\n      }\n\n      if (!this.canLoad || !details.live) {\n        return;\n      }\n\n      var deliveryDirectives;\n      var msn = undefined;\n      var part = undefined;\n\n      if (details.canBlockReload && details.endSN && details.advanced) {\n        // Load level with LL-HLS delivery directives\n        var lowLatencyMode = this.hls.config.lowLatencyMode;\n        var lastPartSn = details.lastPartSn;\n        var endSn = details.endSN;\n        var lastPartIndex = details.lastPartIndex;\n        var hasParts = lastPartIndex !== -1;\n        var lastPart = lastPartSn === endSn; // When low latency mode is disabled, we'll skip part requests once the last part index is found\n\n        var nextSnStartIndex = lowLatencyMode ? 0 : lastPartIndex;\n\n        if (hasParts) {\n          msn = lastPart ? endSn + 1 : lastPartSn;\n          part = lastPart ? nextSnStartIndex : lastPartIndex + 1;\n        } else {\n          msn = endSn + 1;\n        } // Low-Latency CDN Tune-in: \"age\" header and time since load indicates we're behind by more than one part\n        // Update directives to obtain the Playlist that has the estimated additional duration of media\n\n\n        var lastAdvanced = details.age;\n        var cdnAge = lastAdvanced + details.ageHeader;\n        var currentGoal = Math.min(cdnAge - details.partTarget, details.targetduration * 1.5);\n\n        if (currentGoal > 0) {\n          if (previousDetails && currentGoal > previousDetails.tuneInGoal) {\n            // If we attempted to get the next or latest playlist update, but currentGoal increased,\n            // then we either can't catchup, or the \"age\" header cannot be trusted.\n            this.warn(\"CDN Tune-in goal increased from: \" + previousDetails.tuneInGoal + \" to: \" + currentGoal + \" with playlist age: \" + details.age);\n            currentGoal = 0;\n          } else {\n            var segments = Math.floor(currentGoal / details.targetduration);\n            msn += segments;\n\n            if (part !== undefined) {\n              var parts = Math.round(currentGoal % details.targetduration / details.partTarget);\n              part += parts;\n            }\n\n            this.log(\"CDN Tune-in age: \" + details.ageHeader + \"s last advanced \" + lastAdvanced.toFixed(2) + \"s goal: \" + currentGoal + \" skip sn \" + segments + \" to part \" + part);\n          }\n\n          details.tuneInGoal = currentGoal;\n        }\n\n        deliveryDirectives = this.getDeliveryDirectives(details, data.deliveryDirectives, msn, part);\n\n        if (lowLatencyMode || !lastPart) {\n          this.loadPlaylist(deliveryDirectives);\n          return;\n        }\n      } else {\n        deliveryDirectives = this.getDeliveryDirectives(details, data.deliveryDirectives, msn, part);\n      }\n\n      var reloadInterval = Object(_level_helper__WEBPACK_IMPORTED_MODULE_2__[\"computeReloadInterval\"])(details, stats);\n\n      if (msn !== undefined && details.canBlockReload) {\n        reloadInterval -= details.partTarget || 1;\n      }\n\n      this.log(\"reload live playlist \" + index + \" in \" + Math.round(reloadInterval) + \" ms\");\n      this.timer = self.setTimeout(function () {\n        return _this.loadPlaylist(deliveryDirectives);\n      }, reloadInterval);\n    } else {\n      this.clearTimer();\n    }\n  };\n\n  _proto.getDeliveryDirectives = function getDeliveryDirectives(details, previousDeliveryDirectives, msn, part) {\n    var skip = Object(_types_level__WEBPACK_IMPORTED_MODULE_1__[\"getSkipValue\"])(details, msn);\n\n    if (previousDeliveryDirectives !== null && previousDeliveryDirectives !== void 0 && previousDeliveryDirectives.skip && details.deltaUpdateFailed) {\n      msn = previousDeliveryDirectives.msn;\n      part = previousDeliveryDirectives.part;\n      skip = _types_level__WEBPACK_IMPORTED_MODULE_1__[\"HlsSkip\"].No;\n    }\n\n    return new _types_level__WEBPACK_IMPORTED_MODULE_1__[\"HlsUrlParameters\"](msn, part, skip);\n  };\n\n  _proto.retryLoadingOrFail = function retryLoadingOrFail(errorEvent) {\n    var _this2 = this;\n\n    var config = this.hls.config;\n    var retry = this.retryCount < config.levelLoadingMaxRetry;\n\n    if (retry) {\n      var _errorEvent$context;\n\n      this.retryCount++;\n\n      if (errorEvent.details.indexOf('LoadTimeOut') > -1 && (_errorEvent$context = errorEvent.context) !== null && _errorEvent$context !== void 0 && _errorEvent$context.deliveryDirectives) {\n        // The LL-HLS request already timed out so retry immediately\n        this.warn(\"retry playlist loading #\" + this.retryCount + \" after \\\"\" + errorEvent.details + \"\\\"\");\n        this.loadPlaylist();\n      } else {\n        // exponential backoff capped to max retry timeout\n        var delay = Math.min(Math.pow(2, this.retryCount) * config.levelLoadingRetryDelay, config.levelLoadingMaxRetryTimeout); // Schedule level/track reload\n\n        this.timer = self.setTimeout(function () {\n          return _this2.loadPlaylist();\n        }, delay);\n        this.warn(\"retry playlist loading #\" + this.retryCount + \" in \" + delay + \" ms after \\\"\" + errorEvent.details + \"\\\"\");\n      }\n    } else {\n      this.warn(\"cannot recover from error \\\"\" + errorEvent.details + \"\\\"\"); // stopping live reloading timer if any\n\n      this.clearTimer(); // switch error to fatal\n\n      errorEvent.fatal = true;\n    }\n\n    return retry;\n  };\n\n  return BasePlaylistController;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/controller/base-stream-controller.ts\":\n/*!**************************************************!*\\\n  !*** ./src/controller/base-stream-controller.ts ***!\n  \\**************************************************/\n/*! exports provided: State, default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_119268__) {\n\n\"use strict\";\n__nested_webpack_require_119268__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_119268__.d(__webpack_exports__, \"State\", function() { return State; });\n/* harmony export (binding) */ __nested_webpack_require_119268__.d(__webpack_exports__, \"default\", function() { return BaseStreamController; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_119268__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _task_loop__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_119268__(/*! ../task-loop */ \"./src/task-loop.ts\");\n/* harmony import */ var _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_119268__(/*! ./fragment-tracker */ \"./src/controller/fragment-tracker.ts\");\n/* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_119268__(/*! ../utils/buffer-helper */ \"./src/utils/buffer-helper.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_119268__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_119268__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_119268__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _types_transmuxer__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_119268__(/*! ../types/transmuxer */ \"./src/types/transmuxer.ts\");\n/* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_119268__(/*! ../utils/mp4-tools */ \"./src/utils/mp4-tools.ts\");\n/* harmony import */ var _utils_discontinuities__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_119268__(/*! ../utils/discontinuities */ \"./src/utils/discontinuities.ts\");\n/* harmony import */ var _fragment_finders__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_119268__(/*! ./fragment-finders */ \"./src/controller/fragment-finders.ts\");\n/* harmony import */ var _level_helper__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_119268__(/*! ./level-helper */ \"./src/controller/level-helper.ts\");\n/* harmony import */ var _loader_fragment_loader__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_119268__(/*! ../loader/fragment-loader */ \"./src/loader/fragment-loader.ts\");\n/* harmony import */ var _crypt_decrypter__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_119268__(/*! ../crypt/decrypter */ \"./src/crypt/decrypter.ts\");\n/* harmony import */ var _utils_time_ranges__WEBPACK_IMPORTED_MODULE_14__ = __nested_webpack_require_119268__(/*! ../utils/time-ranges */ \"./src/utils/time-ranges.ts\");\n/* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_15__ = __nested_webpack_require_119268__(/*! ../types/loader */ \"./src/types/loader.ts\");\n\n\n\n\n\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar State = {\n  STOPPED: 'STOPPED',\n  IDLE: 'IDLE',\n  KEY_LOADING: 'KEY_LOADING',\n  FRAG_LOADING: 'FRAG_LOADING',\n  FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',\n  WAITING_TRACK: 'WAITING_TRACK',\n  PARSING: 'PARSING',\n  PARSED: 'PARSED',\n  ENDED: 'ENDED',\n  ERROR: 'ERROR',\n  WAITING_INIT_PTS: 'WAITING_INIT_PTS',\n  WAITING_LEVEL: 'WAITING_LEVEL'\n};\n\nvar BaseStreamController = /*#__PURE__*/function (_TaskLoop) {\n  _inheritsLoose(BaseStreamController, _TaskLoop);\n\n  function BaseStreamController(hls, fragmentTracker, logPrefix) {\n    var _this;\n\n    _this = _TaskLoop.call(this) || this;\n    _this.hls = void 0;\n    _this.fragPrevious = null;\n    _this.fragCurrent = null;\n    _this.fragmentTracker = void 0;\n    _this.transmuxer = null;\n    _this._state = State.STOPPED;\n    _this.media = null;\n    _this.mediaBuffer = null;\n    _this.config = void 0;\n    _this.bitrateTest = false;\n    _this.lastCurrentTime = 0;\n    _this.nextLoadPosition = 0;\n    _this.startPosition = 0;\n    _this.loadedmetadata = false;\n    _this.fragLoadError = 0;\n    _this.retryDate = 0;\n    _this.levels = null;\n    _this.fragmentLoader = void 0;\n    _this.levelLastLoaded = null;\n    _this.startFragRequested = false;\n    _this.decrypter = void 0;\n    _this.initPTS = [];\n    _this.onvseeking = null;\n    _this.onvended = null;\n    _this.logPrefix = '';\n    _this.log = void 0;\n    _this.warn = void 0;\n    _this.logPrefix = logPrefix;\n    _this.log = _utils_logger__WEBPACK_IMPORTED_MODULE_4__[\"logger\"].log.bind(_utils_logger__WEBPACK_IMPORTED_MODULE_4__[\"logger\"], logPrefix + \":\");\n    _this.warn = _utils_logger__WEBPACK_IMPORTED_MODULE_4__[\"logger\"].warn.bind(_utils_logger__WEBPACK_IMPORTED_MODULE_4__[\"logger\"], logPrefix + \":\");\n    _this.hls = hls;\n    _this.fragmentLoader = new _loader_fragment_loader__WEBPACK_IMPORTED_MODULE_12__[\"default\"](hls.config);\n    _this.fragmentTracker = fragmentTracker;\n    _this.config = hls.config;\n    _this.decrypter = new _crypt_decrypter__WEBPACK_IMPORTED_MODULE_13__[\"default\"](hls, hls.config);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].KEY_LOADED, _this.onKeyLoaded, _assertThisInitialized(_this));\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].LEVEL_SWITCHING, _this.onLevelSwitching, _assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = BaseStreamController.prototype;\n\n  _proto.doTick = function doTick() {\n    this.onTickEnd();\n  };\n\n  _proto.onTickEnd = function onTickEnd() {} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ;\n\n  _proto.startLoad = function startLoad(startPosition) {};\n\n  _proto.stopLoad = function stopLoad() {\n    this.fragmentLoader.abort();\n    var frag = this.fragCurrent;\n\n    if (frag) {\n      this.fragmentTracker.removeFragment(frag);\n    }\n\n    this.resetTransmuxer();\n    this.fragCurrent = null;\n    this.fragPrevious = null;\n    this.clearInterval();\n    this.clearNextTick();\n    this.state = State.STOPPED;\n  };\n\n  _proto._streamEnded = function _streamEnded(bufferInfo, levelDetails) {\n    var fragCurrent = this.fragCurrent,\n        fragmentTracker = this.fragmentTracker; // we just got done loading the final fragment and there is no other buffered range after ...\n    // rationale is that in case there are any buffered ranges after, it means that there are unbuffered portion in between\n    // so we should not switch to ENDED in that case, to be able to buffer them\n\n    if (!levelDetails.live && fragCurrent && this.media && // NOTE: Because of the way parts are currently parsed/represented in the playlist, we can end up\n    // in situations where the current fragment is actually greater than levelDetails.endSN. While\n    // this feels like the \"wrong place\" to account for that, this is a narrower/safer change than\n    // updating e.g. M3U8Parser::parseLevelPlaylist().\n    fragCurrent.sn >= levelDetails.endSN && !bufferInfo.nextStart) {\n      var partList = levelDetails.partList; // Since the last part isn't guaranteed to correspond to fragCurrent for ll-hls, check instead if the last part is buffered.\n\n      if (partList !== null && partList !== void 0 && partList.length) {\n        var lastPart = partList[partList.length - 1]; // Checking the midpoint of the part for potential margin of error and related issues.\n        // NOTE: Technically I believe parts could yield content that is < the computed duration (including potential a duration of 0)\n        // and still be spec-compliant, so there may still be edge cases here. Likewise, there could be issues in end of stream\n        // part mismatches for independent audio and video playlists/segments.\n\n        var lastPartBuffered = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__[\"BufferHelper\"].isBuffered(this.media, lastPart.start + lastPart.duration / 2);\n        return lastPartBuffered;\n      }\n\n      var fragState = fragmentTracker.getState(fragCurrent);\n      return fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__[\"FragmentState\"].PARTIAL || fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__[\"FragmentState\"].OK;\n    }\n\n    return false;\n  };\n\n  _proto.onMediaAttached = function onMediaAttached(event, data) {\n    var media = this.media = this.mediaBuffer = data.media;\n    this.onvseeking = this.onMediaSeeking.bind(this);\n    this.onvended = this.onMediaEnded.bind(this);\n    media.addEventListener('seeking', this.onvseeking);\n    media.addEventListener('ended', this.onvended);\n    var config = this.config;\n\n    if (this.levels && config.autoStartLoad && this.state === State.STOPPED) {\n      this.startLoad(config.startPosition);\n    }\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    var media = this.media;\n\n    if (media !== null && media !== void 0 && media.ended) {\n      this.log('MSE detaching and video ended, reset startPosition');\n      this.startPosition = this.lastCurrentTime = 0;\n    } // remove video listeners\n\n\n    if (media && this.onvseeking && this.onvended) {\n      media.removeEventListener('seeking', this.onvseeking);\n      media.removeEventListener('ended', this.onvended);\n      this.onvseeking = this.onvended = null;\n    }\n\n    this.media = this.mediaBuffer = null;\n    this.loadedmetadata = false;\n    this.fragmentTracker.removeAllFragments();\n    this.stopLoad();\n  };\n\n  _proto.onMediaSeeking = function onMediaSeeking() {\n    var config = this.config,\n        fragCurrent = this.fragCurrent,\n        media = this.media,\n        mediaBuffer = this.mediaBuffer,\n        state = this.state;\n    var currentTime = media ? media.currentTime : 0;\n    var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__[\"BufferHelper\"].bufferInfo(mediaBuffer ? mediaBuffer : media, currentTime, config.maxBufferHole);\n    this.log(\"media seeking to \" + (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(currentTime) ? currentTime.toFixed(3) : currentTime) + \", state: \" + state);\n\n    if (state === State.ENDED) {\n      this.resetLoadingState();\n    } else if (fragCurrent && !bufferInfo.len) {\n      // check if we are seeking to a unbuffered area AND if frag loading is in progress\n      var tolerance = config.maxFragLookUpTolerance;\n      var fragStartOffset = fragCurrent.start - tolerance;\n      var fragEndOffset = fragCurrent.start + fragCurrent.duration + tolerance;\n      var pastFragment = currentTime > fragEndOffset; // check if the seek position is past current fragment, and if so abort loading\n\n      if (currentTime < fragStartOffset || pastFragment) {\n        if (pastFragment && fragCurrent.loader) {\n          this.log('seeking outside of buffer while fragment load in progress, cancel fragment load');\n          fragCurrent.loader.abort();\n        }\n\n        this.resetLoadingState();\n      }\n    }\n\n    if (media) {\n      this.lastCurrentTime = currentTime;\n    } // in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target\n\n\n    if (!this.loadedmetadata && !bufferInfo.len) {\n      this.nextLoadPosition = this.startPosition = currentTime;\n    } // Async tick to speed up processing\n\n\n    this.tickImmediate();\n  };\n\n  _proto.onMediaEnded = function onMediaEnded() {\n    // reset startPosition and lastCurrentTime to restart playback @ stream beginning\n    this.startPosition = this.lastCurrentTime = 0;\n  };\n\n  _proto.onKeyLoaded = function onKeyLoaded(event, data) {\n    if (this.state !== State.KEY_LOADING || data.frag !== this.fragCurrent || !this.levels) {\n      return;\n    }\n\n    this.state = State.IDLE;\n    var levelDetails = this.levels[data.frag.level].details;\n\n    if (levelDetails) {\n      this.loadFragment(data.frag, levelDetails, data.frag.start);\n    }\n  };\n\n  _proto.onLevelSwitching = function onLevelSwitching(event, data) {\n    this.fragLoadError = 0;\n  };\n\n  _proto.onHandlerDestroying = function onHandlerDestroying() {\n    this.stopLoad();\n\n    _TaskLoop.prototype.onHandlerDestroying.call(this);\n  };\n\n  _proto.onHandlerDestroyed = function onHandlerDestroyed() {\n    this.state = State.STOPPED;\n    this.hls.off(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].KEY_LOADED, this.onKeyLoaded, this);\n    this.hls.off(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].LEVEL_SWITCHING, this.onLevelSwitching, this);\n\n    if (this.fragmentLoader) {\n      this.fragmentLoader.destroy();\n    }\n\n    if (this.decrypter) {\n      this.decrypter.destroy();\n    }\n\n    this.hls = this.log = this.warn = this.decrypter = this.fragmentLoader = this.fragmentTracker = null;\n\n    _TaskLoop.prototype.onHandlerDestroyed.call(this);\n  };\n\n  _proto.loadKey = function loadKey(frag, details) {\n    this.log(\"Loading key for \" + frag.sn + \" of [\" + details.startSN + \"-\" + details.endSN + \"], \" + (this.logPrefix === '[stream-controller]' ? 'level' : 'track') + \" \" + frag.level);\n    this.state = State.KEY_LOADING;\n    this.fragCurrent = frag;\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].KEY_LOADING, {\n      frag: frag\n    });\n  };\n\n  _proto.loadFragment = function loadFragment(frag, levelDetails, targetBufferTime) {\n    this._loadFragForPlayback(frag, levelDetails, targetBufferTime);\n  };\n\n  _proto._loadFragForPlayback = function _loadFragForPlayback(frag, levelDetails, targetBufferTime) {\n    var _this2 = this;\n\n    var progressCallback = function progressCallback(data) {\n      if (_this2.fragContextChanged(frag)) {\n        _this2.warn(\"Fragment \" + frag.sn + (data.part ? ' p: ' + data.part.index : '') + \" of level \" + frag.level + \" was dropped during download.\");\n\n        _this2.fragmentTracker.removeFragment(frag);\n\n        return;\n      }\n\n      frag.stats.chunkCount++;\n\n      _this2._handleFragmentLoadProgress(data);\n    };\n\n    this._doFragLoad(frag, levelDetails, targetBufferTime, progressCallback).then(function (data) {\n      if (!data) {\n        // if we're here we probably needed to backtrack or are waiting for more parts\n        return;\n      }\n\n      _this2.fragLoadError = 0;\n      var state = _this2.state;\n\n      if (_this2.fragContextChanged(frag)) {\n        if (state === State.FRAG_LOADING || !_this2.fragCurrent && state === State.PARSING) {\n          _this2.fragmentTracker.removeFragment(frag);\n\n          _this2.state = State.IDLE;\n        }\n\n        return;\n      }\n\n      if ('payload' in data) {\n        _this2.log(\"Loaded fragment \" + frag.sn + \" of level \" + frag.level);\n\n        _this2.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].FRAG_LOADED, data);\n      } // Pass through the whole payload; controllers not implementing progressive loading receive data from this callback\n\n\n      _this2._handleFragmentLoadComplete(data);\n    }).catch(function (reason) {\n      if (_this2.state === State.STOPPED || _this2.state === State.ERROR) {\n        return;\n      }\n\n      _this2.warn(reason);\n\n      _this2.resetFragmentLoading(frag);\n    });\n  };\n\n  _proto.flushMainBuffer = function flushMainBuffer(startOffset, endOffset, type) {\n    if (type === void 0) {\n      type = null;\n    }\n\n    if (!(startOffset - endOffset)) {\n      return;\n    } // When alternate audio is playing, the audio-stream-controller is responsible for the audio buffer. Otherwise,\n    // passing a null type flushes both buffers\n\n\n    var flushScope = {\n      startOffset: startOffset,\n      endOffset: endOffset,\n      type: type\n    }; // Reset load errors on flush\n\n    this.fragLoadError = 0;\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].BUFFER_FLUSHING, flushScope);\n  };\n\n  _proto._loadInitSegment = function _loadInitSegment(frag) {\n    var _this3 = this;\n\n    this._doFragLoad(frag).then(function (data) {\n      if (!data || _this3.fragContextChanged(frag) || !_this3.levels) {\n        throw new Error('init load aborted');\n      }\n\n      return data;\n    }).then(function (data) {\n      var hls = _this3.hls;\n      var payload = data.payload;\n      var decryptData = frag.decryptdata; // check to see if the payload needs to be decrypted\n\n      if (payload && payload.byteLength > 0 && decryptData && decryptData.key && decryptData.iv && decryptData.method === 'AES-128') {\n        var startTime = self.performance.now(); // decrypt the subtitles\n\n        return _this3.decrypter.webCryptoDecrypt(new Uint8Array(payload), decryptData.key.buffer, decryptData.iv.buffer).then(function (decryptedData) {\n          var endTime = self.performance.now();\n          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].FRAG_DECRYPTED, {\n            frag: frag,\n            payload: decryptedData,\n            stats: {\n              tstart: startTime,\n              tdecrypt: endTime\n            }\n          });\n          data.payload = decryptedData;\n          return data;\n        });\n      }\n\n      return data;\n    }).then(function (data) {\n      var fragCurrent = _this3.fragCurrent,\n          hls = _this3.hls,\n          levels = _this3.levels;\n\n      if (!levels) {\n        throw new Error('init load aborted, missing levels');\n      }\n\n      var details = levels[frag.level].details;\n      console.assert(details, 'Level details are defined when init segment is loaded');\n      var stats = frag.stats;\n      _this3.state = State.IDLE;\n      _this3.fragLoadError = 0;\n      frag.data = new Uint8Array(data.payload);\n      stats.parsing.start = stats.buffering.start = self.performance.now();\n      stats.parsing.end = stats.buffering.end = self.performance.now(); // Silence FRAG_BUFFERED event if fragCurrent is null\n\n      if (data.frag === fragCurrent) {\n        hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].FRAG_BUFFERED, {\n          stats: stats,\n          frag: fragCurrent,\n          part: null,\n          id: frag.type\n        });\n      }\n\n      _this3.tick();\n    }).catch(function (reason) {\n      if (_this3.state === State.STOPPED || _this3.state === State.ERROR) {\n        return;\n      }\n\n      _this3.warn(reason);\n\n      _this3.resetFragmentLoading(frag);\n    });\n  };\n\n  _proto.fragContextChanged = function fragContextChanged(frag) {\n    var fragCurrent = this.fragCurrent;\n    return !frag || !fragCurrent || frag.level !== fragCurrent.level || frag.sn !== fragCurrent.sn || frag.urlId !== fragCurrent.urlId;\n  };\n\n  _proto.fragBufferedComplete = function fragBufferedComplete(frag, part) {\n    var media = this.mediaBuffer ? this.mediaBuffer : this.media;\n    this.log(\"Buffered \" + frag.type + \" sn: \" + frag.sn + (part ? ' part: ' + part.index : '') + \" of \" + (this.logPrefix === '[stream-controller]' ? 'level' : 'track') + \" \" + frag.level + \" \" + (media ? _utils_time_ranges__WEBPACK_IMPORTED_MODULE_14__[\"default\"].toString(_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__[\"BufferHelper\"].getBuffered(media)) : '(detached)'));\n    this.state = State.IDLE;\n\n    if (!media) {\n      return;\n    }\n\n    if (!this.loadedmetadata && media.buffered.length && this.fragCurrent === this.fragPrevious) {\n      this.loadedmetadata = true;\n      this.seekToStartPos();\n    }\n\n    this.tick();\n  };\n\n  _proto.seekToStartPos = function seekToStartPos() {};\n\n  _proto._handleFragmentLoadComplete = function _handleFragmentLoadComplete(fragLoadedEndData) {\n    var transmuxer = this.transmuxer;\n\n    if (!transmuxer) {\n      return;\n    }\n\n    var frag = fragLoadedEndData.frag,\n        part = fragLoadedEndData.part,\n        partsLoaded = fragLoadedEndData.partsLoaded; // If we did not load parts, or loaded all parts, we have complete (not partial) fragment data\n\n    var complete = !partsLoaded || partsLoaded.length === 0 || partsLoaded.some(function (fragLoaded) {\n      return !fragLoaded;\n    });\n    var chunkMeta = new _types_transmuxer__WEBPACK_IMPORTED_MODULE_7__[\"ChunkMetadata\"](frag.level, frag.sn, frag.stats.chunkCount + 1, 0, part ? part.index : -1, !complete);\n    transmuxer.flush(chunkMeta);\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ;\n\n  _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(frag) {};\n\n  _proto._doFragLoad = function _doFragLoad(frag, details, targetBufferTime, progressCallback) {\n    var _this4 = this;\n\n    if (targetBufferTime === void 0) {\n      targetBufferTime = null;\n    }\n\n    if (!this.levels) {\n      throw new Error('frag load aborted, missing levels');\n    }\n\n    targetBufferTime = Math.max(frag.start, targetBufferTime || 0);\n\n    if (this.config.lowLatencyMode && details) {\n      var partList = details.partList;\n\n      if (partList && progressCallback) {\n        if (targetBufferTime > frag.end && details.fragmentHint) {\n          frag = details.fragmentHint;\n        }\n\n        var partIndex = this.getNextPart(partList, frag, targetBufferTime);\n\n        if (partIndex > -1) {\n          var part = partList[partIndex];\n          this.log(\"Loading part sn: \" + frag.sn + \" p: \" + part.index + \" cc: \" + frag.cc + \" of playlist [\" + details.startSN + \"-\" + details.endSN + \"] parts [0-\" + partIndex + \"-\" + (partList.length - 1) + \"] \" + (this.logPrefix === '[stream-controller]' ? 'level' : 'track') + \": \" + frag.level + \", target: \" + parseFloat(targetBufferTime.toFixed(3)));\n          this.nextLoadPosition = part.start + part.duration;\n          this.state = State.FRAG_LOADING;\n          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].FRAG_LOADING, {\n            frag: frag,\n            part: partList[partIndex],\n            targetBufferTime: targetBufferTime\n          });\n          return this.doFragPartsLoad(frag, partList, partIndex, progressCallback).catch(function (error) {\n            return _this4.handleFragLoadError(error);\n          });\n        } else if (!frag.url || this.loadedEndOfParts(partList, targetBufferTime)) {\n          // Fragment hint has no parts\n          return Promise.resolve(null);\n        }\n      }\n    }\n\n    this.log(\"Loading fragment \" + frag.sn + \" cc: \" + frag.cc + \" \" + (details ? 'of [' + details.startSN + '-' + details.endSN + '] ' : '') + (this.logPrefix === '[stream-controller]' ? 'level' : 'track') + \": \" + frag.level + \", target: \" + parseFloat(targetBufferTime.toFixed(3))); // Don't update nextLoadPosition for fragments which are not buffered\n\n    if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(frag.sn) && !this.bitrateTest) {\n      this.nextLoadPosition = frag.start + frag.duration;\n    }\n\n    this.state = State.FRAG_LOADING;\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].FRAG_LOADING, {\n      frag: frag,\n      targetBufferTime: targetBufferTime\n    });\n    return this.fragmentLoader.load(frag, progressCallback).catch(function (error) {\n      return _this4.handleFragLoadError(error);\n    });\n  };\n\n  _proto.doFragPartsLoad = function doFragPartsLoad(frag, partList, partIndex, progressCallback) {\n    var _this5 = this;\n\n    return new Promise(function (resolve, reject) {\n      var partsLoaded = [];\n\n      var loadPartIndex = function loadPartIndex(index) {\n        var part = partList[index];\n\n        _this5.fragmentLoader.loadPart(frag, part, progressCallback).then(function (partLoadedData) {\n          partsLoaded[part.index] = partLoadedData;\n          var loadedPart = partLoadedData.part;\n\n          _this5.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].FRAG_LOADED, partLoadedData);\n\n          var nextPart = partList[index + 1];\n\n          if (nextPart && nextPart.fragment === frag) {\n            loadPartIndex(index + 1);\n          } else {\n            return resolve({\n              frag: frag,\n              part: loadedPart,\n              partsLoaded: partsLoaded\n            });\n          }\n        }).catch(reject);\n      };\n\n      loadPartIndex(partIndex);\n    });\n  };\n\n  _proto.handleFragLoadError = function handleFragLoadError(_ref) {\n    var data = _ref.data;\n\n    if (data && data.details === _errors__WEBPACK_IMPORTED_MODULE_6__[\"ErrorDetails\"].INTERNAL_ABORTED) {\n      this.handleFragLoadAborted(data.frag, data.part);\n    } else {\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].ERROR, data);\n    }\n\n    return null;\n  };\n\n  _proto._handleTransmuxerFlush = function _handleTransmuxerFlush(chunkMeta) {\n    var context = this.getCurrentContext(chunkMeta);\n\n    if (!context || this.state !== State.PARSING) {\n      if (!this.fragCurrent) {\n        this.state = State.IDLE;\n      }\n\n      return;\n    }\n\n    var frag = context.frag,\n        part = context.part,\n        level = context.level;\n    var now = self.performance.now();\n    frag.stats.parsing.end = now;\n\n    if (part) {\n      part.stats.parsing.end = now;\n    }\n\n    this.updateLevelTiming(frag, part, level, chunkMeta.partial);\n  };\n\n  _proto.getCurrentContext = function getCurrentContext(chunkMeta) {\n    var levels = this.levels;\n    var levelIndex = chunkMeta.level,\n        sn = chunkMeta.sn,\n        partIndex = chunkMeta.part;\n\n    if (!levels || !levels[levelIndex]) {\n      this.warn(\"Levels object was unset while buffering fragment \" + sn + \" of level \" + levelIndex + \". The current chunk will not be buffered.\");\n      return null;\n    }\n\n    var level = levels[levelIndex];\n    var part = partIndex > -1 ? Object(_level_helper__WEBPACK_IMPORTED_MODULE_11__[\"getPartWith\"])(level, sn, partIndex) : null;\n    var frag = part ? part.fragment : Object(_level_helper__WEBPACK_IMPORTED_MODULE_11__[\"getFragmentWithSN\"])(level, sn, this.fragCurrent);\n\n    if (!frag) {\n      return null;\n    }\n\n    return {\n      frag: frag,\n      part: part,\n      level: level\n    };\n  };\n\n  _proto.bufferFragmentData = function bufferFragmentData(data, frag, part, chunkMeta) {\n    if (!data || this.state !== State.PARSING) {\n      return;\n    }\n\n    var data1 = data.data1,\n        data2 = data.data2;\n    var buffer = data1;\n\n    if (data1 && data2) {\n      // Combine the moof + mdat so that we buffer with a single append\n      buffer = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_8__[\"appendUint8Array\"])(data1, data2);\n    }\n\n    if (!buffer || !buffer.length) {\n      return;\n    }\n\n    var segment = {\n      type: data.type,\n      frag: frag,\n      part: part,\n      chunkMeta: chunkMeta,\n      parent: frag.type,\n      data: buffer\n    };\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].BUFFER_APPENDING, segment);\n\n    if (data.dropped && data.independent && !part) {\n      // Clear buffer so that we reload previous segments sequentially if required\n      this.flushBufferGap(frag);\n    }\n  };\n\n  _proto.flushBufferGap = function flushBufferGap(frag) {\n    var media = this.media;\n\n    if (!media) {\n      return;\n    } // If currentTime is not buffered, clear the back buffer so that we can backtrack as much as needed\n\n\n    if (!_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__[\"BufferHelper\"].isBuffered(media, media.currentTime)) {\n      this.flushMainBuffer(0, frag.start);\n      return;\n    } // Remove back-buffer without interrupting playback to allow back tracking\n\n\n    var currentTime = media.currentTime;\n    var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__[\"BufferHelper\"].bufferInfo(media, currentTime, 0);\n    var fragDuration = frag.duration;\n    var segmentFraction = Math.min(this.config.maxFragLookUpTolerance * 2, fragDuration * 0.25);\n    var start = Math.max(Math.min(frag.start - segmentFraction, bufferInfo.end - segmentFraction), currentTime + segmentFraction);\n\n    if (frag.start - start > segmentFraction) {\n      this.flushMainBuffer(start, frag.start);\n    }\n  };\n\n  _proto.getFwdBufferInfo = function getFwdBufferInfo(bufferable, type) {\n    var config = this.config;\n    var pos = this.getLoadPosition();\n\n    if (!Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(pos)) {\n      return null;\n    }\n\n    var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__[\"BufferHelper\"].bufferInfo(bufferable, pos, config.maxBufferHole); // Workaround flaw in getting forward buffer when maxBufferHole is smaller than gap at current pos\n\n    if (bufferInfo.len === 0 && bufferInfo.nextStart !== undefined) {\n      var bufferedFragAtPos = this.fragmentTracker.getBufferedFrag(pos, type);\n\n      if (bufferedFragAtPos && bufferInfo.nextStart < bufferedFragAtPos.end) {\n        return _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__[\"BufferHelper\"].bufferInfo(bufferable, pos, Math.max(bufferInfo.nextStart, config.maxBufferHole));\n      }\n    }\n\n    return bufferInfo;\n  };\n\n  _proto.getMaxBufferLength = function getMaxBufferLength(levelBitrate) {\n    var config = this.config;\n    var maxBufLen;\n\n    if (levelBitrate) {\n      maxBufLen = Math.max(8 * config.maxBufferSize / levelBitrate, config.maxBufferLength);\n    } else {\n      maxBufLen = config.maxBufferLength;\n    }\n\n    return Math.min(maxBufLen, config.maxMaxBufferLength);\n  };\n\n  _proto.reduceMaxBufferLength = function reduceMaxBufferLength(threshold) {\n    var config = this.config;\n    var minLength = threshold || config.maxBufferLength;\n\n    if (config.maxMaxBufferLength >= minLength) {\n      // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...\n      config.maxMaxBufferLength /= 2;\n      this.warn(\"Reduce max buffer length to \" + config.maxMaxBufferLength + \"s\");\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.getNextFragment = function getNextFragment(pos, levelDetails) {\n    var fragments = levelDetails.fragments;\n    var fragLen = fragments.length;\n\n    if (!fragLen) {\n      return null;\n    } // find fragment index, contiguous with end of buffer position\n\n\n    var config = this.config;\n    var start = fragments[0].start;\n    var frag;\n\n    if (levelDetails.live) {\n      var initialLiveManifestSize = config.initialLiveManifestSize;\n\n      if (fragLen < initialLiveManifestSize) {\n        this.warn(\"Not enough fragments to start playback (have: \" + fragLen + \", need: \" + initialLiveManifestSize + \")\");\n        return null;\n      } // The real fragment start times for a live stream are only known after the PTS range for that level is known.\n      // In order to discover the range, we load the best matching fragment for that level and demux it.\n      // Do not load using live logic if the starting frag is requested - we want to use getFragmentAtPosition() so that\n      // we get the fragment matching that start time\n\n\n      if (!levelDetails.PTSKnown && !this.startFragRequested && this.startPosition === -1) {\n        frag = this.getInitialLiveFragment(levelDetails, fragments);\n        this.startPosition = frag ? this.hls.liveSyncPosition || frag.start : pos;\n      }\n    } else if (pos <= start) {\n      // VoD playlist: if loadPosition before start of playlist, load first fragment\n      frag = fragments[0];\n    } // If we haven't run into any special cases already, just load the fragment most closely matching the requested position\n\n\n    if (!frag) {\n      var end = config.lowLatencyMode ? levelDetails.partEnd : levelDetails.fragmentEnd;\n      frag = this.getFragmentAtPosition(pos, end, levelDetails);\n    }\n\n    return this.mapToInitFragWhenRequired(frag);\n  };\n\n  _proto.mapToInitFragWhenRequired = function mapToInitFragWhenRequired(frag) {\n    // If an initSegment is present, it must be buffered first\n    if (frag !== null && frag !== void 0 && frag.initSegment && !(frag !== null && frag !== void 0 && frag.initSegment.data) && !this.bitrateTest) {\n      return frag.initSegment;\n    }\n\n    return frag;\n  };\n\n  _proto.getNextPart = function getNextPart(partList, frag, targetBufferTime) {\n    var nextPart = -1;\n    var contiguous = false;\n    var independentAttrOmitted = true;\n\n    for (var i = 0, len = partList.length; i < len; i++) {\n      var part = partList[i];\n      independentAttrOmitted = independentAttrOmitted && !part.independent;\n\n      if (nextPart > -1 && targetBufferTime < part.start) {\n        break;\n      }\n\n      var loaded = part.loaded;\n\n      if (!loaded && (contiguous || part.independent || independentAttrOmitted) && part.fragment === frag) {\n        nextPart = i;\n      }\n\n      contiguous = loaded;\n    }\n\n    return nextPart;\n  };\n\n  _proto.loadedEndOfParts = function loadedEndOfParts(partList, targetBufferTime) {\n    var lastPart = partList[partList.length - 1];\n    return lastPart && targetBufferTime > lastPart.start && lastPart.loaded;\n  }\n  /*\n   This method is used find the best matching first fragment for a live playlist. This fragment is used to calculate the\n   \"sliding\" of the playlist, which is its offset from the start of playback. After sliding we can compute the real\n   start and end times for each fragment in the playlist (after which this method will not need to be called).\n  */\n  ;\n\n  _proto.getInitialLiveFragment = function getInitialLiveFragment(levelDetails, fragments) {\n    var fragPrevious = this.fragPrevious;\n    var frag = null;\n\n    if (fragPrevious) {\n      if (levelDetails.hasProgramDateTime) {\n        // Prefer using PDT, because it can be accurate enough to choose the correct fragment without knowing the level sliding\n        this.log(\"Live playlist, switching playlist, load frag with same PDT: \" + fragPrevious.programDateTime);\n        frag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_10__[\"findFragmentByPDT\"])(fragments, fragPrevious.endProgramDateTime, this.config.maxFragLookUpTolerance);\n      }\n\n      if (!frag) {\n        // SN does not need to be accurate between renditions, but depending on the packaging it may be so.\n        var targetSN = fragPrevious.sn + 1;\n\n        if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {\n          var fragNext = fragments[targetSN - levelDetails.startSN]; // Ensure that we're staying within the continuity range, since PTS resets upon a new range\n\n          if (fragPrevious.cc === fragNext.cc) {\n            frag = fragNext;\n            this.log(\"Live playlist, switching playlist, load frag with next SN: \" + frag.sn);\n          }\n        } // It's important to stay within the continuity range if available; otherwise the fragments in the playlist\n        // will have the wrong start times\n\n\n        if (!frag) {\n          frag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_10__[\"findFragWithCC\"])(fragments, fragPrevious.cc);\n\n          if (frag) {\n            this.log(\"Live playlist, switching playlist, load frag with same CC: \" + frag.sn);\n          }\n        }\n      }\n    } else {\n      // Find a new start fragment when fragPrevious is null\n      var liveStart = this.hls.liveSyncPosition;\n\n      if (liveStart !== null) {\n        frag = this.getFragmentAtPosition(liveStart, this.bitrateTest ? levelDetails.fragmentEnd : levelDetails.edge, levelDetails);\n      }\n    }\n\n    return frag;\n  }\n  /*\n  This method finds the best matching fragment given the provided position.\n   */\n  ;\n\n  _proto.getFragmentAtPosition = function getFragmentAtPosition(bufferEnd, end, levelDetails) {\n    var config = this.config,\n        fragPrevious = this.fragPrevious;\n    var fragments = levelDetails.fragments,\n        endSN = levelDetails.endSN;\n    var fragmentHint = levelDetails.fragmentHint;\n    var tolerance = config.maxFragLookUpTolerance;\n    var loadingParts = !!(config.lowLatencyMode && levelDetails.partList && fragmentHint);\n\n    if (loadingParts && fragmentHint && !this.bitrateTest) {\n      // Include incomplete fragment with parts at end\n      fragments = fragments.concat(fragmentHint);\n      endSN = fragmentHint.sn;\n    }\n\n    var frag;\n\n    if (bufferEnd < end) {\n      var lookupTolerance = bufferEnd > end - tolerance ? 0 : tolerance; // Remove the tolerance if it would put the bufferEnd past the actual end of stream\n      // Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)\n\n      frag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_10__[\"findFragmentByPTS\"])(fragPrevious, fragments, bufferEnd, lookupTolerance);\n    } else {\n      // reach end of playlist\n      frag = fragments[fragments.length - 1];\n    }\n\n    if (frag) {\n      var curSNIdx = frag.sn - levelDetails.startSN;\n\n      if (fragPrevious && frag.sn === fragPrevious.sn && !loadingParts) {\n        // Force the next fragment to load if the previous one was already selected. This can occasionally happen with\n        // non-uniform fragment durations\n        var sameLevel = fragPrevious && frag.level === fragPrevious.level;\n\n        if (sameLevel) {\n          var nextFrag = fragments[curSNIdx + 1];\n\n          if (frag.sn < endSN && this.fragmentTracker.getState(nextFrag) !== _fragment_tracker__WEBPACK_IMPORTED_MODULE_2__[\"FragmentState\"].OK) {\n            this.log(\"SN \" + frag.sn + \" just loaded, load next one: \" + nextFrag.sn);\n            frag = nextFrag;\n          } else {\n            frag = null;\n          }\n        }\n      }\n    }\n\n    return frag;\n  };\n\n  _proto.synchronizeToLiveEdge = function synchronizeToLiveEdge(levelDetails) {\n    var config = this.config,\n        media = this.media;\n\n    if (!media) {\n      return;\n    }\n\n    var liveSyncPosition = this.hls.liveSyncPosition;\n    var currentTime = media.currentTime;\n    var start = levelDetails.fragments[0].start;\n    var end = levelDetails.edge;\n    var withinSlidingWindow = currentTime >= start - config.maxFragLookUpTolerance && currentTime <= end; // Continue if we can seek forward to sync position or if current time is outside of sliding window\n\n    if (liveSyncPosition !== null && media.duration > liveSyncPosition && (currentTime < liveSyncPosition || !withinSlidingWindow)) {\n      // Continue if buffer is starving or if current time is behind max latency\n      var maxLatency = config.liveMaxLatencyDuration !== undefined ? config.liveMaxLatencyDuration : config.liveMaxLatencyDurationCount * levelDetails.targetduration;\n\n      if (!withinSlidingWindow && media.readyState < 4 || currentTime < end - maxLatency) {\n        if (!this.loadedmetadata) {\n          this.nextLoadPosition = liveSyncPosition;\n        } // Only seek if ready and there is not a significant forward buffer available for playback\n\n\n        if (media.readyState) {\n          this.warn(\"Playback: \" + currentTime.toFixed(3) + \" is located too far from the end of live sliding playlist: \" + end + \", reset currentTime to : \" + liveSyncPosition.toFixed(3));\n          media.currentTime = liveSyncPosition;\n        }\n      }\n    }\n  };\n\n  _proto.alignPlaylists = function alignPlaylists(details, previousDetails) {\n    var levels = this.levels,\n        levelLastLoaded = this.levelLastLoaded,\n        fragPrevious = this.fragPrevious;\n    var lastLevel = levelLastLoaded !== null ? levels[levelLastLoaded] : null; // FIXME: If not for `shouldAlignOnDiscontinuities` requiring fragPrevious.cc,\n    //  this could all go in level-helper mergeDetails()\n\n    var length = details.fragments.length;\n\n    if (!length) {\n      this.warn(\"No fragments in live playlist\");\n      return 0;\n    }\n\n    var slidingStart = details.fragments[0].start;\n    var firstLevelLoad = !previousDetails;\n\n    var aligned = details.alignedSliding && Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(slidingStart);\n\n    if (firstLevelLoad || !aligned && !slidingStart) {\n      Object(_utils_discontinuities__WEBPACK_IMPORTED_MODULE_9__[\"alignStream\"])(fragPrevious, lastLevel, details);\n      var alignedSlidingStart = details.fragments[0].start;\n      this.log(\"Live playlist sliding: \" + alignedSlidingStart.toFixed(2) + \" start-sn: \" + (previousDetails ? previousDetails.startSN : 'na') + \"->\" + details.startSN + \" prev-sn: \" + (fragPrevious ? fragPrevious.sn : 'na') + \" fragments: \" + length);\n      return alignedSlidingStart;\n    }\n\n    return slidingStart;\n  };\n\n  _proto.waitForCdnTuneIn = function waitForCdnTuneIn(details) {\n    // Wait for Low-Latency CDN Tune-in to get an updated playlist\n    var advancePartLimit = 3;\n    return details.live && details.canBlockReload && details.partTarget && details.tuneInGoal > Math.max(details.partHoldBack, details.partTarget * advancePartLimit);\n  };\n\n  _proto.setStartPosition = function setStartPosition(details, sliding) {\n    // compute start position if set to -1. use it straight away if value is defined\n    var startPosition = this.startPosition;\n\n    if (startPosition < sliding) {\n      startPosition = -1;\n    }\n\n    if (startPosition === -1 || this.lastCurrentTime === -1) {\n      // first, check if start time offset has been set in playlist, if yes, use this value\n      var startTimeOffset = details.startTimeOffset;\n\n      if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(startTimeOffset)) {\n        startPosition = sliding + startTimeOffset;\n\n        if (startTimeOffset < 0) {\n          startPosition += details.totalduration;\n        }\n\n        startPosition = Math.min(Math.max(sliding, startPosition), sliding + details.totalduration);\n        this.log(\"Start time offset \" + startTimeOffset + \" found in playlist, adjust startPosition to \" + startPosition);\n        this.startPosition = startPosition;\n      } else if (details.live) {\n        // Leave this.startPosition at -1, so that we can use `getInitialLiveFragment` logic when startPosition has\n        // not been specified via the config or an as an argument to startLoad (#3736).\n        startPosition = this.hls.liveSyncPosition || sliding;\n      } else {\n        this.startPosition = startPosition = 0;\n      }\n\n      this.lastCurrentTime = startPosition;\n    }\n\n    this.nextLoadPosition = startPosition;\n  };\n\n  _proto.getLoadPosition = function getLoadPosition() {\n    var media = this.media; // if we have not yet loaded any fragment, start loading from start position\n\n    var pos = 0;\n\n    if (this.loadedmetadata && media) {\n      pos = media.currentTime;\n    } else if (this.nextLoadPosition) {\n      pos = this.nextLoadPosition;\n    }\n\n    return pos;\n  };\n\n  _proto.handleFragLoadAborted = function handleFragLoadAborted(frag, part) {\n    if (this.transmuxer && frag.sn !== 'initSegment' && frag.stats.aborted) {\n      this.warn(\"Fragment \" + frag.sn + (part ? ' part' + part.index : '') + \" of level \" + frag.level + \" was aborted\");\n      this.resetFragmentLoading(frag);\n    }\n  };\n\n  _proto.resetFragmentLoading = function resetFragmentLoading(frag) {\n    if (!this.fragCurrent || !this.fragContextChanged(frag) && this.state !== State.FRAG_LOADING_WAITING_RETRY) {\n      this.state = State.IDLE;\n    }\n  };\n\n  _proto.onFragmentOrKeyLoadError = function onFragmentOrKeyLoadError(filterType, data) {\n    if (data.fatal) {\n      return;\n    }\n\n    var frag = data.frag; // Handle frag error related to caller's filterType\n\n    if (!frag || frag.type !== filterType) {\n      return;\n    }\n\n    var fragCurrent = this.fragCurrent;\n    console.assert(fragCurrent && frag.sn === fragCurrent.sn && frag.level === fragCurrent.level && frag.urlId === fragCurrent.urlId, 'Frag load error must match current frag to retry');\n    var config = this.config; // keep retrying until the limit will be reached\n\n    if (this.fragLoadError + 1 <= config.fragLoadingMaxRetry) {\n      if (!this.loadedmetadata) {\n        this.startFragRequested = false;\n        this.nextLoadPosition = this.startPosition;\n      } // exponential backoff capped to config.fragLoadingMaxRetryTimeout\n\n\n      var delay = Math.min(Math.pow(2, this.fragLoadError) * config.fragLoadingRetryDelay, config.fragLoadingMaxRetryTimeout);\n      this.warn(\"Fragment \" + frag.sn + \" of \" + filterType + \" \" + frag.level + \" failed to load, retrying in \" + delay + \"ms\");\n      this.retryDate = self.performance.now() + delay;\n      this.fragLoadError++;\n      this.state = State.FRAG_LOADING_WAITING_RETRY;\n    } else if (data.levelRetry) {\n      if (filterType === _types_loader__WEBPACK_IMPORTED_MODULE_15__[\"PlaylistLevelType\"].AUDIO) {\n        // Reset current fragment since audio track audio is essential and may not have a fail-over track\n        this.fragCurrent = null;\n      } // Fragment errors that result in a level switch or redundant fail-over\n      // should reset the stream controller state to idle\n\n\n      this.fragLoadError = 0;\n      this.state = State.IDLE;\n    } else {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_4__[\"logger\"].error(data.details + \" reaches max retry, redispatch as fatal ...\"); // switch error to fatal\n\n      data.fatal = true;\n      this.hls.stopLoad();\n      this.state = State.ERROR;\n    }\n  };\n\n  _proto.afterBufferFlushed = function afterBufferFlushed(media, bufferType, playlistType) {\n    if (!media) {\n      return;\n    } // After successful buffer flushing, filter flushed fragments from bufferedFrags use mediaBuffered instead of media\n    // (so that we will check against video.buffered ranges in case of alt audio track)\n\n\n    var bufferedTimeRanges = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_3__[\"BufferHelper\"].getBuffered(media);\n    this.fragmentTracker.detectEvictedFragments(bufferType, bufferedTimeRanges, playlistType);\n\n    if (this.state === State.ENDED) {\n      this.resetLoadingState();\n    }\n  };\n\n  _proto.resetLoadingState = function resetLoadingState() {\n    this.fragCurrent = null;\n    this.fragPrevious = null;\n    this.state = State.IDLE;\n  };\n\n  _proto.resetStartWhenNotLoaded = function resetStartWhenNotLoaded(level) {\n    // if loadedmetadata is not set, it means that first frag request failed\n    // in that case, reset startFragRequested flag\n    if (!this.loadedmetadata) {\n      this.startFragRequested = false;\n      var details = this.levels ? this.levels[level].details : null;\n\n      if (details !== null && details !== void 0 && details.live) {\n        // Update the start position and return to IDLE to recover live start\n        this.startPosition = -1;\n        this.setStartPosition(details, 0);\n        this.resetLoadingState();\n      } else {\n        this.nextLoadPosition = this.startPosition;\n      }\n    }\n  };\n\n  _proto.updateLevelTiming = function updateLevelTiming(frag, part, level, partial) {\n    var _this6 = this;\n\n    var details = level.details;\n    console.assert(!!details, 'level.details must be defined');\n    var parsed = Object.keys(frag.elementaryStreams).reduce(function (result, type) {\n      var info = frag.elementaryStreams[type];\n\n      if (info) {\n        var parsedDuration = info.endPTS - info.startPTS;\n\n        if (parsedDuration <= 0) {\n          // Destroy the transmuxer after it's next time offset failed to advance because duration was <= 0.\n          // The new transmuxer will be configured with a time offset matching the next fragment start,\n          // preventing the timeline from shifting.\n          _this6.warn(\"Could not parse fragment \" + frag.sn + \" \" + type + \" duration reliably (\" + parsedDuration + \")\");\n\n          return result || false;\n        }\n\n        var drift = partial ? 0 : Object(_level_helper__WEBPACK_IMPORTED_MODULE_11__[\"updateFragPTSDTS\"])(details, frag, info.startPTS, info.endPTS, info.startDTS, info.endDTS);\n\n        _this6.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].LEVEL_PTS_UPDATED, {\n          details: details,\n          level: level,\n          drift: drift,\n          type: type,\n          frag: frag,\n          start: info.startPTS,\n          end: info.endPTS\n        });\n\n        return true;\n      }\n\n      return result;\n    }, false);\n\n    if (!parsed) {\n      this.warn(\"Found no media in fragment \" + frag.sn + \" of level \" + level.id + \" resetting transmuxer to fallback to playlist timing\");\n      this.resetTransmuxer();\n    }\n\n    this.state = State.PARSED;\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_5__[\"Events\"].FRAG_PARSED, {\n      frag: frag,\n      part: part\n    });\n  };\n\n  _proto.resetTransmuxer = function resetTransmuxer() {\n    if (this.transmuxer) {\n      this.transmuxer.destroy();\n      this.transmuxer = null;\n    }\n  };\n\n  _createClass(BaseStreamController, [{\n    key: \"state\",\n    get: function get() {\n      return this._state;\n    },\n    set: function set(nextState) {\n      var previousState = this._state;\n\n      if (previousState !== nextState) {\n        this._state = nextState;\n        this.log(previousState + \"->\" + nextState);\n      }\n    }\n  }]);\n\n  return BaseStreamController;\n}(_task_loop__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n\n\n/***/ }),\n\n/***/ \"./src/controller/buffer-controller.ts\":\n/*!*********************************************!*\\\n  !*** ./src/controller/buffer-controller.ts ***!\n  \\*********************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_168675__) {\n\n\"use strict\";\n__nested_webpack_require_168675__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_168675__.d(__webpack_exports__, \"default\", function() { return BufferController; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_168675__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_168675__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_168675__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_168675__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_168675__(/*! ../utils/buffer-helper */ \"./src/utils/buffer-helper.ts\");\n/* harmony import */ var _utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_168675__(/*! ../utils/mediasource-helper */ \"./src/utils/mediasource-helper.ts\");\n/* harmony import */ var _loader_fragment__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_168675__(/*! ../loader/fragment */ \"./src/loader/fragment.ts\");\n/* harmony import */ var _buffer_operation_queue__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_168675__(/*! ./buffer-operation-queue */ \"./src/controller/buffer-operation-queue.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\nvar MediaSource = Object(_utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_5__[\"getMediaSource\"])();\nvar VIDEO_CODEC_PROFILE_REPACE = /([ha]vc.)(?:\\.[^.,]+)+/;\n\nvar BufferController = /*#__PURE__*/function () {\n  // The level details used to determine duration, target-duration and live\n  // cache the self generated object url to detect hijack of video tag\n  // A queue of buffer operations which require the SourceBuffer to not be updating upon execution\n  // References to event listeners for each SourceBuffer, so that they can be referenced for event removal\n  // The number of BUFFER_CODEC events received before any sourceBuffers are created\n  // The total number of BUFFER_CODEC events received\n  // A reference to the attached media element\n  // A reference to the active media source\n  // counters\n  function BufferController(_hls) {\n    var _this = this;\n\n    this.details = null;\n    this._objectUrl = null;\n    this.operationQueue = void 0;\n    this.listeners = void 0;\n    this.hls = void 0;\n    this.bufferCodecEventsExpected = 0;\n    this._bufferCodecEventsTotal = 0;\n    this.media = null;\n    this.mediaSource = null;\n    this.appendError = 0;\n    this.tracks = {};\n    this.pendingTracks = {};\n    this.sourceBuffer = void 0;\n\n    this._onMediaSourceOpen = function () {\n      var hls = _this.hls,\n          media = _this.media,\n          mediaSource = _this.mediaSource;\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log('[buffer-controller]: Media source opened');\n\n      if (media) {\n        _this.updateMediaElementDuration();\n\n        hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_ATTACHED, {\n          media: media\n        });\n      }\n\n      if (mediaSource) {\n        // once received, don't listen anymore to sourceopen event\n        mediaSource.removeEventListener('sourceopen', _this._onMediaSourceOpen);\n      }\n\n      _this.checkPendingTracks();\n    };\n\n    this._onMediaSourceClose = function () {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log('[buffer-controller]: Media source closed');\n    };\n\n    this._onMediaSourceEnded = function () {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log('[buffer-controller]: Media source ended');\n    };\n\n    this.hls = _hls;\n\n    this._initSourceBuffer();\n\n    this.registerListeners();\n  }\n\n  var _proto = BufferController.prototype;\n\n  _proto.hasSourceTypes = function hasSourceTypes() {\n    return this.getSourceBufferTypes().length > 0 || Object.keys(this.pendingTracks).length > 0;\n  };\n\n  _proto.destroy = function destroy() {\n    this.unregisterListeners();\n    this.details = null;\n  };\n\n  _proto.registerListeners = function registerListeners() {\n    var hls = this.hls;\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_RESET, this.onBufferReset, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_APPENDING, this.onBufferAppending, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_CODECS, this.onBufferCodecs, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_EOS, this.onBufferEos, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_FLUSHING, this.onBufferFlushing, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVEL_UPDATED, this.onLevelUpdated, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_PARSED, this.onFragParsed, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_CHANGED, this.onFragChanged, this);\n  };\n\n  _proto.unregisterListeners = function unregisterListeners() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_RESET, this.onBufferReset, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_APPENDING, this.onBufferAppending, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_CODECS, this.onBufferCodecs, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_EOS, this.onBufferEos, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_FLUSHING, this.onBufferFlushing, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVEL_UPDATED, this.onLevelUpdated, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_PARSED, this.onFragParsed, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_CHANGED, this.onFragChanged, this);\n  };\n\n  _proto._initSourceBuffer = function _initSourceBuffer() {\n    this.sourceBuffer = {};\n    this.operationQueue = new _buffer_operation_queue__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.sourceBuffer);\n    this.listeners = {\n      audio: [],\n      video: [],\n      audiovideo: []\n    };\n  };\n\n  _proto.onManifestParsed = function onManifestParsed(event, data) {\n    // in case of alt audio 2 BUFFER_CODECS events will be triggered, one per stream controller\n    // sourcebuffers will be created all at once when the expected nb of tracks will be reached\n    // in case alt audio is not used, only one BUFFER_CODEC event will be fired from main stream controller\n    // it will contain the expected nb of source buffers, no need to compute it\n    var codecEvents = 2;\n\n    if (data.audio && !data.video || !data.altAudio) {\n      codecEvents = 1;\n    }\n\n    this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = codecEvents;\n    this.details = null;\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(this.bufferCodecEventsExpected + \" bufferCodec event(s) expected\");\n  };\n\n  _proto.onMediaAttaching = function onMediaAttaching(event, data) {\n    var media = this.media = data.media;\n\n    if (media && MediaSource) {\n      var ms = this.mediaSource = new MediaSource(); // MediaSource listeners are arrow functions with a lexical scope, and do not need to be bound\n\n      ms.addEventListener('sourceopen', this._onMediaSourceOpen);\n      ms.addEventListener('sourceended', this._onMediaSourceEnded);\n      ms.addEventListener('sourceclose', this._onMediaSourceClose); // link video and media Source\n\n      media.src = self.URL.createObjectURL(ms); // cache the locally generated object url\n\n      this._objectUrl = media.src;\n    }\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    var media = this.media,\n        mediaSource = this.mediaSource,\n        _objectUrl = this._objectUrl;\n\n    if (mediaSource) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log('[buffer-controller]: media source detaching');\n\n      if (mediaSource.readyState === 'open') {\n        try {\n          // endOfStream could trigger exception if any sourcebuffer is in updating state\n          // we don't really care about checking sourcebuffer state here,\n          // as we are anyway detaching the MediaSource\n          // let's just avoid this exception to propagate\n          mediaSource.endOfStream();\n        } catch (err) {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn(\"[buffer-controller]: onMediaDetaching: \" + err.message + \" while calling endOfStream\");\n        }\n      } // Clean up the SourceBuffers by invoking onBufferReset\n\n\n      this.onBufferReset();\n      mediaSource.removeEventListener('sourceopen', this._onMediaSourceOpen);\n      mediaSource.removeEventListener('sourceended', this._onMediaSourceEnded);\n      mediaSource.removeEventListener('sourceclose', this._onMediaSourceClose); // Detach properly the MediaSource from the HTMLMediaElement as\n      // suggested in https://github.com/w3c/media-source/issues/53.\n\n      if (media) {\n        if (_objectUrl) {\n          self.URL.revokeObjectURL(_objectUrl);\n        } // clean up video tag src only if it's our own url. some external libraries might\n        // hijack the video tag and change its 'src' without destroying the Hls instance first\n\n\n        if (media.src === _objectUrl) {\n          media.removeAttribute('src');\n          media.load();\n        } else {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn('[buffer-controller]: media.src was changed by a third party - skip cleanup');\n        }\n      }\n\n      this.mediaSource = null;\n      this.media = null;\n      this._objectUrl = null;\n      this.bufferCodecEventsExpected = this._bufferCodecEventsTotal;\n      this.pendingTracks = {};\n      this.tracks = {};\n    }\n\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_DETACHED, undefined);\n  };\n\n  _proto.onBufferReset = function onBufferReset() {\n    var _this2 = this;\n\n    this.getSourceBufferTypes().forEach(function (type) {\n      var sb = _this2.sourceBuffer[type];\n\n      try {\n        if (sb) {\n          _this2.removeBufferListeners(type);\n\n          if (_this2.mediaSource) {\n            _this2.mediaSource.removeSourceBuffer(sb);\n          } // Synchronously remove the SB from the map before the next call in order to prevent an async function from\n          // accessing it\n\n\n          _this2.sourceBuffer[type] = undefined;\n        }\n      } catch (err) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn(\"[buffer-controller]: Failed to reset the \" + type + \" buffer\", err);\n      }\n    });\n\n    this._initSourceBuffer();\n  };\n\n  _proto.onBufferCodecs = function onBufferCodecs(event, data) {\n    var _this3 = this;\n\n    var sourceBufferCount = this.getSourceBufferTypes().length;\n    Object.keys(data).forEach(function (trackName) {\n      if (sourceBufferCount) {\n        // check if SourceBuffer codec needs to change\n        var track = _this3.tracks[trackName];\n\n        if (track && typeof track.buffer.changeType === 'function') {\n          var _data$trackName = data[trackName],\n              id = _data$trackName.id,\n              codec = _data$trackName.codec,\n              levelCodec = _data$trackName.levelCodec,\n              container = _data$trackName.container,\n              metadata = _data$trackName.metadata;\n          var currentCodec = (track.levelCodec || track.codec).replace(VIDEO_CODEC_PROFILE_REPACE, '$1');\n          var nextCodec = (levelCodec || codec).replace(VIDEO_CODEC_PROFILE_REPACE, '$1');\n\n          if (currentCodec !== nextCodec) {\n            var mimeType = container + \";codecs=\" + (levelCodec || codec);\n\n            _this3.appendChangeType(trackName, mimeType);\n\n            _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"[buffer-controller]: switching codec \" + currentCodec + \" to \" + nextCodec);\n            _this3.tracks[trackName] = {\n              buffer: track.buffer,\n              codec: codec,\n              container: container,\n              levelCodec: levelCodec,\n              metadata: metadata,\n              id: id\n            };\n          }\n        }\n      } else {\n        // if source buffer(s) not created yet, appended buffer tracks in this.pendingTracks\n        _this3.pendingTracks[trackName] = data[trackName];\n      }\n    }); // if sourcebuffers already created, do nothing ...\n\n    if (sourceBufferCount) {\n      return;\n    }\n\n    this.bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0);\n\n    if (this.mediaSource && this.mediaSource.readyState === 'open') {\n      this.checkPendingTracks();\n    }\n  };\n\n  _proto.appendChangeType = function appendChangeType(type, mimeType) {\n    var _this4 = this;\n\n    var operationQueue = this.operationQueue;\n    var operation = {\n      execute: function execute() {\n        var sb = _this4.sourceBuffer[type];\n\n        if (sb) {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"[buffer-controller]: changing \" + type + \" sourceBuffer type to \" + mimeType);\n          sb.changeType(mimeType);\n        }\n\n        operationQueue.shiftAndExecuteNext(type);\n      },\n      onStart: function onStart() {},\n      onComplete: function onComplete() {},\n      onError: function onError(e) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn(\"[buffer-controller]: Failed to change \" + type + \" SourceBuffer type\", e);\n      }\n    };\n    operationQueue.append(operation, type);\n  };\n\n  _proto.onBufferAppending = function onBufferAppending(event, eventData) {\n    var _this5 = this;\n\n    var hls = this.hls,\n        operationQueue = this.operationQueue,\n        tracks = this.tracks;\n    var data = eventData.data,\n        type = eventData.type,\n        frag = eventData.frag,\n        part = eventData.part,\n        chunkMeta = eventData.chunkMeta;\n    var chunkStats = chunkMeta.buffering[type];\n    var bufferAppendingStart = self.performance.now();\n    chunkStats.start = bufferAppendingStart;\n    var fragBuffering = frag.stats.buffering;\n    var partBuffering = part ? part.stats.buffering : null;\n\n    if (fragBuffering.start === 0) {\n      fragBuffering.start = bufferAppendingStart;\n    }\n\n    if (partBuffering && partBuffering.start === 0) {\n      partBuffering.start = bufferAppendingStart;\n    } // TODO: Only update timestampOffset when audio/mpeg fragment or part is not contiguous with previously appended\n    // Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)\n    // in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`\n    // is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos).\n    // More info here: https://github.com/video-dev/hls.js/issues/332#issuecomment-257986486\n\n\n    var audioTrack = tracks.audio;\n    var checkTimestampOffset = type === 'audio' && chunkMeta.id === 1 && (audioTrack === null || audioTrack === void 0 ? void 0 : audioTrack.container) === 'audio/mpeg';\n    var operation = {\n      execute: function execute() {\n        chunkStats.executeStart = self.performance.now();\n\n        if (checkTimestampOffset) {\n          var sb = _this5.sourceBuffer[type];\n\n          if (sb) {\n            var delta = frag.start - sb.timestampOffset;\n\n            if (Math.abs(delta) >= 0.1) {\n              _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"[buffer-controller]: Updating audio SourceBuffer timestampOffset to \" + frag.start + \" (delta: \" + delta + \") sn: \" + frag.sn + \")\");\n              sb.timestampOffset = frag.start;\n            }\n          }\n        }\n\n        _this5.appendExecutor(data, type);\n      },\n      onStart: function onStart() {// logger.debug(`[buffer-controller]: ${type} SourceBuffer updatestart`);\n      },\n      onComplete: function onComplete() {\n        // logger.debug(`[buffer-controller]: ${type} SourceBuffer updateend`);\n        var end = self.performance.now();\n        chunkStats.executeEnd = chunkStats.end = end;\n\n        if (fragBuffering.first === 0) {\n          fragBuffering.first = end;\n        }\n\n        if (partBuffering && partBuffering.first === 0) {\n          partBuffering.first = end;\n        }\n\n        var sourceBuffer = _this5.sourceBuffer;\n        var timeRanges = {};\n\n        for (var _type in sourceBuffer) {\n          timeRanges[_type] = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__[\"BufferHelper\"].getBuffered(sourceBuffer[_type]);\n        }\n\n        _this5.appendError = 0;\n\n        _this5.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_APPENDED, {\n          type: type,\n          frag: frag,\n          part: part,\n          chunkMeta: chunkMeta,\n          parent: frag.type,\n          timeRanges: timeRanges\n        });\n      },\n      onError: function onError(err) {\n        // in case any error occured while appending, put back segment in segments table\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error(\"[buffer-controller]: Error encountered while trying to append to the \" + type + \" SourceBuffer\", err);\n        var event = {\n          type: _errors__WEBPACK_IMPORTED_MODULE_3__[\"ErrorTypes\"].MEDIA_ERROR,\n          parent: frag.type,\n          details: _errors__WEBPACK_IMPORTED_MODULE_3__[\"ErrorDetails\"].BUFFER_APPEND_ERROR,\n          err: err,\n          fatal: false\n        };\n\n        if (err.code === DOMException.QUOTA_EXCEEDED_ERR) {\n          // QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror\n          // let's stop appending any segments, and report BUFFER_FULL_ERROR error\n          event.details = _errors__WEBPACK_IMPORTED_MODULE_3__[\"ErrorDetails\"].BUFFER_FULL_ERROR;\n        } else {\n          _this5.appendError++;\n          event.details = _errors__WEBPACK_IMPORTED_MODULE_3__[\"ErrorDetails\"].BUFFER_APPEND_ERROR;\n          /* with UHD content, we could get loop of quota exceeded error until\n            browser is able to evict some data from sourcebuffer. Retrying can help recover.\n          */\n\n          if (_this5.appendError > hls.config.appendErrorMaxRetry) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error(\"[buffer-controller]: Failed \" + hls.config.appendErrorMaxRetry + \" times to append segment in sourceBuffer\");\n            event.fatal = true;\n            hls.stopLoad();\n          }\n        }\n\n        hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, event);\n      }\n    };\n    operationQueue.append(operation, type);\n  };\n\n  _proto.onBufferFlushing = function onBufferFlushing(event, data) {\n    var _this6 = this;\n\n    var operationQueue = this.operationQueue;\n\n    var flushOperation = function flushOperation(type) {\n      return {\n        execute: _this6.removeExecutor.bind(_this6, type, data.startOffset, data.endOffset),\n        onStart: function onStart() {// logger.debug(`[buffer-controller]: Started flushing ${data.startOffset} -> ${data.endOffset} for ${type} Source Buffer`);\n        },\n        onComplete: function onComplete() {\n          // logger.debug(`[buffer-controller]: Finished flushing ${data.startOffset} -> ${data.endOffset} for ${type} Source Buffer`);\n          _this6.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_FLUSHED, {\n            type: type\n          });\n        },\n        onError: function onError(e) {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn(\"[buffer-controller]: Failed to remove from \" + type + \" SourceBuffer\", e);\n        }\n      };\n    };\n\n    if (data.type) {\n      operationQueue.append(flushOperation(data.type), data.type);\n    } else {\n      this.getSourceBufferTypes().forEach(function (type) {\n        operationQueue.append(flushOperation(type), type);\n      });\n    }\n  };\n\n  _proto.onFragParsed = function onFragParsed(event, data) {\n    var _this7 = this;\n\n    var frag = data.frag,\n        part = data.part;\n    var buffersAppendedTo = [];\n    var elementaryStreams = part ? part.elementaryStreams : frag.elementaryStreams;\n\n    if (elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_6__[\"ElementaryStreamTypes\"].AUDIOVIDEO]) {\n      buffersAppendedTo.push('audiovideo');\n    } else {\n      if (elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_6__[\"ElementaryStreamTypes\"].AUDIO]) {\n        buffersAppendedTo.push('audio');\n      }\n\n      if (elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_6__[\"ElementaryStreamTypes\"].VIDEO]) {\n        buffersAppendedTo.push('video');\n      }\n    }\n\n    var onUnblocked = function onUnblocked() {\n      var now = self.performance.now();\n      frag.stats.buffering.end = now;\n\n      if (part) {\n        part.stats.buffering.end = now;\n      }\n\n      var stats = part ? part.stats : frag.stats;\n\n      _this7.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_BUFFERED, {\n        frag: frag,\n        part: part,\n        stats: stats,\n        id: frag.type\n      });\n    };\n\n    if (buffersAppendedTo.length === 0) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn(\"Fragments must have at least one ElementaryStreamType set. type: \" + frag.type + \" level: \" + frag.level + \" sn: \" + frag.sn);\n    }\n\n    this.blockBuffers(onUnblocked, buffersAppendedTo);\n  };\n\n  _proto.onFragChanged = function onFragChanged(event, data) {\n    this.flushBackBuffer();\n  } // on BUFFER_EOS mark matching sourcebuffer(s) as ended and trigger checkEos()\n  // an undefined data.type will mark all buffers as EOS.\n  ;\n\n  _proto.onBufferEos = function onBufferEos(event, data) {\n    var _this8 = this;\n\n    var ended = this.getSourceBufferTypes().reduce(function (acc, type) {\n      var sb = _this8.sourceBuffer[type];\n\n      if (!data.type || data.type === type) {\n        if (sb && !sb.ended) {\n          sb.ended = true;\n          _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"[buffer-controller]: \" + type + \" sourceBuffer now EOS\");\n        }\n      }\n\n      return acc && !!(!sb || sb.ended);\n    }, true);\n\n    if (ended) {\n      this.blockBuffers(function () {\n        var mediaSource = _this8.mediaSource;\n\n        if (!mediaSource || mediaSource.readyState !== 'open') {\n          return;\n        } // Allow this to throw and be caught by the enqueueing function\n\n\n        mediaSource.endOfStream();\n      });\n    }\n  };\n\n  _proto.onLevelUpdated = function onLevelUpdated(event, _ref) {\n    var details = _ref.details;\n\n    if (!details.fragments.length) {\n      return;\n    }\n\n    this.details = details;\n\n    if (this.getSourceBufferTypes().length) {\n      this.blockBuffers(this.updateMediaElementDuration.bind(this));\n    } else {\n      this.updateMediaElementDuration();\n    }\n  };\n\n  _proto.flushBackBuffer = function flushBackBuffer() {\n    var hls = this.hls,\n        details = this.details,\n        media = this.media,\n        sourceBuffer = this.sourceBuffer;\n\n    if (!media || details === null) {\n      return;\n    }\n\n    var sourceBufferTypes = this.getSourceBufferTypes();\n\n    if (!sourceBufferTypes.length) {\n      return;\n    } // Support for deprecated liveBackBufferLength\n\n\n    var backBufferLength = details.live && hls.config.liveBackBufferLength !== null ? hls.config.liveBackBufferLength : hls.config.backBufferLength;\n\n    if (!Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(backBufferLength) || backBufferLength < 0) {\n      return;\n    }\n\n    var currentTime = media.currentTime;\n    var targetDuration = details.levelTargetDuration;\n    var maxBackBufferLength = Math.max(backBufferLength, targetDuration);\n    var targetBackBufferPosition = Math.floor(currentTime / targetDuration) * targetDuration - maxBackBufferLength;\n    sourceBufferTypes.forEach(function (type) {\n      var sb = sourceBuffer[type];\n\n      if (sb) {\n        var buffered = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__[\"BufferHelper\"].getBuffered(sb); // when target buffer start exceeds actual buffer start\n\n        if (buffered.length > 0 && targetBackBufferPosition > buffered.start(0)) {\n          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BACK_BUFFER_REACHED, {\n            bufferEnd: targetBackBufferPosition\n          }); // Support for deprecated event:\n\n          if (details.live) {\n            hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LIVE_BACK_BUFFER_REACHED, {\n              bufferEnd: targetBackBufferPosition\n            });\n          }\n\n          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_FLUSHING, {\n            startOffset: 0,\n            endOffset: targetBackBufferPosition,\n            type: type\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Update Media Source duration to current level duration or override to Infinity if configuration parameter\n   * 'liveDurationInfinity` is set to `true`\n   * More details: https://github.com/video-dev/hls.js/issues/355\n   */\n  ;\n\n  _proto.updateMediaElementDuration = function updateMediaElementDuration() {\n    if (!this.details || !this.media || !this.mediaSource || this.mediaSource.readyState !== 'open') {\n      return;\n    }\n\n    var details = this.details,\n        hls = this.hls,\n        media = this.media,\n        mediaSource = this.mediaSource;\n    var levelDuration = details.fragments[0].start + details.totalduration;\n    var mediaDuration = media.duration;\n    var msDuration = Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(mediaSource.duration) ? mediaSource.duration : 0;\n\n    if (details.live && hls.config.liveDurationInfinity) {\n      // Override duration to Infinity\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log('[buffer-controller]: Media Source duration is set to Infinity');\n      mediaSource.duration = Infinity;\n      this.updateSeekableRange(details);\n    } else if (levelDuration > msDuration && levelDuration > mediaDuration || !Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(mediaDuration)) {\n      // levelDuration was the last value we set.\n      // not using mediaSource.duration as the browser may tweak this value\n      // only update Media Source duration if its value increase, this is to avoid\n      // flushing already buffered portion when switching between quality level\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"[buffer-controller]: Updating Media Source duration to \" + levelDuration.toFixed(3));\n      mediaSource.duration = levelDuration;\n    }\n  };\n\n  _proto.updateSeekableRange = function updateSeekableRange(levelDetails) {\n    var mediaSource = this.mediaSource;\n    var fragments = levelDetails.fragments;\n    var len = fragments.length;\n\n    if (len && levelDetails.live && mediaSource !== null && mediaSource !== void 0 && mediaSource.setLiveSeekableRange) {\n      var start = Math.max(0, fragments[0].start);\n      var end = Math.max(start, start + levelDetails.totalduration);\n      mediaSource.setLiveSeekableRange(start, end);\n    }\n  };\n\n  _proto.checkPendingTracks = function checkPendingTracks() {\n    var bufferCodecEventsExpected = this.bufferCodecEventsExpected,\n        operationQueue = this.operationQueue,\n        pendingTracks = this.pendingTracks; // Check if we've received all of the expected bufferCodec events. When none remain, create all the sourceBuffers at once.\n    // This is important because the MSE spec allows implementations to throw QuotaExceededErrors if creating new sourceBuffers after\n    // data has been appended to existing ones.\n    // 2 tracks is the max (one for audio, one for video). If we've reach this max go ahead and create the buffers.\n\n    var pendingTracksCount = Object.keys(pendingTracks).length;\n\n    if (pendingTracksCount && !bufferCodecEventsExpected || pendingTracksCount === 2) {\n      // ok, let's create them now !\n      this.createSourceBuffers(pendingTracks);\n      this.pendingTracks = {}; // append any pending segments now !\n\n      var buffers = this.getSourceBufferTypes();\n\n      if (buffers.length === 0) {\n        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, {\n          type: _errors__WEBPACK_IMPORTED_MODULE_3__[\"ErrorTypes\"].MEDIA_ERROR,\n          details: _errors__WEBPACK_IMPORTED_MODULE_3__[\"ErrorDetails\"].BUFFER_INCOMPATIBLE_CODECS_ERROR,\n          fatal: true,\n          reason: 'could not create source buffer for media codec(s)'\n        });\n        return;\n      }\n\n      buffers.forEach(function (type) {\n        operationQueue.executeNext(type);\n      });\n    }\n  };\n\n  _proto.createSourceBuffers = function createSourceBuffers(tracks) {\n    var sourceBuffer = this.sourceBuffer,\n        mediaSource = this.mediaSource;\n\n    if (!mediaSource) {\n      throw Error('createSourceBuffers called when mediaSource was null');\n    }\n\n    var tracksCreated = 0;\n\n    for (var trackName in tracks) {\n      if (!sourceBuffer[trackName]) {\n        var track = tracks[trackName];\n\n        if (!track) {\n          throw Error(\"source buffer exists for track \" + trackName + \", however track does not\");\n        } // use levelCodec as first priority\n\n\n        var codec = track.levelCodec || track.codec;\n        var mimeType = track.container + \";codecs=\" + codec;\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"[buffer-controller]: creating sourceBuffer(\" + mimeType + \")\");\n\n        try {\n          var sb = sourceBuffer[trackName] = mediaSource.addSourceBuffer(mimeType);\n          var sbName = trackName;\n          this.addBufferListener(sbName, 'updatestart', this._onSBUpdateStart);\n          this.addBufferListener(sbName, 'updateend', this._onSBUpdateEnd);\n          this.addBufferListener(sbName, 'error', this._onSBUpdateError);\n          this.tracks[trackName] = {\n            buffer: sb,\n            codec: codec,\n            container: track.container,\n            levelCodec: track.levelCodec,\n            metadata: track.metadata,\n            id: track.id\n          };\n          tracksCreated++;\n        } catch (err) {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error(\"[buffer-controller]: error while trying to add sourceBuffer: \" + err.message);\n          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, {\n            type: _errors__WEBPACK_IMPORTED_MODULE_3__[\"ErrorTypes\"].MEDIA_ERROR,\n            details: _errors__WEBPACK_IMPORTED_MODULE_3__[\"ErrorDetails\"].BUFFER_ADD_CODEC_ERROR,\n            fatal: false,\n            error: err,\n            mimeType: mimeType\n          });\n        }\n      }\n    }\n\n    if (tracksCreated) {\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_CREATED, {\n        tracks: this.tracks\n      });\n    }\n  } // Keep as arrow functions so that we can directly reference these functions directly as event listeners\n  ;\n\n  _proto._onSBUpdateStart = function _onSBUpdateStart(type) {\n    var operationQueue = this.operationQueue;\n    var operation = operationQueue.current(type);\n    operation.onStart();\n  };\n\n  _proto._onSBUpdateEnd = function _onSBUpdateEnd(type) {\n    var operationQueue = this.operationQueue;\n    var operation = operationQueue.current(type);\n    operation.onComplete();\n    operationQueue.shiftAndExecuteNext(type);\n  };\n\n  _proto._onSBUpdateError = function _onSBUpdateError(type, event) {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error(\"[buffer-controller]: \" + type + \" SourceBuffer error\", event); // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error\n    // SourceBuffer errors are not necessarily fatal; if so, the HTMLMediaElement will fire an error event\n\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, {\n      type: _errors__WEBPACK_IMPORTED_MODULE_3__[\"ErrorTypes\"].MEDIA_ERROR,\n      details: _errors__WEBPACK_IMPORTED_MODULE_3__[\"ErrorDetails\"].BUFFER_APPENDING_ERROR,\n      fatal: false\n    }); // updateend is always fired after error, so we'll allow that to shift the current operation off of the queue\n\n    var operation = this.operationQueue.current(type);\n\n    if (operation) {\n      operation.onError(event);\n    }\n  } // This method must result in an updateend event; if remove is not called, _onSBUpdateEnd must be called manually\n  ;\n\n  _proto.removeExecutor = function removeExecutor(type, startOffset, endOffset) {\n    var media = this.media,\n        mediaSource = this.mediaSource,\n        operationQueue = this.operationQueue,\n        sourceBuffer = this.sourceBuffer;\n    var sb = sourceBuffer[type];\n\n    if (!media || !mediaSource || !sb) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn(\"[buffer-controller]: Attempting to remove from the \" + type + \" SourceBuffer, but it does not exist\");\n      operationQueue.shiftAndExecuteNext(type);\n      return;\n    }\n\n    var mediaDuration = Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(media.duration) ? media.duration : Infinity;\n    var msDuration = Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(mediaSource.duration) ? mediaSource.duration : Infinity;\n    var removeStart = Math.max(0, startOffset);\n    var removeEnd = Math.min(endOffset, mediaDuration, msDuration);\n\n    if (removeEnd > removeStart) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"[buffer-controller]: Removing [\" + removeStart + \",\" + removeEnd + \"] from the \" + type + \" SourceBuffer\");\n      console.assert(!sb.updating, type + \" sourceBuffer must not be updating\");\n      sb.remove(removeStart, removeEnd);\n    } else {\n      // Cycle the queue\n      operationQueue.shiftAndExecuteNext(type);\n    }\n  } // This method must result in an updateend event; if append is not called, _onSBUpdateEnd must be called manually\n  ;\n\n  _proto.appendExecutor = function appendExecutor(data, type) {\n    var operationQueue = this.operationQueue,\n        sourceBuffer = this.sourceBuffer;\n    var sb = sourceBuffer[type];\n\n    if (!sb) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn(\"[buffer-controller]: Attempting to append to the \" + type + \" SourceBuffer, but it does not exist\");\n      operationQueue.shiftAndExecuteNext(type);\n      return;\n    }\n\n    sb.ended = false;\n    console.assert(!sb.updating, type + \" sourceBuffer must not be updating\");\n    sb.appendBuffer(data);\n  } // Enqueues an operation to each SourceBuffer queue which, upon execution, resolves a promise. When all promises\n  // resolve, the onUnblocked function is executed. Functions calling this method do not need to unblock the queue\n  // upon completion, since we already do it here\n  ;\n\n  _proto.blockBuffers = function blockBuffers(onUnblocked, buffers) {\n    var _this9 = this;\n\n    if (buffers === void 0) {\n      buffers = this.getSourceBufferTypes();\n    }\n\n    if (!buffers.length) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log('[buffer-controller]: Blocking operation requested, but no SourceBuffers exist');\n      Promise.resolve().then(onUnblocked);\n      return;\n    }\n\n    var operationQueue = this.operationQueue; // logger.debug(`[buffer-controller]: Blocking ${buffers} SourceBuffer`);\n\n    var blockingOperations = buffers.map(function (type) {\n      return operationQueue.appendBlocker(type);\n    });\n    Promise.all(blockingOperations).then(function () {\n      // logger.debug(`[buffer-controller]: Blocking operation resolved; unblocking ${buffers} SourceBuffer`);\n      onUnblocked();\n      buffers.forEach(function (type) {\n        var sb = _this9.sourceBuffer[type]; // Only cycle the queue if the SB is not updating. There's a bug in Chrome which sets the SB updating flag to\n        // true when changing the MediaSource duration (https://bugs.chromium.org/p/chromium/issues/detail?id=959359&can=2&q=mediasource%20duration)\n        // While this is a workaround, it's probably useful to have around\n\n        if (!sb || !sb.updating) {\n          operationQueue.shiftAndExecuteNext(type);\n        }\n      });\n    });\n  };\n\n  _proto.getSourceBufferTypes = function getSourceBufferTypes() {\n    return Object.keys(this.sourceBuffer);\n  };\n\n  _proto.addBufferListener = function addBufferListener(type, event, fn) {\n    var buffer = this.sourceBuffer[type];\n\n    if (!buffer) {\n      return;\n    }\n\n    var listener = fn.bind(this, type);\n    this.listeners[type].push({\n      event: event,\n      listener: listener\n    });\n    buffer.addEventListener(event, listener);\n  };\n\n  _proto.removeBufferListeners = function removeBufferListeners(type) {\n    var buffer = this.sourceBuffer[type];\n\n    if (!buffer) {\n      return;\n    }\n\n    this.listeners[type].forEach(function (l) {\n      buffer.removeEventListener(l.event, l.listener);\n    });\n  };\n\n  return BufferController;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/controller/buffer-operation-queue.ts\":\n/*!**************************************************!*\\\n  !*** ./src/controller/buffer-operation-queue.ts ***!\n  \\**************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_206429__) {\n\n\"use strict\";\n__nested_webpack_require_206429__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_206429__.d(__webpack_exports__, \"default\", function() { return BufferOperationQueue; });\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_206429__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n\n\nvar BufferOperationQueue = /*#__PURE__*/function () {\n  function BufferOperationQueue(sourceBufferReference) {\n    this.buffers = void 0;\n    this.queues = {\n      video: [],\n      audio: [],\n      audiovideo: []\n    };\n    this.buffers = sourceBufferReference;\n  }\n\n  var _proto = BufferOperationQueue.prototype;\n\n  _proto.append = function append(operation, type) {\n    var queue = this.queues[type];\n    queue.push(operation);\n\n    if (queue.length === 1 && this.buffers[type]) {\n      this.executeNext(type);\n    }\n  };\n\n  _proto.insertAbort = function insertAbort(operation, type) {\n    var queue = this.queues[type];\n    queue.unshift(operation);\n    this.executeNext(type);\n  };\n\n  _proto.appendBlocker = function appendBlocker(type) {\n    var execute;\n    var promise = new Promise(function (resolve) {\n      execute = resolve;\n    });\n    var operation = {\n      execute: execute,\n      onStart: function onStart() {},\n      onComplete: function onComplete() {},\n      onError: function onError() {}\n    };\n    this.append(operation, type);\n    return promise;\n  };\n\n  _proto.executeNext = function executeNext(type) {\n    var buffers = this.buffers,\n        queues = this.queues;\n    var sb = buffers[type];\n    var queue = queues[type];\n\n    if (queue.length) {\n      var operation = queue[0];\n\n      try {\n        // Operations are expected to result in an 'updateend' event being fired. If not, the queue will lock. Operations\n        // which do not end with this event must call _onSBUpdateEnd manually\n        operation.execute();\n      } catch (e) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].warn('[buffer-operation-queue]: Unhandled exception executing the current operation');\n        operation.onError(e); // Only shift the current operation off, otherwise the updateend handler will do this for us\n\n        if (!sb || !sb.updating) {\n          queue.shift();\n          this.executeNext(type);\n        }\n      }\n    }\n  };\n\n  _proto.shiftAndExecuteNext = function shiftAndExecuteNext(type) {\n    this.queues[type].shift();\n    this.executeNext(type);\n  };\n\n  _proto.current = function current(type) {\n    return this.queues[type][0];\n  };\n\n  return BufferOperationQueue;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/controller/cap-level-controller.ts\":\n/*!************************************************!*\\\n  !*** ./src/controller/cap-level-controller.ts ***!\n  \\************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_209301__) {\n\n\"use strict\";\n__nested_webpack_require_209301__.r(__webpack_exports__);\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_209301__(/*! ../events */ \"./src/events.ts\");\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n/*\n * cap stream level to media size dimension controller\n */\n\n\nvar CapLevelController = /*#__PURE__*/function () {\n  function CapLevelController(hls) {\n    this.autoLevelCapping = void 0;\n    this.firstLevel = void 0;\n    this.media = void 0;\n    this.restrictedLevels = void 0;\n    this.timer = void 0;\n    this.hls = void 0;\n    this.streamController = void 0;\n    this.clientRect = void 0;\n    this.hls = hls;\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    this.firstLevel = -1;\n    this.media = null;\n    this.restrictedLevels = [];\n    this.timer = undefined;\n    this.clientRect = null;\n    this.registerListeners();\n  }\n\n  var _proto = CapLevelController.prototype;\n\n  _proto.setStreamController = function setStreamController(streamController) {\n    this.streamController = streamController;\n  };\n\n  _proto.destroy = function destroy() {\n    this.unregisterListener();\n\n    if (this.hls.config.capLevelToPlayerSize) {\n      this.stopCapping();\n    }\n\n    this.media = null;\n    this.clientRect = null; // @ts-ignore\n\n    this.hls = this.streamController = null;\n  };\n\n  _proto.registerListeners = function registerListeners() {\n    var hls = this.hls;\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].BUFFER_CODECS, this.onBufferCodecs, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n  };\n\n  _proto.unregisterListener = function unregisterListener() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].BUFFER_CODECS, this.onBufferCodecs, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n  };\n\n  _proto.onFpsDropLevelCapping = function onFpsDropLevelCapping(event, data) {\n    // Don't add a restricted level more than once\n    if (CapLevelController.isLevelAllowed(data.droppedLevel, this.restrictedLevels)) {\n      this.restrictedLevels.push(data.droppedLevel);\n    }\n  };\n\n  _proto.onMediaAttaching = function onMediaAttaching(event, data) {\n    this.media = data.media instanceof HTMLVideoElement ? data.media : null;\n  };\n\n  _proto.onManifestParsed = function onManifestParsed(event, data) {\n    var hls = this.hls;\n    this.restrictedLevels = [];\n    this.firstLevel = data.firstLevel;\n\n    if (hls.config.capLevelToPlayerSize && data.video) {\n      // Start capping immediately if the manifest has signaled video codecs\n      this.startCapping();\n    }\n  } // Only activate capping when playing a video stream; otherwise, multi-bitrate audio-only streams will be restricted\n  // to the first level\n  ;\n\n  _proto.onBufferCodecs = function onBufferCodecs(event, data) {\n    var hls = this.hls;\n\n    if (hls.config.capLevelToPlayerSize && data.video) {\n      // If the manifest did not signal a video codec capping has been deferred until we're certain video is present\n      this.startCapping();\n    }\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    this.stopCapping();\n  };\n\n  _proto.detectPlayerSize = function detectPlayerSize() {\n    if (this.media && this.mediaHeight > 0 && this.mediaWidth > 0) {\n      var levels = this.hls.levels;\n\n      if (levels.length) {\n        var hls = this.hls;\n        hls.autoLevelCapping = this.getMaxLevel(levels.length - 1);\n\n        if (hls.autoLevelCapping > this.autoLevelCapping && this.streamController) {\n          // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch\n          // usually happen when the user go to the fullscreen mode.\n          this.streamController.nextLevelSwitch();\n        }\n\n        this.autoLevelCapping = hls.autoLevelCapping;\n      }\n    }\n  }\n  /*\n   * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)\n   */\n  ;\n\n  _proto.getMaxLevel = function getMaxLevel(capLevelIndex) {\n    var _this = this;\n\n    var levels = this.hls.levels;\n\n    if (!levels.length) {\n      return -1;\n    }\n\n    var validLevels = levels.filter(function (level, index) {\n      return CapLevelController.isLevelAllowed(index, _this.restrictedLevels) && index <= capLevelIndex;\n    });\n    this.clientRect = null;\n    return CapLevelController.getMaxLevelByMediaSize(validLevels, this.mediaWidth, this.mediaHeight);\n  };\n\n  _proto.startCapping = function startCapping() {\n    if (this.timer) {\n      // Don't reset capping if started twice; this can happen if the manifest signals a video codec\n      return;\n    }\n\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    this.hls.firstLevel = this.getMaxLevel(this.firstLevel);\n    self.clearInterval(this.timer);\n    this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1000);\n    this.detectPlayerSize();\n  };\n\n  _proto.stopCapping = function stopCapping() {\n    this.restrictedLevels = [];\n    this.firstLevel = -1;\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n\n    if (this.timer) {\n      self.clearInterval(this.timer);\n      this.timer = undefined;\n    }\n  };\n\n  _proto.getDimensions = function getDimensions() {\n    if (this.clientRect) {\n      return this.clientRect;\n    }\n\n    var media = this.media;\n    var boundsRect = {\n      width: 0,\n      height: 0\n    };\n\n    if (media) {\n      var clientRect = media.getBoundingClientRect();\n      boundsRect.width = clientRect.width;\n      boundsRect.height = clientRect.height;\n\n      if (!boundsRect.width && !boundsRect.height) {\n        // When the media element has no width or height (equivalent to not being in the DOM),\n        // then use its width and height attributes (media.width, media.height)\n        boundsRect.width = clientRect.right - clientRect.left || media.width || 0;\n        boundsRect.height = clientRect.bottom - clientRect.top || media.height || 0;\n      }\n    }\n\n    this.clientRect = boundsRect;\n    return boundsRect;\n  };\n\n  CapLevelController.isLevelAllowed = function isLevelAllowed(level, restrictedLevels) {\n    if (restrictedLevels === void 0) {\n      restrictedLevels = [];\n    }\n\n    return restrictedLevels.indexOf(level) === -1;\n  };\n\n  CapLevelController.getMaxLevelByMediaSize = function getMaxLevelByMediaSize(levels, width, height) {\n    if (!levels || !levels.length) {\n      return -1;\n    } // Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next\n    // to determine whether we've chosen the greatest bandwidth for the media's dimensions\n\n\n    var atGreatestBandwidth = function atGreatestBandwidth(curLevel, nextLevel) {\n      if (!nextLevel) {\n        return true;\n      }\n\n      return curLevel.width !== nextLevel.width || curLevel.height !== nextLevel.height;\n    }; // If we run through the loop without breaking, the media's dimensions are greater than every level, so default to\n    // the max level\n\n\n    var maxLevelIndex = levels.length - 1;\n\n    for (var i = 0; i < levels.length; i += 1) {\n      var level = levels[i];\n\n      if ((level.width >= width || level.height >= height) && atGreatestBandwidth(level, levels[i + 1])) {\n        maxLevelIndex = i;\n        break;\n      }\n    }\n\n    return maxLevelIndex;\n  };\n\n  _createClass(CapLevelController, [{\n    key: \"mediaWidth\",\n    get: function get() {\n      return this.getDimensions().width * this.contentScaleFactor;\n    }\n  }, {\n    key: \"mediaHeight\",\n    get: function get() {\n      return this.getDimensions().height * this.contentScaleFactor;\n    }\n  }, {\n    key: \"contentScaleFactor\",\n    get: function get() {\n      var pixelRatio = 1;\n\n      if (!this.hls.config.ignoreDevicePixelRatio) {\n        try {\n          pixelRatio = self.devicePixelRatio;\n        } catch (e) {\n          /* no-op */\n        }\n      }\n\n      return pixelRatio;\n    }\n  }]);\n\n  return CapLevelController;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CapLevelController);\n\n/***/ }),\n\n/***/ \"./src/controller/cmcd-controller.ts\":\n/*!*******************************************!*\\\n  !*** ./src/controller/cmcd-controller.ts ***!\n  \\*******************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_218926__) {\n\n\"use strict\";\n__nested_webpack_require_218926__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_218926__.d(__webpack_exports__, \"default\", function() { return CMCDController; });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_218926__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _types_cmcd__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_218926__(/*! ../types/cmcd */ \"./src/types/cmcd.ts\");\n/* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_218926__(/*! ../utils/buffer-helper */ \"./src/utils/buffer-helper.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_218926__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n\n\n\n\n/**\n * Controller to deal with Common Media Client Data (CMCD)\n * @see https://cdn.cta.tech/cta/media/media/resources/standards/pdfs/cta-5004-final.pdf\n */\n\nvar CMCDController = /*#__PURE__*/function () {\n  // eslint-disable-line no-restricted-globals\n  // eslint-disable-line no-restricted-globals\n  function CMCDController(hls) {\n    var _this = this;\n\n    this.hls = void 0;\n    this.config = void 0;\n    this.media = void 0;\n    this.sid = void 0;\n    this.cid = void 0;\n    this.useHeaders = false;\n    this.initialized = false;\n    this.starved = false;\n    this.buffering = true;\n    this.audioBuffer = void 0;\n    this.videoBuffer = void 0;\n\n    this.onWaiting = function () {\n      if (_this.initialized) {\n        _this.starved = true;\n      }\n\n      _this.buffering = true;\n    };\n\n    this.onPlaying = function () {\n      if (!_this.initialized) {\n        _this.initialized = true;\n      }\n\n      _this.buffering = false;\n    };\n\n    this.applyPlaylistData = function (context) {\n      try {\n        _this.apply(context, {\n          ot: _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].MANIFEST,\n          su: !_this.initialized\n        });\n      } catch (error) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn('Could not generate manifest CMCD data.', error);\n      }\n    };\n\n    this.applyFragmentData = function (context) {\n      try {\n        var fragment = context.frag;\n        var level = _this.hls.levels[fragment.level];\n\n        var ot = _this.getObjectType(fragment);\n\n        var data = {\n          d: fragment.duration * 1000,\n          ot: ot\n        };\n\n        if (ot === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].VIDEO || ot === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].AUDIO || ot == _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].MUXED) {\n          data.br = level.bitrate / 1000;\n          data.tb = _this.getTopBandwidth(ot) / 1000;\n          data.bl = _this.getBufferLength(ot);\n        }\n\n        _this.apply(context, data);\n      } catch (error) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn('Could not generate segment CMCD data.', error);\n      }\n    };\n\n    this.hls = hls;\n    var config = this.config = hls.config;\n    var cmcd = config.cmcd;\n\n    if (cmcd != null) {\n      config.pLoader = this.createPlaylistLoader();\n      config.fLoader = this.createFragmentLoader();\n      this.sid = cmcd.sessionId || CMCDController.uuid();\n      this.cid = cmcd.contentId;\n      this.useHeaders = cmcd.useHeaders === true;\n      this.registerListeners();\n    }\n  }\n\n  var _proto = CMCDController.prototype;\n\n  _proto.registerListeners = function registerListeners() {\n    var hls = this.hls;\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_DETACHED, this.onMediaDetached, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].BUFFER_CREATED, this.onBufferCreated, this);\n  };\n\n  _proto.unregisterListeners = function unregisterListeners() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_DETACHED, this.onMediaDetached, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].BUFFER_CREATED, this.onBufferCreated, this);\n    this.onMediaDetached();\n  };\n\n  _proto.destroy = function destroy() {\n    this.unregisterListeners(); // @ts-ignore\n\n    this.hls = this.config = this.audioBuffer = this.videoBuffer = null;\n  };\n\n  _proto.onMediaAttached = function onMediaAttached(event, data) {\n    this.media = data.media;\n    this.media.addEventListener('waiting', this.onWaiting);\n    this.media.addEventListener('playing', this.onPlaying);\n  };\n\n  _proto.onMediaDetached = function onMediaDetached() {\n    if (!this.media) {\n      return;\n    }\n\n    this.media.removeEventListener('waiting', this.onWaiting);\n    this.media.removeEventListener('playing', this.onPlaying); // @ts-ignore\n\n    this.media = null;\n  };\n\n  _proto.onBufferCreated = function onBufferCreated(event, data) {\n    var _data$tracks$audio, _data$tracks$video;\n\n    this.audioBuffer = (_data$tracks$audio = data.tracks.audio) === null || _data$tracks$audio === void 0 ? void 0 : _data$tracks$audio.buffer;\n    this.videoBuffer = (_data$tracks$video = data.tracks.video) === null || _data$tracks$video === void 0 ? void 0 : _data$tracks$video.buffer;\n  };\n\n  /**\n   * Create baseline CMCD data\n   */\n  _proto.createData = function createData() {\n    var _this$media;\n\n    return {\n      v: _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDVersion\"],\n      sf: _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDStreamingFormat\"].HLS,\n      sid: this.sid,\n      cid: this.cid,\n      pr: (_this$media = this.media) === null || _this$media === void 0 ? void 0 : _this$media.playbackRate,\n      mtp: this.hls.bandwidthEstimate / 1000\n    };\n  }\n  /**\n   * Apply CMCD data to a request.\n   */\n  ;\n\n  _proto.apply = function apply(context, data) {\n    if (data === void 0) {\n      data = {};\n    }\n\n    // apply baseline data\n    _extends(data, this.createData());\n\n    var isVideo = data.ot === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].INIT || data.ot === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].VIDEO || data.ot === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].MUXED;\n\n    if (this.starved && isVideo) {\n      data.bs = true;\n      data.su = true;\n      this.starved = false;\n    }\n\n    if (data.su == null) {\n      data.su = this.buffering;\n    } // TODO: Implement rtp, nrr, nor, dl\n\n\n    if (this.useHeaders) {\n      var headers = CMCDController.toHeaders(data);\n\n      if (!Object.keys(headers).length) {\n        return;\n      }\n\n      if (!context.headers) {\n        context.headers = {};\n      }\n\n      _extends(context.headers, headers);\n    } else {\n      var query = CMCDController.toQuery(data);\n\n      if (!query) {\n        return;\n      }\n\n      context.url = CMCDController.appendQueryToUri(context.url, query);\n    }\n  }\n  /**\n   * Apply CMCD data to a manifest request.\n   */\n  ;\n\n  /**\n   * The CMCD object type.\n   */\n  _proto.getObjectType = function getObjectType(fragment) {\n    var type = fragment.type;\n\n    if (type === 'subtitle') {\n      return _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].TIMED_TEXT;\n    }\n\n    if (fragment.sn === 'initSegment') {\n      return _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].INIT;\n    }\n\n    if (type === 'audio') {\n      return _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].AUDIO;\n    }\n\n    if (type === 'main') {\n      if (!this.hls.audioTracks.length) {\n        return _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].MUXED;\n      }\n\n      return _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].VIDEO;\n    }\n\n    return undefined;\n  }\n  /**\n   * Get the highest bitrate.\n   */\n  ;\n\n  _proto.getTopBandwidth = function getTopBandwidth(type) {\n    var bitrate = 0;\n    var levels;\n    var hls = this.hls;\n\n    if (type === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].AUDIO) {\n      levels = hls.audioTracks;\n    } else {\n      var max = hls.maxAutoLevel;\n      var len = max > -1 ? max + 1 : hls.levels.length;\n      levels = hls.levels.slice(0, len);\n    }\n\n    for (var _iterator = _createForOfIteratorHelperLoose(levels), _step; !(_step = _iterator()).done;) {\n      var level = _step.value;\n\n      if (level.bitrate > bitrate) {\n        bitrate = level.bitrate;\n      }\n    }\n\n    return bitrate > 0 ? bitrate : NaN;\n  }\n  /**\n   * Get the buffer length for a media type in milliseconds\n   */\n  ;\n\n  _proto.getBufferLength = function getBufferLength(type) {\n    var media = this.hls.media;\n    var buffer = type === _types_cmcd__WEBPACK_IMPORTED_MODULE_1__[\"CMCDObjectType\"].AUDIO ? this.audioBuffer : this.videoBuffer;\n\n    if (!buffer || !media) {\n      return NaN;\n    }\n\n    var info = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_2__[\"BufferHelper\"].bufferInfo(buffer, media.currentTime, this.config.maxBufferHole);\n    return info.len * 1000;\n  }\n  /**\n   * Create a playlist loader\n   */\n  ;\n\n  _proto.createPlaylistLoader = function createPlaylistLoader() {\n    var pLoader = this.config.pLoader;\n    var apply = this.applyPlaylistData;\n    var Ctor = pLoader || this.config.loader;\n    return /*#__PURE__*/function () {\n      function CmcdPlaylistLoader(config) {\n        this.loader = void 0;\n        this.loader = new Ctor(config);\n      }\n\n      var _proto2 = CmcdPlaylistLoader.prototype;\n\n      _proto2.destroy = function destroy() {\n        this.loader.destroy();\n      };\n\n      _proto2.abort = function abort() {\n        this.loader.abort();\n      };\n\n      _proto2.load = function load(context, config, callbacks) {\n        apply(context);\n        this.loader.load(context, config, callbacks);\n      };\n\n      _createClass(CmcdPlaylistLoader, [{\n        key: \"stats\",\n        get: function get() {\n          return this.loader.stats;\n        }\n      }, {\n        key: \"context\",\n        get: function get() {\n          return this.loader.context;\n        }\n      }]);\n\n      return CmcdPlaylistLoader;\n    }();\n  }\n  /**\n   * Create a playlist loader\n   */\n  ;\n\n  _proto.createFragmentLoader = function createFragmentLoader() {\n    var fLoader = this.config.fLoader;\n    var apply = this.applyFragmentData;\n    var Ctor = fLoader || this.config.loader;\n    return /*#__PURE__*/function () {\n      function CmcdFragmentLoader(config) {\n        this.loader = void 0;\n        this.loader = new Ctor(config);\n      }\n\n      var _proto3 = CmcdFragmentLoader.prototype;\n\n      _proto3.destroy = function destroy() {\n        this.loader.destroy();\n      };\n\n      _proto3.abort = function abort() {\n        this.loader.abort();\n      };\n\n      _proto3.load = function load(context, config, callbacks) {\n        apply(context);\n        this.loader.load(context, config, callbacks);\n      };\n\n      _createClass(CmcdFragmentLoader, [{\n        key: \"stats\",\n        get: function get() {\n          return this.loader.stats;\n        }\n      }, {\n        key: \"context\",\n        get: function get() {\n          return this.loader.context;\n        }\n      }]);\n\n      return CmcdFragmentLoader;\n    }();\n  }\n  /**\n   * Generate a random v4 UUI\n   *\n   * @returns {string}\n   */\n  ;\n\n  CMCDController.uuid = function uuid() {\n    var url = URL.createObjectURL(new Blob());\n    var uuid = url.toString();\n    URL.revokeObjectURL(url);\n    return uuid.slice(uuid.lastIndexOf('/') + 1);\n  }\n  /**\n   * Serialize a CMCD data object according to the rules defined in the\n   * section 3.2 of\n   * [CTA-5004](https://cdn.cta.tech/cta/media/media/resources/standards/pdfs/cta-5004-final.pdf).\n   */\n  ;\n\n  CMCDController.serialize = function serialize(data) {\n    var results = [];\n\n    var isValid = function isValid(value) {\n      return !Number.isNaN(value) && value != null && value !== '' && value !== false;\n    };\n\n    var toRounded = function toRounded(value) {\n      return Math.round(value);\n    };\n\n    var toHundred = function toHundred(value) {\n      return toRounded(value / 100) * 100;\n    };\n\n    var toUrlSafe = function toUrlSafe(value) {\n      return encodeURIComponent(value);\n    };\n\n    var formatters = {\n      br: toRounded,\n      d: toRounded,\n      bl: toHundred,\n      dl: toHundred,\n      mtp: toHundred,\n      nor: toUrlSafe,\n      rtp: toHundred,\n      tb: toRounded\n    };\n    var keys = Object.keys(data || {}).sort();\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(keys), _step2; !(_step2 = _iterator2()).done;) {\n      var key = _step2.value;\n      var value = data[key]; // ignore invalid values\n\n      if (!isValid(value)) {\n        continue;\n      } // Version should only be reported if not equal to 1.\n\n\n      if (key === 'v' && value === 1) {\n        continue;\n      } // Playback rate should only be sent if not equal to 1.\n\n\n      if (key == 'pr' && value === 1) {\n        continue;\n      } // Certain values require special formatting\n\n\n      var formatter = formatters[key];\n\n      if (formatter) {\n        value = formatter(value);\n      } // Serialize the key/value pair\n\n\n      var type = typeof value;\n      var result = void 0;\n\n      if (key === 'ot' || key === 'sf' || key === 'st') {\n        result = key + \"=\" + value;\n      } else if (type === 'boolean') {\n        result = key;\n      } else if (type === 'number') {\n        result = key + \"=\" + value;\n      } else {\n        result = key + \"=\" + JSON.stringify(value);\n      }\n\n      results.push(result);\n    }\n\n    return results.join(',');\n  }\n  /**\n   * Convert a CMCD data object to request headers according to the rules\n   * defined in the section 2.1 and 3.2 of\n   * [CTA-5004](https://cdn.cta.tech/cta/media/media/resources/standards/pdfs/cta-5004-final.pdf).\n   */\n  ;\n\n  CMCDController.toHeaders = function toHeaders(data) {\n    var keys = Object.keys(data);\n    var headers = {};\n    var headerNames = ['Object', 'Request', 'Session', 'Status'];\n    var headerGroups = [{}, {}, {}, {}];\n    var headerMap = {\n      br: 0,\n      d: 0,\n      ot: 0,\n      tb: 0,\n      bl: 1,\n      dl: 1,\n      mtp: 1,\n      nor: 1,\n      nrr: 1,\n      su: 1,\n      cid: 2,\n      pr: 2,\n      sf: 2,\n      sid: 2,\n      st: 2,\n      v: 2,\n      bs: 3,\n      rtp: 3\n    };\n\n    for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n      var key = _keys[_i];\n      // Unmapped fields are mapped to the Request header\n      var index = headerMap[key] != null ? headerMap[key] : 1;\n      headerGroups[index][key] = data[key];\n    }\n\n    for (var i = 0; i < headerGroups.length; i++) {\n      var value = CMCDController.serialize(headerGroups[i]);\n\n      if (value) {\n        headers[\"CMCD-\" + headerNames[i]] = value;\n      }\n    }\n\n    return headers;\n  }\n  /**\n   * Convert a CMCD data object to query args according to the rules\n   * defined in the section 2.2 and 3.2 of\n   * [CTA-5004](https://cdn.cta.tech/cta/media/media/resources/standards/pdfs/cta-5004-final.pdf).\n   */\n  ;\n\n  CMCDController.toQuery = function toQuery(data) {\n    return \"CMCD=\" + encodeURIComponent(CMCDController.serialize(data));\n  }\n  /**\n   * Append query args to a uri.\n   */\n  ;\n\n  CMCDController.appendQueryToUri = function appendQueryToUri(uri, query) {\n    if (!query) {\n      return uri;\n    }\n\n    var separator = uri.includes('?') ? '&' : '?';\n    return \"\" + uri + separator + query;\n  };\n\n  return CMCDController;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/controller/eme-controller.ts\":\n/*!******************************************!*\\\n  !*** ./src/controller/eme-controller.ts ***!\n  \\******************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_236705__) {\n\n\"use strict\";\n__nested_webpack_require_236705__.r(__webpack_exports__);\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_236705__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_236705__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_236705__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_236705__(/*! ../utils/mediakeys-helper */ \"./src/utils/mediakeys-helper.ts\");\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n/**\n * @author Stephan Hesse <disparat@gmail.com> | <tchakabam@gmail.com>\n *\n * DRM support for Hls.js\n */\n\n\n\n\nvar MAX_LICENSE_REQUEST_FAILURES = 3;\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration\n * @param {Array<string>} audioCodecs List of required audio codecs to support\n * @param {Array<string>} videoCodecs List of required video codecs to support\n * @param {object} drmSystemOptions Optional parameters/requirements for the key-system\n * @returns {Array<MediaSystemConfiguration>} An array of supported configurations\n */\n\nvar createWidevineMediaKeySystemConfigurations = function createWidevineMediaKeySystemConfigurations(audioCodecs, videoCodecs, drmSystemOptions) {\n  /* jshint ignore:line */\n  var baseConfig = {\n    // initDataTypes: ['keyids', 'mp4'],\n    // label: \"\",\n    // persistentState: \"not-allowed\", // or \"required\" ?\n    // distinctiveIdentifier: \"not-allowed\", // or \"required\" ?\n    // sessionTypes: ['temporary'],\n    audioCapabilities: [],\n    // { contentType: 'audio/mp4; codecs=\"mp4a.40.2\"' }\n    videoCapabilities: [] // { contentType: 'video/mp4; codecs=\"avc1.42E01E\"' }\n\n  };\n  audioCodecs.forEach(function (codec) {\n    baseConfig.audioCapabilities.push({\n      contentType: \"audio/mp4; codecs=\\\"\" + codec + \"\\\"\",\n      robustness: drmSystemOptions.audioRobustness || ''\n    });\n  });\n  videoCodecs.forEach(function (codec) {\n    baseConfig.videoCapabilities.push({\n      contentType: \"video/mp4; codecs=\\\"\" + codec + \"\\\"\",\n      robustness: drmSystemOptions.videoRobustness || ''\n    });\n  });\n  return [baseConfig];\n};\n/**\n * The idea here is to handle key-system (and their respective platforms) specific configuration differences\n * in order to work with the local requestMediaKeySystemAccess method.\n *\n * We can also rule-out platform-related key-system support at this point by throwing an error.\n *\n * @param {string} keySystem Identifier for the key-system, see `KeySystems` enum\n * @param {Array<string>} audioCodecs List of required audio codecs to support\n * @param {Array<string>} videoCodecs List of required video codecs to support\n * @throws will throw an error if a unknown key system is passed\n * @returns {Array<MediaSystemConfiguration>} A non-empty Array of MediaKeySystemConfiguration objects\n */\n\n\nvar getSupportedMediaKeySystemConfigurations = function getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs, drmSystemOptions) {\n  switch (keySystem) {\n    case _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__[\"KeySystems\"].WIDEVINE:\n      return createWidevineMediaKeySystemConfigurations(audioCodecs, videoCodecs, drmSystemOptions);\n\n    default:\n      throw new Error(\"Unknown key-system: \" + keySystem);\n  }\n};\n\n/**\n * Controller to deal with encrypted media extensions (EME)\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Encrypted_Media_Extensions_API\n *\n * @class\n * @constructor\n */\nvar EMEController = /*#__PURE__*/function () {\n  /**\n   * @constructs\n   * @param {Hls} hls Our Hls.js instance\n   */\n  function EMEController(hls) {\n    this.hls = void 0;\n    this._widevineLicenseUrl = void 0;\n    this._licenseXhrSetup = void 0;\n    this._licenseResponseCallback = void 0;\n    this._emeEnabled = void 0;\n    this._requestMediaKeySystemAccess = void 0;\n    this._drmSystemOptions = void 0;\n    this._config = void 0;\n    this._mediaKeysList = [];\n    this._media = null;\n    this._hasSetMediaKeys = false;\n    this._requestLicenseFailureCount = 0;\n    this.mediaKeysPromise = null;\n    this._onMediaEncrypted = this.onMediaEncrypted.bind(this);\n    this.hls = hls;\n    this._config = hls.config;\n    this._widevineLicenseUrl = this._config.widevineLicenseUrl;\n    this._licenseXhrSetup = this._config.licenseXhrSetup;\n    this._licenseResponseCallback = this._config.licenseResponseCallback;\n    this._emeEnabled = this._config.emeEnabled;\n    this._requestMediaKeySystemAccess = this._config.requestMediaKeySystemAccessFunc;\n    this._drmSystemOptions = this._config.drmSystemOptions;\n\n    this._registerListeners();\n  }\n\n  var _proto = EMEController.prototype;\n\n  _proto.destroy = function destroy() {\n    this._unregisterListeners(); // @ts-ignore\n\n\n    this.hls = this._onMediaEncrypted = null;\n    this._requestMediaKeySystemAccess = null;\n  };\n\n  _proto._registerListeners = function _registerListeners() {\n    this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_DETACHED, this.onMediaDetached, this);\n    this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_PARSED, this.onManifestParsed, this);\n  };\n\n  _proto._unregisterListeners = function _unregisterListeners() {\n    this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_DETACHED, this.onMediaDetached, this);\n    this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_PARSED, this.onManifestParsed, this);\n  }\n  /**\n   * @param {string} keySystem Identifier for the key-system, see `KeySystems` enum\n   * @returns {string} License server URL for key-system (if any configured, otherwise causes error)\n   * @throws if a unsupported keysystem is passed\n   */\n  ;\n\n  _proto.getLicenseServerUrl = function getLicenseServerUrl(keySystem) {\n    switch (keySystem) {\n      case _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__[\"KeySystems\"].WIDEVINE:\n        if (!this._widevineLicenseUrl) {\n          break;\n        }\n\n        return this._widevineLicenseUrl;\n    }\n\n    throw new Error(\"no license server URL configured for key-system \\\"\" + keySystem + \"\\\"\");\n  }\n  /**\n   * Requests access object and adds it to our list upon success\n   * @private\n   * @param {string} keySystem System ID (see `KeySystems`)\n   * @param {Array<string>} audioCodecs List of required audio codecs to support\n   * @param {Array<string>} videoCodecs List of required video codecs to support\n   * @throws When a unsupported KeySystem is passed\n   */\n  ;\n\n  _proto._attemptKeySystemAccess = function _attemptKeySystemAccess(keySystem, audioCodecs, videoCodecs) {\n    var _this = this;\n\n    // This can throw, but is caught in event handler callpath\n    var mediaKeySystemConfigs = getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs, this._drmSystemOptions);\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log('Requesting encrypted media key-system access'); // expecting interface like window.navigator.requestMediaKeySystemAccess\n\n    var keySystemAccessPromise = this.requestMediaKeySystemAccess(keySystem, mediaKeySystemConfigs);\n    this.mediaKeysPromise = keySystemAccessPromise.then(function (mediaKeySystemAccess) {\n      return _this._onMediaKeySystemAccessObtained(keySystem, mediaKeySystemAccess);\n    });\n    keySystemAccessPromise.catch(function (err) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error(\"Failed to obtain key-system \\\"\" + keySystem + \"\\\" access:\", err);\n    });\n  };\n\n  /**\n   * Handles obtaining access to a key-system\n   * @private\n   * @param {string} keySystem\n   * @param {MediaKeySystemAccess} mediaKeySystemAccess https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess\n   */\n  _proto._onMediaKeySystemAccessObtained = function _onMediaKeySystemAccessObtained(keySystem, mediaKeySystemAccess) {\n    var _this2 = this;\n\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"Access for key-system \\\"\" + keySystem + \"\\\" obtained\");\n    var mediaKeysListItem = {\n      mediaKeysSessionInitialized: false,\n      mediaKeySystemAccess: mediaKeySystemAccess,\n      mediaKeySystemDomain: keySystem\n    };\n\n    this._mediaKeysList.push(mediaKeysListItem);\n\n    var mediaKeysPromise = Promise.resolve().then(function () {\n      return mediaKeySystemAccess.createMediaKeys();\n    }).then(function (mediaKeys) {\n      mediaKeysListItem.mediaKeys = mediaKeys;\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"Media-keys created for key-system \\\"\" + keySystem + \"\\\"\");\n\n      _this2._onMediaKeysCreated();\n\n      return mediaKeys;\n    });\n    mediaKeysPromise.catch(function (err) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error('Failed to create media-keys:', err);\n    });\n    return mediaKeysPromise;\n  }\n  /**\n   * Handles key-creation (represents access to CDM). We are going to create key-sessions upon this\n   * for all existing keys where no session exists yet.\n   *\n   * @private\n   */\n  ;\n\n  _proto._onMediaKeysCreated = function _onMediaKeysCreated() {\n    var _this3 = this;\n\n    // check for all key-list items if a session exists, otherwise, create one\n    this._mediaKeysList.forEach(function (mediaKeysListItem) {\n      if (!mediaKeysListItem.mediaKeysSession) {\n        // mediaKeys is definitely initialized here\n        mediaKeysListItem.mediaKeysSession = mediaKeysListItem.mediaKeys.createSession();\n\n        _this3._onNewMediaKeySession(mediaKeysListItem.mediaKeysSession);\n      }\n    });\n  }\n  /**\n   * @private\n   * @param {*} keySession\n   */\n  ;\n\n  _proto._onNewMediaKeySession = function _onNewMediaKeySession(keySession) {\n    var _this4 = this;\n\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"New key-system session \" + keySession.sessionId);\n    keySession.addEventListener('message', function (event) {\n      _this4._onKeySessionMessage(keySession, event.message);\n    }, false);\n  }\n  /**\n   * @private\n   * @param {MediaKeySession} keySession\n   * @param {ArrayBuffer} message\n   */\n  ;\n\n  _proto._onKeySessionMessage = function _onKeySessionMessage(keySession, message) {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log('Got EME message event, creating license request');\n\n    this._requestLicense(message, function (data) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"Received license data (length: \" + (data ? data.byteLength : data) + \"), updating key-session\");\n      keySession.update(data).catch(function (err) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn(\"Updating key-session failed: \" + err);\n      });\n    });\n  }\n  /**\n   * @private\n   * @param e {MediaEncryptedEvent}\n   */\n  ;\n\n  _proto.onMediaEncrypted = function onMediaEncrypted(e) {\n    var _this5 = this;\n\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"Media is encrypted using \\\"\" + e.initDataType + \"\\\" init data type\");\n\n    if (!this.mediaKeysPromise) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error('Fatal: Media is encrypted but no CDM access or no keys have been requested');\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].KEY_SYSTEM_NO_KEYS,\n        fatal: true\n      });\n      return;\n    }\n\n    var finallySetKeyAndStartSession = function finallySetKeyAndStartSession(mediaKeys) {\n      if (!_this5._media) {\n        return;\n      }\n\n      _this5._attemptSetMediaKeys(mediaKeys);\n\n      _this5._generateRequestWithPreferredKeySession(e.initDataType, e.initData);\n    }; // Could use `Promise.finally` but some Promise polyfills are missing it\n\n\n    this.mediaKeysPromise.then(finallySetKeyAndStartSession).catch(finallySetKeyAndStartSession);\n  }\n  /**\n   * @private\n   */\n  ;\n\n  _proto._attemptSetMediaKeys = function _attemptSetMediaKeys(mediaKeys) {\n    if (!this._media) {\n      throw new Error('Attempted to set mediaKeys without first attaching a media element');\n    }\n\n    if (!this._hasSetMediaKeys) {\n      // FIXME: see if we can/want/need-to really to deal with several potential key-sessions?\n      var keysListItem = this._mediaKeysList[0];\n\n      if (!keysListItem || !keysListItem.mediaKeys) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error('Fatal: Media is encrypted but no CDM access or no keys have been obtained yet');\n        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, {\n          type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n          details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].KEY_SYSTEM_NO_KEYS,\n          fatal: true\n        });\n        return;\n      }\n\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log('Setting keys for encrypted media');\n\n      this._media.setMediaKeys(keysListItem.mediaKeys);\n\n      this._hasSetMediaKeys = true;\n    }\n  }\n  /**\n   * @private\n   */\n  ;\n\n  _proto._generateRequestWithPreferredKeySession = function _generateRequestWithPreferredKeySession(initDataType, initData) {\n    var _this6 = this;\n\n    // FIXME: see if we can/want/need-to really to deal with several potential key-sessions?\n    var keysListItem = this._mediaKeysList[0];\n\n    if (!keysListItem) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error('Fatal: Media is encrypted but not any key-system access has been obtained yet');\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].KEY_SYSTEM_NO_ACCESS,\n        fatal: true\n      });\n      return;\n    }\n\n    if (keysListItem.mediaKeysSessionInitialized) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn('Key-Session already initialized but requested again');\n      return;\n    }\n\n    var keySession = keysListItem.mediaKeysSession;\n\n    if (!keySession) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error('Fatal: Media is encrypted but no key-session existing');\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].KEY_SYSTEM_NO_SESSION,\n        fatal: true\n      });\n      return;\n    } // initData is null if the media is not CORS-same-origin\n\n\n    if (!initData) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn('Fatal: initData required for generating a key session is null');\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].KEY_SYSTEM_NO_INIT_DATA,\n        fatal: true\n      });\n      return;\n    }\n\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"Generating key-session request for \\\"\" + initDataType + \"\\\" init data type\");\n    keysListItem.mediaKeysSessionInitialized = true;\n    keySession.generateRequest(initDataType, initData).then(function () {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].debug('Key-session generation succeeded');\n    }).catch(function (err) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error('Error generating key-session request:', err);\n\n      _this6.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].KEY_SYSTEM_NO_SESSION,\n        fatal: false\n      });\n    });\n  }\n  /**\n   * @private\n   * @param {string} url License server URL\n   * @param {ArrayBuffer} keyMessage Message data issued by key-system\n   * @param {function} callback Called when XHR has succeeded\n   * @returns {XMLHttpRequest} Unsent (but opened state) XHR object\n   * @throws if XMLHttpRequest construction failed\n   */\n  ;\n\n  _proto._createLicenseXhr = function _createLicenseXhr(url, keyMessage, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = 'arraybuffer';\n    xhr.onreadystatechange = this._onLicenseRequestReadyStageChange.bind(this, xhr, url, keyMessage, callback);\n    var licenseXhrSetup = this._licenseXhrSetup;\n\n    if (licenseXhrSetup) {\n      try {\n        licenseXhrSetup.call(this.hls, xhr, url);\n        licenseXhrSetup = undefined;\n      } catch (e) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error(e);\n      }\n    }\n\n    try {\n      // if licenseXhrSetup did not yet call open, let's do it now\n      if (!xhr.readyState) {\n        xhr.open('POST', url, true);\n      }\n\n      if (licenseXhrSetup) {\n        licenseXhrSetup.call(this.hls, xhr, url);\n      }\n    } catch (e) {\n      // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS\n      throw new Error(\"issue setting up KeySystem license XHR \" + e);\n    }\n\n    return xhr;\n  }\n  /**\n   * @private\n   * @param {XMLHttpRequest} xhr\n   * @param {string} url License server URL\n   * @param {ArrayBuffer} keyMessage Message data issued by key-system\n   * @param {function} callback Called when XHR has succeeded\n   */\n  ;\n\n  _proto._onLicenseRequestReadyStageChange = function _onLicenseRequestReadyStageChange(xhr, url, keyMessage, callback) {\n    switch (xhr.readyState) {\n      case 4:\n        if (xhr.status === 200) {\n          this._requestLicenseFailureCount = 0;\n          _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log('License request succeeded');\n          var _data = xhr.response;\n          var licenseResponseCallback = this._licenseResponseCallback;\n\n          if (licenseResponseCallback) {\n            try {\n              _data = licenseResponseCallback.call(this.hls, xhr, url);\n            } catch (e) {\n              _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error(e);\n            }\n          }\n\n          callback(_data);\n        } else {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error(\"License Request XHR failed (\" + url + \"). Status: \" + xhr.status + \" (\" + xhr.statusText + \")\");\n          this._requestLicenseFailureCount++;\n\n          if (this._requestLicenseFailureCount > MAX_LICENSE_REQUEST_FAILURES) {\n            this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, {\n              type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n              details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].KEY_SYSTEM_LICENSE_REQUEST_FAILED,\n              fatal: true\n            });\n            return;\n          }\n\n          var attemptsLeft = MAX_LICENSE_REQUEST_FAILURES - this._requestLicenseFailureCount + 1;\n          _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn(\"Retrying license request, \" + attemptsLeft + \" attempts left\");\n\n          this._requestLicense(keyMessage, callback);\n        }\n\n        break;\n    }\n  }\n  /**\n   * @private\n   * @param {MediaKeysListItem} keysListItem\n   * @param {ArrayBuffer} keyMessage\n   * @returns {ArrayBuffer} Challenge data posted to license server\n   * @throws if KeySystem is unsupported\n   */\n  ;\n\n  _proto._generateLicenseRequestChallenge = function _generateLicenseRequestChallenge(keysListItem, keyMessage) {\n    switch (keysListItem.mediaKeySystemDomain) {\n      // case KeySystems.PLAYREADY:\n      // from https://github.com/MicrosoftEdge/Demos/blob/master/eme/scripts/demo.js\n\n      /*\n      if (this.licenseType !== this.LICENSE_TYPE_WIDEVINE) {\n        // For PlayReady CDMs, we need to dig the Challenge out of the XML.\n        var keyMessageXml = new DOMParser().parseFromString(String.fromCharCode.apply(null, new Uint16Array(keyMessage)), 'application/xml');\n        if (keyMessageXml.getElementsByTagName('Challenge')[0]) {\n            challenge = atob(keyMessageXml.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue);\n        } else {\n            throw 'Cannot find <Challenge> in key message';\n        }\n        var headerNames = keyMessageXml.getElementsByTagName('name');\n        var headerValues = keyMessageXml.getElementsByTagName('value');\n        if (headerNames.length !== headerValues.length) {\n            throw 'Mismatched header <name>/<value> pair in key message';\n        }\n        for (var i = 0; i < headerNames.length; i++) {\n            xhr.setRequestHeader(headerNames[i].childNodes[0].nodeValue, headerValues[i].childNodes[0].nodeValue);\n        }\n      }\n      break;\n      */\n      case _utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__[\"KeySystems\"].WIDEVINE:\n        // For Widevine CDMs, the challenge is the keyMessage.\n        return keyMessage;\n    }\n\n    throw new Error(\"unsupported key-system: \" + keysListItem.mediaKeySystemDomain);\n  }\n  /**\n   * @private\n   * @param keyMessage\n   * @param callback\n   */\n  ;\n\n  _proto._requestLicense = function _requestLicense(keyMessage, callback) {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log('Requesting content license for key-system');\n    var keysListItem = this._mediaKeysList[0];\n\n    if (!keysListItem) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error('Fatal error: Media is encrypted but no key-system access has been obtained yet');\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].KEY_SYSTEM_NO_ACCESS,\n        fatal: true\n      });\n      return;\n    }\n\n    try {\n      var _url = this.getLicenseServerUrl(keysListItem.mediaKeySystemDomain);\n\n      var _xhr = this._createLicenseXhr(_url, keyMessage, callback);\n\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log(\"Sending license request to URL: \" + _url);\n\n      var challenge = this._generateLicenseRequestChallenge(keysListItem, keyMessage);\n\n      _xhr.send(challenge);\n    } catch (e) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error(\"Failure requesting DRM license: \" + e);\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].KEY_SYSTEM_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].KEY_SYSTEM_LICENSE_REQUEST_FAILED,\n        fatal: true\n      });\n    }\n  };\n\n  _proto.onMediaAttached = function onMediaAttached(event, data) {\n    if (!this._emeEnabled) {\n      return;\n    }\n\n    var media = data.media; // keep reference of media\n\n    this._media = media;\n    media.addEventListener('encrypted', this._onMediaEncrypted);\n  };\n\n  _proto.onMediaDetached = function onMediaDetached() {\n    var media = this._media;\n    var mediaKeysList = this._mediaKeysList;\n\n    if (!media) {\n      return;\n    }\n\n    media.removeEventListener('encrypted', this._onMediaEncrypted);\n    this._media = null;\n    this._mediaKeysList = []; // Close all sessions and remove media keys from the video element.\n\n    Promise.all(mediaKeysList.map(function (mediaKeysListItem) {\n      if (mediaKeysListItem.mediaKeysSession) {\n        return mediaKeysListItem.mediaKeysSession.close().catch(function () {// Ignore errors when closing the sessions. Closing a session that\n          // generated no key requests will throw an error.\n        });\n      }\n    })).then(function () {\n      return media.setMediaKeys(null);\n    }).catch(function () {// Ignore any failures while removing media keys from the video element.\n    });\n  };\n\n  _proto.onManifestParsed = function onManifestParsed(event, data) {\n    if (!this._emeEnabled) {\n      return;\n    }\n\n    var audioCodecs = data.levels.map(function (level) {\n      return level.audioCodec;\n    }).filter(function (audioCodec) {\n      return !!audioCodec;\n    });\n    var videoCodecs = data.levels.map(function (level) {\n      return level.videoCodec;\n    }).filter(function (videoCodec) {\n      return !!videoCodec;\n    });\n\n    this._attemptKeySystemAccess(_utils_mediakeys_helper__WEBPACK_IMPORTED_MODULE_3__[\"KeySystems\"].WIDEVINE, audioCodecs, videoCodecs);\n  };\n\n  _createClass(EMEController, [{\n    key: \"requestMediaKeySystemAccess\",\n    get: function get() {\n      if (!this._requestMediaKeySystemAccess) {\n        throw new Error('No requestMediaKeySystemAccess function configured');\n      }\n\n      return this._requestMediaKeySystemAccess;\n    }\n  }]);\n\n  return EMEController;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (EMEController);\n\n/***/ }),\n\n/***/ \"./src/controller/fps-controller.ts\":\n/*!******************************************!*\\\n  !*** ./src/controller/fps-controller.ts ***!\n  \\******************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_262482__) {\n\n\"use strict\";\n__nested_webpack_require_262482__.r(__webpack_exports__);\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_262482__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_262482__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n\n\n\nvar FPSController = /*#__PURE__*/function () {\n  // stream controller must be provided as a dependency!\n  function FPSController(hls) {\n    this.hls = void 0;\n    this.isVideoPlaybackQualityAvailable = false;\n    this.timer = void 0;\n    this.media = null;\n    this.lastTime = void 0;\n    this.lastDroppedFrames = 0;\n    this.lastDecodedFrames = 0;\n    this.streamController = void 0;\n    this.hls = hls;\n    this.registerListeners();\n  }\n\n  var _proto = FPSController.prototype;\n\n  _proto.setStreamController = function setStreamController(streamController) {\n    this.streamController = streamController;\n  };\n\n  _proto.registerListeners = function registerListeners() {\n    this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_ATTACHING, this.onMediaAttaching, this);\n  };\n\n  _proto.unregisterListeners = function unregisterListeners() {\n    this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_ATTACHING, this.onMediaAttaching);\n  };\n\n  _proto.destroy = function destroy() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n\n    this.unregisterListeners();\n    this.isVideoPlaybackQualityAvailable = false;\n    this.media = null;\n  };\n\n  _proto.onMediaAttaching = function onMediaAttaching(event, data) {\n    var config = this.hls.config;\n\n    if (config.capLevelOnFPSDrop) {\n      var media = data.media instanceof self.HTMLVideoElement ? data.media : null;\n      this.media = media;\n\n      if (media && typeof media.getVideoPlaybackQuality === 'function') {\n        this.isVideoPlaybackQualityAvailable = true;\n      }\n\n      self.clearInterval(this.timer);\n      this.timer = self.setInterval(this.checkFPSInterval.bind(this), config.fpsDroppedMonitoringPeriod);\n    }\n  };\n\n  _proto.checkFPS = function checkFPS(video, decodedFrames, droppedFrames) {\n    var currentTime = performance.now();\n\n    if (decodedFrames) {\n      if (this.lastTime) {\n        var currentPeriod = currentTime - this.lastTime;\n        var currentDropped = droppedFrames - this.lastDroppedFrames;\n        var currentDecoded = decodedFrames - this.lastDecodedFrames;\n        var droppedFPS = 1000 * currentDropped / currentPeriod;\n        var hls = this.hls;\n        hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].FPS_DROP, {\n          currentDropped: currentDropped,\n          currentDecoded: currentDecoded,\n          totalDroppedFrames: droppedFrames\n        });\n\n        if (droppedFPS > 0) {\n          // logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));\n          if (currentDropped > hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {\n            var currentLevel = hls.currentLevel;\n            _utils_logger__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].warn('drop FPS ratio greater than max allowed value for currentLevel: ' + currentLevel);\n\n            if (currentLevel > 0 && (hls.autoLevelCapping === -1 || hls.autoLevelCapping >= currentLevel)) {\n              currentLevel = currentLevel - 1;\n              hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].FPS_DROP_LEVEL_CAPPING, {\n                level: currentLevel,\n                droppedLevel: hls.currentLevel\n              });\n              hls.autoLevelCapping = currentLevel;\n              this.streamController.nextLevelSwitch();\n            }\n          }\n        }\n      }\n\n      this.lastTime = currentTime;\n      this.lastDroppedFrames = droppedFrames;\n      this.lastDecodedFrames = decodedFrames;\n    }\n  };\n\n  _proto.checkFPSInterval = function checkFPSInterval() {\n    var video = this.media;\n\n    if (video) {\n      if (this.isVideoPlaybackQualityAvailable) {\n        var videoPlaybackQuality = video.getVideoPlaybackQuality();\n        this.checkFPS(video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);\n      } else {\n        // HTMLVideoElement doesn't include the webkit types\n        this.checkFPS(video, video.webkitDecodedFrameCount, video.webkitDroppedFrameCount);\n      }\n    }\n  };\n\n  return FPSController;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (FPSController);\n\n/***/ }),\n\n/***/ \"./src/controller/fragment-finders.ts\":\n/*!********************************************!*\\\n  !*** ./src/controller/fragment-finders.ts ***!\n  \\********************************************/\n/*! exports provided: findFragmentByPDT, findFragmentByPTS, fragmentWithinToleranceTest, pdtWithinToleranceTest, findFragWithCC */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_267324__) {\n\n\"use strict\";\n__nested_webpack_require_267324__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_267324__.d(__webpack_exports__, \"findFragmentByPDT\", function() { return findFragmentByPDT; });\n/* harmony export (binding) */ __nested_webpack_require_267324__.d(__webpack_exports__, \"findFragmentByPTS\", function() { return findFragmentByPTS; });\n/* harmony export (binding) */ __nested_webpack_require_267324__.d(__webpack_exports__, \"fragmentWithinToleranceTest\", function() { return fragmentWithinToleranceTest; });\n/* harmony export (binding) */ __nested_webpack_require_267324__.d(__webpack_exports__, \"pdtWithinToleranceTest\", function() { return pdtWithinToleranceTest; });\n/* harmony export (binding) */ __nested_webpack_require_267324__.d(__webpack_exports__, \"findFragWithCC\", function() { return findFragWithCC; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_267324__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _utils_binary_search__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_267324__(/*! ../utils/binary-search */ \"./src/utils/binary-search.ts\");\n\n\n\n/**\n * Returns first fragment whose endPdt value exceeds the given PDT.\n * @param {Array<Fragment>} fragments - The array of candidate fragments\n * @param {number|null} [PDTValue = null] - The PDT value which must be exceeded\n * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start/end can be within in order to be considered contiguous\n * @returns {*|null} fragment - The best matching fragment\n */\nfunction findFragmentByPDT(fragments, PDTValue, maxFragLookUpTolerance) {\n  if (PDTValue === null || !Array.isArray(fragments) || !fragments.length || !Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(PDTValue)) {\n    return null;\n  } // if less than start\n\n\n  var startPDT = fragments[0].programDateTime;\n\n  if (PDTValue < (startPDT || 0)) {\n    return null;\n  }\n\n  var endPDT = fragments[fragments.length - 1].endProgramDateTime;\n\n  if (PDTValue >= (endPDT || 0)) {\n    return null;\n  }\n\n  maxFragLookUpTolerance = maxFragLookUpTolerance || 0;\n\n  for (var seg = 0; seg < fragments.length; ++seg) {\n    var frag = fragments[seg];\n\n    if (pdtWithinToleranceTest(PDTValue, maxFragLookUpTolerance, frag)) {\n      return frag;\n    }\n  }\n\n  return null;\n}\n/**\n * Finds a fragment based on the SN of the previous fragment; or based on the needs of the current buffer.\n * This method compensates for small buffer gaps by applying a tolerance to the start of any candidate fragment, thus\n * breaking any traps which would cause the same fragment to be continuously selected within a small range.\n * @param {*} fragPrevious - The last frag successfully appended\n * @param {Array} fragments - The array of candidate fragments\n * @param {number} [bufferEnd = 0] - The end of the contiguous buffered range the playhead is currently within\n * @param {number} maxFragLookUpTolerance - The amount of time that a fragment's start/end can be within in order to be considered contiguous\n * @returns {*} foundFrag - The best matching fragment\n */\n\nfunction findFragmentByPTS(fragPrevious, fragments, bufferEnd, maxFragLookUpTolerance) {\n  if (bufferEnd === void 0) {\n    bufferEnd = 0;\n  }\n\n  if (maxFragLookUpTolerance === void 0) {\n    maxFragLookUpTolerance = 0;\n  }\n\n  var fragNext = null;\n\n  if (fragPrevious) {\n    fragNext = fragments[fragPrevious.sn - fragments[0].sn + 1] || null;\n  } else if (bufferEnd === 0 && fragments[0].start === 0) {\n    fragNext = fragments[0];\n  } // Prefer the next fragment if it's within tolerance\n\n\n  if (fragNext && fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, fragNext) === 0) {\n    return fragNext;\n  } // We might be seeking past the tolerance so find the best match\n\n\n  var foundFragment = _utils_binary_search__WEBPACK_IMPORTED_MODULE_1__[\"default\"].search(fragments, fragmentWithinToleranceTest.bind(null, bufferEnd, maxFragLookUpTolerance));\n\n  if (foundFragment) {\n    return foundFragment;\n  } // If no match was found return the next fragment after fragPrevious, or null\n\n\n  return fragNext;\n}\n/**\n * The test function used by the findFragmentBySn's BinarySearch to look for the best match to the current buffer conditions.\n * @param {*} candidate - The fragment to test\n * @param {number} [bufferEnd = 0] - The end of the current buffered range the playhead is currently within\n * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous\n * @returns {number} - 0 if it matches, 1 if too low, -1 if too high\n */\n\nfunction fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, candidate) {\n  if (bufferEnd === void 0) {\n    bufferEnd = 0;\n  }\n\n  if (maxFragLookUpTolerance === void 0) {\n    maxFragLookUpTolerance = 0;\n  }\n\n  // offset should be within fragment boundary - config.maxFragLookUpTolerance\n  // this is to cope with situations like\n  // bufferEnd = 9.991\n  // frag[Ø] : [0,10]\n  // frag[1] : [10,20]\n  // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here\n  //              frag start               frag start+duration\n  //                  |-----------------------------|\n  //              <--->                         <--->\n  //  ...--------><-----------------------------><---------....\n  // previous frag         matching fragment         next frag\n  //  return -1             return 0                 return 1\n  // logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);\n  // Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments\n  var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0));\n\n  if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) {\n    return 1;\n  } else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) {\n    // if maxFragLookUpTolerance will have negative value then don't return -1 for first element\n    return -1;\n  }\n\n  return 0;\n}\n/**\n * The test function used by the findFragmentByPdt's BinarySearch to look for the best match to the current buffer conditions.\n * This function tests the candidate's program date time values, as represented in Unix time\n * @param {*} candidate - The fragment to test\n * @param {number} [pdtBufferEnd = 0] - The Unix time representing the end of the current buffered range\n * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous\n * @returns {boolean} True if contiguous, false otherwise\n */\n\nfunction pdtWithinToleranceTest(pdtBufferEnd, maxFragLookUpTolerance, candidate) {\n  var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0)) * 1000; // endProgramDateTime can be null, default to zero\n\n  var endProgramDateTime = candidate.endProgramDateTime || 0;\n  return endProgramDateTime - candidateLookupTolerance > pdtBufferEnd;\n}\nfunction findFragWithCC(fragments, cc) {\n  return _utils_binary_search__WEBPACK_IMPORTED_MODULE_1__[\"default\"].search(fragments, function (candidate) {\n    if (candidate.cc < cc) {\n      return 1;\n    } else if (candidate.cc > cc) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\n\n/***/ }),\n\n/***/ \"./src/controller/fragment-tracker.ts\":\n/*!********************************************!*\\\n  !*** ./src/controller/fragment-tracker.ts ***!\n  \\********************************************/\n/*! exports provided: FragmentState, FragmentTracker */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_275194__) {\n\n\"use strict\";\n__nested_webpack_require_275194__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_275194__.d(__webpack_exports__, \"FragmentState\", function() { return FragmentState; });\n/* harmony export (binding) */ __nested_webpack_require_275194__.d(__webpack_exports__, \"FragmentTracker\", function() { return FragmentTracker; });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_275194__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_275194__(/*! ../types/loader */ \"./src/types/loader.ts\");\n\n\nvar FragmentState;\n\n(function (FragmentState) {\n  FragmentState[\"NOT_LOADED\"] = \"NOT_LOADED\";\n  FragmentState[\"APPENDING\"] = \"APPENDING\";\n  FragmentState[\"PARTIAL\"] = \"PARTIAL\";\n  FragmentState[\"OK\"] = \"OK\";\n})(FragmentState || (FragmentState = {}));\n\nvar FragmentTracker = /*#__PURE__*/function () {\n  function FragmentTracker(hls) {\n    this.activeFragment = null;\n    this.activeParts = null;\n    this.fragments = Object.create(null);\n    this.timeRanges = Object.create(null);\n    this.bufferPadding = 0.2;\n    this.hls = void 0;\n    this.hls = hls;\n\n    this._registerListeners();\n  }\n\n  var _proto = FragmentTracker.prototype;\n\n  _proto._registerListeners = function _registerListeners() {\n    var hls = this.hls;\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].BUFFER_APPENDED, this.onBufferAppended, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].FRAG_BUFFERED, this.onFragBuffered, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].FRAG_LOADED, this.onFragLoaded, this);\n  };\n\n  _proto._unregisterListeners = function _unregisterListeners() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].BUFFER_APPENDED, this.onBufferAppended, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].FRAG_BUFFERED, this.onFragBuffered, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].FRAG_LOADED, this.onFragLoaded, this);\n  };\n\n  _proto.destroy = function destroy() {\n    this._unregisterListeners(); // @ts-ignore\n\n\n    this.fragments = this.timeRanges = null;\n  }\n  /**\n   * Return a Fragment with an appended range that matches the position and levelType.\n   * If not found any Fragment, return null\n   */\n  ;\n\n  _proto.getAppendedFrag = function getAppendedFrag(position, levelType) {\n    if (levelType === _types_loader__WEBPACK_IMPORTED_MODULE_1__[\"PlaylistLevelType\"].MAIN) {\n      var activeFragment = this.activeFragment,\n          activeParts = this.activeParts;\n\n      if (!activeFragment) {\n        return null;\n      }\n\n      if (activeParts) {\n        for (var i = activeParts.length; i--;) {\n          var activePart = activeParts[i];\n          var appendedPTS = activePart ? activePart.end : activeFragment.appendedPTS;\n\n          if (activePart.start <= position && appendedPTS !== undefined && position <= appendedPTS) {\n            // 9 is a magic number. remove parts from lookup after a match but keep some short seeks back.\n            if (i > 9) {\n              this.activeParts = activeParts.slice(i - 9);\n            }\n\n            return activePart;\n          }\n        }\n      } else if (activeFragment.start <= position && activeFragment.appendedPTS !== undefined && position <= activeFragment.appendedPTS) {\n        return activeFragment;\n      }\n    }\n\n    return this.getBufferedFrag(position, levelType);\n  }\n  /**\n   * Return a buffered Fragment that matches the position and levelType.\n   * A buffered Fragment is one whose loading, parsing and appending is done (completed or \"partial\" meaning aborted).\n   * If not found any Fragment, return null\n   */\n  ;\n\n  _proto.getBufferedFrag = function getBufferedFrag(position, levelType) {\n    var fragments = this.fragments;\n    var keys = Object.keys(fragments);\n\n    for (var i = keys.length; i--;) {\n      var fragmentEntity = fragments[keys[i]];\n\n      if ((fragmentEntity === null || fragmentEntity === void 0 ? void 0 : fragmentEntity.body.type) === levelType && fragmentEntity.buffered) {\n        var frag = fragmentEntity.body;\n\n        if (frag.start <= position && position <= frag.end) {\n          return frag;\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Partial fragments effected by coded frame eviction will be removed\n   * The browser will unload parts of the buffer to free up memory for new buffer data\n   * Fragments will need to be reloaded when the buffer is freed up, removing partial fragments will allow them to reload(since there might be parts that are still playable)\n   */\n  ;\n\n  _proto.detectEvictedFragments = function detectEvictedFragments(elementaryStream, timeRange, playlistType) {\n    var _this = this;\n\n    // Check if any flagged fragments have been unloaded\n    Object.keys(this.fragments).forEach(function (key) {\n      var fragmentEntity = _this.fragments[key];\n\n      if (!fragmentEntity) {\n        return;\n      }\n\n      if (!fragmentEntity.buffered) {\n        if (fragmentEntity.body.type === playlistType) {\n          _this.removeFragment(fragmentEntity.body);\n        }\n\n        return;\n      }\n\n      var esData = fragmentEntity.range[elementaryStream];\n\n      if (!esData) {\n        return;\n      }\n\n      esData.time.some(function (time) {\n        var isNotBuffered = !_this.isTimeBuffered(time.startPTS, time.endPTS, timeRange);\n\n        if (isNotBuffered) {\n          // Unregister partial fragment as it needs to load again to be reused\n          _this.removeFragment(fragmentEntity.body);\n        }\n\n        return isNotBuffered;\n      });\n    });\n  }\n  /**\n   * Checks if the fragment passed in is loaded in the buffer properly\n   * Partially loaded fragments will be registered as a partial fragment\n   */\n  ;\n\n  _proto.detectPartialFragments = function detectPartialFragments(data) {\n    var _this2 = this;\n\n    var timeRanges = this.timeRanges;\n    var frag = data.frag,\n        part = data.part;\n\n    if (!timeRanges || frag.sn === 'initSegment') {\n      return;\n    }\n\n    var fragKey = getFragmentKey(frag);\n    var fragmentEntity = this.fragments[fragKey];\n\n    if (!fragmentEntity) {\n      return;\n    }\n\n    Object.keys(timeRanges).forEach(function (elementaryStream) {\n      var streamInfo = frag.elementaryStreams[elementaryStream];\n\n      if (!streamInfo) {\n        return;\n      }\n\n      var timeRange = timeRanges[elementaryStream];\n      var partial = part !== null || streamInfo.partial === true;\n      fragmentEntity.range[elementaryStream] = _this2.getBufferedTimes(frag, part, partial, timeRange);\n    });\n    fragmentEntity.loaded = null;\n\n    if (Object.keys(fragmentEntity.range).length) {\n      fragmentEntity.buffered = true;\n    } else {\n      // remove fragment if nothing was appended\n      this.removeFragment(fragmentEntity.body);\n    }\n  };\n\n  _proto.fragBuffered = function fragBuffered(frag) {\n    var fragKey = getFragmentKey(frag);\n    var fragmentEntity = this.fragments[fragKey];\n\n    if (fragmentEntity) {\n      fragmentEntity.loaded = null;\n      fragmentEntity.buffered = true;\n    }\n  };\n\n  _proto.getBufferedTimes = function getBufferedTimes(fragment, part, partial, timeRange) {\n    var buffered = {\n      time: [],\n      partial: partial\n    };\n    var startPTS = part ? part.start : fragment.start;\n    var endPTS = part ? part.end : fragment.end;\n    var minEndPTS = fragment.minEndPTS || endPTS;\n    var maxStartPTS = fragment.maxStartPTS || startPTS;\n\n    for (var i = 0; i < timeRange.length; i++) {\n      var startTime = timeRange.start(i) - this.bufferPadding;\n      var endTime = timeRange.end(i) + this.bufferPadding;\n\n      if (maxStartPTS >= startTime && minEndPTS <= endTime) {\n        // Fragment is entirely contained in buffer\n        // No need to check the other timeRange times since it's completely playable\n        buffered.time.push({\n          startPTS: Math.max(startPTS, timeRange.start(i)),\n          endPTS: Math.min(endPTS, timeRange.end(i))\n        });\n        break;\n      } else if (startPTS < endTime && endPTS > startTime) {\n        buffered.partial = true; // Check for intersection with buffer\n        // Get playable sections of the fragment\n\n        buffered.time.push({\n          startPTS: Math.max(startPTS, timeRange.start(i)),\n          endPTS: Math.min(endPTS, timeRange.end(i))\n        });\n      } else if (endPTS <= startTime) {\n        // No need to check the rest of the timeRange as it is in order\n        break;\n      }\n    }\n\n    return buffered;\n  }\n  /**\n   * Gets the partial fragment for a certain time\n   */\n  ;\n\n  _proto.getPartialFragment = function getPartialFragment(time) {\n    var bestFragment = null;\n    var timePadding;\n    var startTime;\n    var endTime;\n    var bestOverlap = 0;\n    var bufferPadding = this.bufferPadding,\n        fragments = this.fragments;\n    Object.keys(fragments).forEach(function (key) {\n      var fragmentEntity = fragments[key];\n\n      if (!fragmentEntity) {\n        return;\n      }\n\n      if (isPartial(fragmentEntity)) {\n        startTime = fragmentEntity.body.start - bufferPadding;\n        endTime = fragmentEntity.body.end + bufferPadding;\n\n        if (time >= startTime && time <= endTime) {\n          // Use the fragment that has the most padding from start and end time\n          timePadding = Math.min(time - startTime, endTime - time);\n\n          if (bestOverlap <= timePadding) {\n            bestFragment = fragmentEntity.body;\n            bestOverlap = timePadding;\n          }\n        }\n      }\n    });\n    return bestFragment;\n  };\n\n  _proto.getState = function getState(fragment) {\n    var fragKey = getFragmentKey(fragment);\n    var fragmentEntity = this.fragments[fragKey];\n\n    if (fragmentEntity) {\n      if (!fragmentEntity.buffered) {\n        return FragmentState.APPENDING;\n      } else if (isPartial(fragmentEntity)) {\n        return FragmentState.PARTIAL;\n      } else {\n        return FragmentState.OK;\n      }\n    }\n\n    return FragmentState.NOT_LOADED;\n  };\n\n  _proto.isTimeBuffered = function isTimeBuffered(startPTS, endPTS, timeRange) {\n    var startTime;\n    var endTime;\n\n    for (var i = 0; i < timeRange.length; i++) {\n      startTime = timeRange.start(i) - this.bufferPadding;\n      endTime = timeRange.end(i) + this.bufferPadding;\n\n      if (startPTS >= startTime && endPTS <= endTime) {\n        return true;\n      }\n\n      if (endPTS <= startTime) {\n        // No need to check the rest of the timeRange as it is in order\n        return false;\n      }\n    }\n\n    return false;\n  };\n\n  _proto.onFragLoaded = function onFragLoaded(event, data) {\n    var frag = data.frag,\n        part = data.part; // don't track initsegment (for which sn is not a number)\n    // don't track frags used for bitrateTest, they're irrelevant.\n    // don't track parts for memory efficiency\n\n    if (frag.sn === 'initSegment' || frag.bitrateTest || part) {\n      return;\n    }\n\n    var fragKey = getFragmentKey(frag);\n    this.fragments[fragKey] = {\n      body: frag,\n      loaded: data,\n      buffered: false,\n      range: Object.create(null)\n    };\n  };\n\n  _proto.onBufferAppended = function onBufferAppended(event, data) {\n    var _this3 = this;\n\n    var frag = data.frag,\n        part = data.part,\n        timeRanges = data.timeRanges;\n\n    if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_1__[\"PlaylistLevelType\"].MAIN) {\n      this.activeFragment = frag;\n\n      if (part) {\n        var activeParts = this.activeParts;\n\n        if (!activeParts) {\n          this.activeParts = activeParts = [];\n        }\n\n        activeParts.push(part);\n      } else {\n        this.activeParts = null;\n      }\n    } // Store the latest timeRanges loaded in the buffer\n\n\n    this.timeRanges = timeRanges;\n    Object.keys(timeRanges).forEach(function (elementaryStream) {\n      var timeRange = timeRanges[elementaryStream];\n\n      _this3.detectEvictedFragments(elementaryStream, timeRange);\n\n      if (!part) {\n        for (var i = 0; i < timeRange.length; i++) {\n          frag.appendedPTS = Math.max(timeRange.end(i), frag.appendedPTS || 0);\n        }\n      }\n    });\n  };\n\n  _proto.onFragBuffered = function onFragBuffered(event, data) {\n    this.detectPartialFragments(data);\n  };\n\n  _proto.hasFragment = function hasFragment(fragment) {\n    var fragKey = getFragmentKey(fragment);\n    return !!this.fragments[fragKey];\n  };\n\n  _proto.removeFragmentsInRange = function removeFragmentsInRange(start, end, playlistType) {\n    var _this4 = this;\n\n    Object.keys(this.fragments).forEach(function (key) {\n      var fragmentEntity = _this4.fragments[key];\n\n      if (!fragmentEntity) {\n        return;\n      }\n\n      if (fragmentEntity.buffered) {\n        var frag = fragmentEntity.body;\n\n        if (frag.type === playlistType && frag.start < end && frag.end > start) {\n          _this4.removeFragment(frag);\n        }\n      }\n    });\n  };\n\n  _proto.removeFragment = function removeFragment(fragment) {\n    var fragKey = getFragmentKey(fragment);\n    fragment.stats.loaded = 0;\n    fragment.clearElementaryStreamInfo();\n    delete this.fragments[fragKey];\n  };\n\n  _proto.removeAllFragments = function removeAllFragments() {\n    this.fragments = Object.create(null);\n    this.activeFragment = null;\n    this.activeParts = null;\n  };\n\n  return FragmentTracker;\n}();\n\nfunction isPartial(fragmentEntity) {\n  var _fragmentEntity$range, _fragmentEntity$range2;\n\n  return fragmentEntity.buffered && (((_fragmentEntity$range = fragmentEntity.range.video) === null || _fragmentEntity$range === void 0 ? void 0 : _fragmentEntity$range.partial) || ((_fragmentEntity$range2 = fragmentEntity.range.audio) === null || _fragmentEntity$range2 === void 0 ? void 0 : _fragmentEntity$range2.partial));\n}\n\nfunction getFragmentKey(fragment) {\n  return fragment.type + \"_\" + fragment.level + \"_\" + fragment.urlId + \"_\" + fragment.sn;\n}\n\n/***/ }),\n\n/***/ \"./src/controller/gap-controller.ts\":\n/*!******************************************!*\\\n  !*** ./src/controller/gap-controller.ts ***!\n  \\******************************************/\n/*! exports provided: STALL_MINIMUM_DURATION_MS, MAX_START_GAP_JUMP, SKIP_BUFFER_HOLE_STEP_SECONDS, SKIP_BUFFER_RANGE_START, default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_289386__) {\n\n\"use strict\";\n__nested_webpack_require_289386__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_289386__.d(__webpack_exports__, \"STALL_MINIMUM_DURATION_MS\", function() { return STALL_MINIMUM_DURATION_MS; });\n/* harmony export (binding) */ __nested_webpack_require_289386__.d(__webpack_exports__, \"MAX_START_GAP_JUMP\", function() { return MAX_START_GAP_JUMP; });\n/* harmony export (binding) */ __nested_webpack_require_289386__.d(__webpack_exports__, \"SKIP_BUFFER_HOLE_STEP_SECONDS\", function() { return SKIP_BUFFER_HOLE_STEP_SECONDS; });\n/* harmony export (binding) */ __nested_webpack_require_289386__.d(__webpack_exports__, \"SKIP_BUFFER_RANGE_START\", function() { return SKIP_BUFFER_RANGE_START; });\n/* harmony export (binding) */ __nested_webpack_require_289386__.d(__webpack_exports__, \"default\", function() { return GapController; });\n/* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_289386__(/*! ../utils/buffer-helper */ \"./src/utils/buffer-helper.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_289386__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_289386__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_289386__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n\n\n\n\nvar STALL_MINIMUM_DURATION_MS = 250;\nvar MAX_START_GAP_JUMP = 2.0;\nvar SKIP_BUFFER_HOLE_STEP_SECONDS = 0.1;\nvar SKIP_BUFFER_RANGE_START = 0.05;\n\nvar GapController = /*#__PURE__*/function () {\n  function GapController(config, media, fragmentTracker, hls) {\n    this.config = void 0;\n    this.media = null;\n    this.fragmentTracker = void 0;\n    this.hls = void 0;\n    this.nudgeRetry = 0;\n    this.stallReported = false;\n    this.stalled = null;\n    this.moved = false;\n    this.seeking = false;\n    this.config = config;\n    this.media = media;\n    this.fragmentTracker = fragmentTracker;\n    this.hls = hls;\n  }\n\n  var _proto = GapController.prototype;\n\n  _proto.destroy = function destroy() {\n    this.media = null; // @ts-ignore\n\n    this.hls = this.fragmentTracker = null;\n  }\n  /**\n   * Checks if the playhead is stuck within a gap, and if so, attempts to free it.\n   * A gap is an unbuffered range between two buffered ranges (or the start and the first buffered range).\n   *\n   * @param {number} lastCurrentTime Previously read playhead position\n   */\n  ;\n\n  _proto.poll = function poll(lastCurrentTime, activeFrag) {\n    var config = this.config,\n        media = this.media,\n        stalled = this.stalled;\n\n    if (media === null) {\n      return;\n    }\n\n    var currentTime = media.currentTime,\n        seeking = media.seeking;\n    var seeked = this.seeking && !seeking;\n    var beginSeek = !this.seeking && seeking;\n    this.seeking = seeking; // The playhead is moving, no-op\n\n    if (currentTime !== lastCurrentTime) {\n      this.moved = true;\n\n      if (stalled !== null) {\n        // The playhead is now moving, but was previously stalled\n        if (this.stallReported) {\n          var _stalledDuration = self.performance.now() - stalled;\n\n          _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn(\"playback not stuck anymore @\" + currentTime + \", after \" + Math.round(_stalledDuration) + \"ms\");\n          this.stallReported = false;\n        }\n\n        this.stalled = null;\n        this.nudgeRetry = 0;\n      }\n\n      return;\n    } // Clear stalled state when beginning or finishing seeking so that we don't report stalls coming out of a seek\n\n\n    if (beginSeek || seeked) {\n      this.stalled = null;\n    } // The playhead should not be moving\n\n\n    if (media.paused && !seeking || media.ended || media.playbackRate === 0 || !_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__[\"BufferHelper\"].getBuffered(media).length) {\n      return;\n    }\n\n    var bufferInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__[\"BufferHelper\"].bufferInfo(media, currentTime, 0);\n    var isBuffered = bufferInfo.len > 0;\n    var nextStart = bufferInfo.nextStart || 0; // There is no playable buffer (seeked, waiting for buffer)\n\n    if (!isBuffered && !nextStart) {\n      return;\n    }\n\n    if (seeking) {\n      // Waiting for seeking in a buffered range to complete\n      var hasEnoughBuffer = bufferInfo.len > MAX_START_GAP_JUMP; // Next buffered range is too far ahead to jump to while still seeking\n\n      var noBufferGap = !nextStart || activeFrag && activeFrag.start <= currentTime || nextStart - currentTime > MAX_START_GAP_JUMP && !this.fragmentTracker.getPartialFragment(currentTime);\n\n      if (hasEnoughBuffer || noBufferGap) {\n        return;\n      } // Reset moved state when seeking to a point in or before a gap\n\n\n      this.moved = false;\n    } // Skip start gaps if we haven't played, but the last poll detected the start of a stall\n    // The addition poll gives the browser a chance to jump the gap for us\n\n\n    if (!this.moved && this.stalled !== null) {\n      var _level$details;\n\n      // Jump start gaps within jump threshold\n      var startJump = Math.max(nextStart, bufferInfo.start || 0) - currentTime; // When joining a live stream with audio tracks, account for live playlist window sliding by allowing\n      // a larger jump over start gaps caused by the audio-stream-controller buffering a start fragment\n      // that begins over 1 target duration after the video start position.\n\n      var level = this.hls.levels ? this.hls.levels[this.hls.currentLevel] : null;\n      var isLive = level === null || level === void 0 ? void 0 : (_level$details = level.details) === null || _level$details === void 0 ? void 0 : _level$details.live;\n      var maxStartGapJump = isLive ? level.details.targetduration * 2 : MAX_START_GAP_JUMP;\n\n      if (startJump > 0 && startJump <= maxStartGapJump) {\n        this._trySkipBufferHole(null);\n\n        return;\n      }\n    } // Start tracking stall time\n\n\n    var tnow = self.performance.now();\n\n    if (stalled === null) {\n      this.stalled = tnow;\n      return;\n    }\n\n    var stalledDuration = tnow - stalled;\n\n    if (!seeking && stalledDuration >= STALL_MINIMUM_DURATION_MS) {\n      // Report stalling after trying to fix\n      this._reportStall(bufferInfo);\n\n      if (!this.media) {\n        return;\n      }\n    }\n\n    var bufferedWithHoles = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__[\"BufferHelper\"].bufferInfo(media, currentTime, config.maxBufferHole);\n\n    this._tryFixBufferStall(bufferedWithHoles, stalledDuration);\n  }\n  /**\n   * Detects and attempts to fix known buffer stalling issues.\n   * @param bufferInfo - The properties of the current buffer.\n   * @param stalledDurationMs - The amount of time Hls.js has been stalling for.\n   * @private\n   */\n  ;\n\n  _proto._tryFixBufferStall = function _tryFixBufferStall(bufferInfo, stalledDurationMs) {\n    var config = this.config,\n        fragmentTracker = this.fragmentTracker,\n        media = this.media;\n\n    if (media === null) {\n      return;\n    }\n\n    var currentTime = media.currentTime;\n    var partial = fragmentTracker.getPartialFragment(currentTime);\n\n    if (partial) {\n      // Try to skip over the buffer hole caused by a partial fragment\n      // This method isn't limited by the size of the gap between buffered ranges\n      var targetTime = this._trySkipBufferHole(partial); // we return here in this case, meaning\n      // the branch below only executes when we don't handle a partial fragment\n\n\n      if (targetTime || !this.media) {\n        return;\n      }\n    } // if we haven't had to skip over a buffer hole of a partial fragment\n    // we may just have to \"nudge\" the playlist as the browser decoding/rendering engine\n    // needs to cross some sort of threshold covering all source-buffers content\n    // to start playing properly.\n\n\n    if (bufferInfo.len > config.maxBufferHole && stalledDurationMs > config.highBufferWatchdogPeriod * 1000) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn('Trying to nudge playhead over buffer-hole'); // Try to nudge currentTime over a buffer hole if we've been stalling for the configured amount of seconds\n      // We only try to jump the hole if it's under the configured size\n      // Reset stalled so to rearm watchdog timer\n\n      this.stalled = null;\n\n      this._tryNudgeBuffer();\n    }\n  }\n  /**\n   * Triggers a BUFFER_STALLED_ERROR event, but only once per stall period.\n   * @param bufferLen - The playhead distance from the end of the current buffer segment.\n   * @private\n   */\n  ;\n\n  _proto._reportStall = function _reportStall(bufferInfo) {\n    var hls = this.hls,\n        media = this.media,\n        stallReported = this.stallReported;\n\n    if (!stallReported && media) {\n      // Report stalled error once\n      this.stallReported = true;\n      _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn(\"Playback stalling at @\" + media.currentTime + \" due to low buffer (\" + JSON.stringify(bufferInfo) + \")\");\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].MEDIA_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].BUFFER_STALLED_ERROR,\n        fatal: false,\n        buffer: bufferInfo.len\n      });\n    }\n  }\n  /**\n   * Attempts to fix buffer stalls by jumping over known gaps caused by partial fragments\n   * @param partial - The partial fragment found at the current time (where playback is stalling).\n   * @private\n   */\n  ;\n\n  _proto._trySkipBufferHole = function _trySkipBufferHole(partial) {\n    var config = this.config,\n        hls = this.hls,\n        media = this.media;\n\n    if (media === null) {\n      return 0;\n    }\n\n    var currentTime = media.currentTime;\n    var lastEndTime = 0; // Check if currentTime is between unbuffered regions of partial fragments\n\n    var buffered = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_0__[\"BufferHelper\"].getBuffered(media);\n\n    for (var i = 0; i < buffered.length; i++) {\n      var startTime = buffered.start(i);\n\n      if (currentTime + config.maxBufferHole >= lastEndTime && currentTime < startTime) {\n        var targetTime = Math.max(startTime + SKIP_BUFFER_RANGE_START, media.currentTime + SKIP_BUFFER_HOLE_STEP_SECONDS);\n        _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn(\"skipping hole, adjusting currentTime from \" + currentTime + \" to \" + targetTime);\n        this.moved = true;\n        this.stalled = null;\n        media.currentTime = targetTime;\n\n        if (partial) {\n          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].ERROR, {\n            type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].MEDIA_ERROR,\n            details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].BUFFER_SEEK_OVER_HOLE,\n            fatal: false,\n            reason: \"fragment loaded with buffer holes, seeking from \" + currentTime + \" to \" + targetTime,\n            frag: partial\n          });\n        }\n\n        return targetTime;\n      }\n\n      lastEndTime = buffered.end(i);\n    }\n\n    return 0;\n  }\n  /**\n   * Attempts to fix buffer stalls by advancing the mediaElement's current time by a small amount.\n   * @private\n   */\n  ;\n\n  _proto._tryNudgeBuffer = function _tryNudgeBuffer() {\n    var config = this.config,\n        hls = this.hls,\n        media = this.media,\n        nudgeRetry = this.nudgeRetry;\n\n    if (media === null) {\n      return;\n    }\n\n    var currentTime = media.currentTime;\n    this.nudgeRetry++;\n\n    if (nudgeRetry < config.nudgeMaxRetry) {\n      var targetTime = currentTime + (nudgeRetry + 1) * config.nudgeOffset; // playback stalled in buffered area ... let's nudge currentTime to try to overcome this\n\n      _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn(\"Nudging 'currentTime' from \" + currentTime + \" to \" + targetTime);\n      media.currentTime = targetTime;\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].MEDIA_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].BUFFER_NUDGE_ON_STALL,\n        fatal: false\n      });\n    } else {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].error(\"Playhead still not moving while enough data buffered @\" + currentTime + \" after \" + config.nudgeMaxRetry + \" nudges\");\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].MEDIA_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].BUFFER_STALLED_ERROR,\n        fatal: true\n      });\n    }\n  };\n\n  return GapController;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/controller/id3-track-controller.ts\":\n/*!************************************************!*\\\n  !*** ./src/controller/id3-track-controller.ts ***!\n  \\************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_302279__) {\n\n\"use strict\";\n__nested_webpack_require_302279__.r(__webpack_exports__);\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_302279__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_302279__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_302279__(/*! ../utils/texttrack-utils */ \"./src/utils/texttrack-utils.ts\");\n/* harmony import */ var _demux_id3__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_302279__(/*! ../demux/id3 */ \"./src/demux/id3.ts\");\n/* harmony import */ var _loader_date_range__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_302279__(/*! ../loader/date-range */ \"./src/loader/date-range.ts\");\n/* harmony import */ var _types_demuxer__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_302279__(/*! ../types/demuxer */ \"./src/types/demuxer.ts\");\n\n\n\n\n\n\nvar MIN_CUE_DURATION = 0.25;\n\nfunction getCueClass() {\n  // Attempt to recreate Safari functionality by creating\n  // WebKitDataCue objects when available and store the decoded\n  // ID3 data in the value property of the cue\n  return self.WebKitDataCue || self.VTTCue || self.TextTrackCue;\n}\n\nfunction dateRangeDateToTimelineSeconds(date, offset) {\n  return date.getTime() / 1000 - offset;\n}\n\nfunction hexToArrayBuffer(str) {\n  return Uint8Array.from(str.replace(/^0x/, '').replace(/([\\da-fA-F]{2}) ?/g, '0x$1 ').replace(/ +$/, '').split(' ')).buffer;\n}\n\nvar ID3TrackController = /*#__PURE__*/function () {\n  function ID3TrackController(hls) {\n    this.hls = void 0;\n    this.id3Track = null;\n    this.media = null;\n    this.dateRangeCuesAppended = {};\n    this.hls = hls;\n\n    this._registerListeners();\n  }\n\n  var _proto = ID3TrackController.prototype;\n\n  _proto.destroy = function destroy() {\n    this._unregisterListeners();\n\n    this.id3Track = null;\n    this.media = null;\n    this.dateRangeCuesAppended = {}; // @ts-ignore\n\n    this.hls = null;\n  };\n\n  _proto._registerListeners = function _registerListeners() {\n    var hls = this.hls;\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_FLUSHING, this.onBufferFlushing, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVEL_UPDATED, this.onLevelUpdated, this);\n  };\n\n  _proto._unregisterListeners = function _unregisterListeners() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_FLUSHING, this.onBufferFlushing, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVEL_UPDATED, this.onLevelUpdated, this);\n  } // Add ID3 metatadata text track.\n  ;\n\n  _proto.onMediaAttached = function onMediaAttached(event, data) {\n    this.media = data.media;\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    if (!this.id3Track) {\n      return;\n    }\n\n    Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_2__[\"clearCurrentCues\"])(this.id3Track);\n    this.id3Track = null;\n    this.media = null;\n    this.dateRangeCuesAppended = {};\n  };\n\n  _proto.onManifestLoading = function onManifestLoading() {\n    this.dateRangeCuesAppended = {};\n  };\n\n  _proto.createTrack = function createTrack(media) {\n    var track = this.getID3Track(media.textTracks);\n    track.mode = 'hidden';\n    return track;\n  };\n\n  _proto.getID3Track = function getID3Track(textTracks) {\n    if (!this.media) {\n      return;\n    }\n\n    for (var i = 0; i < textTracks.length; i++) {\n      var textTrack = textTracks[i];\n\n      if (textTrack.kind === 'metadata' && textTrack.label === 'id3') {\n        // send 'addtrack' when reusing the textTrack for metadata,\n        // same as what we do for captions\n        Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_2__[\"sendAddTrackEvent\"])(textTrack, this.media);\n        return textTrack;\n      }\n    }\n\n    return this.media.addTextTrack('metadata', 'id3');\n  };\n\n  _proto.onFragParsingMetadata = function onFragParsingMetadata(event, data) {\n    if (!this.media) {\n      return;\n    }\n\n    var _this$hls$config = this.hls.config,\n        enableEmsgMetadataCues = _this$hls$config.enableEmsgMetadataCues,\n        enableID3MetadataCues = _this$hls$config.enableID3MetadataCues;\n\n    if (!enableEmsgMetadataCues && !enableID3MetadataCues) {\n      return;\n    }\n\n    var fragment = data.frag,\n        samples = data.samples,\n        details = data.details; // create track dynamically\n\n    if (!this.id3Track) {\n      this.id3Track = this.createTrack(this.media);\n    } // VTTCue end time must be finite, so use playlist edge or fragment end until next fragment with same frame type is found\n\n\n    var maxCueTime = details.edge || fragment.end;\n    var Cue = getCueClass();\n    var updateCueRanges = false;\n    var frameTypesAdded = {};\n\n    for (var i = 0; i < samples.length; i++) {\n      var type = samples[i].type;\n\n      if (type === _types_demuxer__WEBPACK_IMPORTED_MODULE_5__[\"MetadataSchema\"].emsg && !enableEmsgMetadataCues || !enableID3MetadataCues) {\n        continue;\n      }\n\n      var frames = _demux_id3__WEBPACK_IMPORTED_MODULE_3__[\"getID3Frames\"](samples[i].data);\n\n      if (frames) {\n        var startTime = samples[i].pts;\n        var endTime = maxCueTime;\n        var timeDiff = endTime - startTime;\n\n        if (timeDiff <= 0) {\n          endTime = startTime + MIN_CUE_DURATION;\n        }\n\n        for (var j = 0; j < frames.length; j++) {\n          var frame = frames[j]; // Safari doesn't put the timestamp frame in the TextTrack\n\n          if (!_demux_id3__WEBPACK_IMPORTED_MODULE_3__[\"isTimeStampFrame\"](frame)) {\n            var cue = new Cue(startTime, endTime, '');\n            cue.value = frame;\n\n            if (type) {\n              cue.type = type;\n            }\n\n            this.id3Track.addCue(cue);\n            frameTypesAdded[frame.key] = null;\n            updateCueRanges = true;\n          }\n        }\n      }\n    }\n\n    if (updateCueRanges) {\n      this.updateId3CueEnds(frameTypesAdded);\n    }\n  };\n\n  _proto.updateId3CueEnds = function updateId3CueEnds(frameTypesAdded) {\n    var _this$id3Track;\n\n    // Update endTime of previous cue with same IDR frame.type (Ex: TXXX cue spans to next TXXX)\n    var cues = (_this$id3Track = this.id3Track) === null || _this$id3Track === void 0 ? void 0 : _this$id3Track.cues;\n\n    if (cues) {\n      for (var i = cues.length; i--;) {\n        var _cue$value;\n\n        var cue = cues[i];\n        var frameType = (_cue$value = cue.value) === null || _cue$value === void 0 ? void 0 : _cue$value.key;\n\n        if (frameType && frameType in frameTypesAdded) {\n          var startTime = frameTypesAdded[frameType];\n\n          if (startTime && cue.endTime !== startTime) {\n            cue.endTime = startTime;\n          }\n\n          frameTypesAdded[frameType] = cue.startTime;\n        }\n      }\n    }\n  };\n\n  _proto.onBufferFlushing = function onBufferFlushing(event, _ref) {\n    var startOffset = _ref.startOffset,\n        endOffset = _ref.endOffset,\n        type = _ref.type;\n    var id3Track = this.id3Track,\n        hls = this.hls;\n\n    if (!hls) {\n      return;\n    }\n\n    var _hls$config = hls.config,\n        enableEmsgMetadataCues = _hls$config.enableEmsgMetadataCues,\n        enableID3MetadataCues = _hls$config.enableID3MetadataCues;\n\n    if (id3Track && (enableEmsgMetadataCues || enableID3MetadataCues)) {\n      var predicate;\n\n      if (type === 'audio') {\n        predicate = function predicate(cue) {\n          return cue.type === _types_demuxer__WEBPACK_IMPORTED_MODULE_5__[\"MetadataSchema\"].audioId3 && enableID3MetadataCues;\n        };\n      } else if (type === 'video') {\n        predicate = function predicate(cue) {\n          return cue.type === _types_demuxer__WEBPACK_IMPORTED_MODULE_5__[\"MetadataSchema\"].emsg && enableEmsgMetadataCues;\n        };\n      } else {\n        predicate = function predicate(cue) {\n          return cue.type === _types_demuxer__WEBPACK_IMPORTED_MODULE_5__[\"MetadataSchema\"].audioId3 && enableID3MetadataCues || cue.type === _types_demuxer__WEBPACK_IMPORTED_MODULE_5__[\"MetadataSchema\"].emsg && enableEmsgMetadataCues;\n        };\n      }\n\n      Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_2__[\"removeCuesInRange\"])(id3Track, startOffset, endOffset, predicate);\n    }\n  };\n\n  _proto.onLevelUpdated = function onLevelUpdated(event, _ref2) {\n    var _this = this;\n\n    var details = _ref2.details;\n\n    if (!this.media || !details.hasProgramDateTime || !this.hls.config.enableDateRangeMetadataCues) {\n      return;\n    }\n\n    var dateRangeCuesAppended = this.dateRangeCuesAppended,\n        id3Track = this.id3Track;\n    var dateRanges = details.dateRanges;\n    var ids = Object.keys(dateRanges); // Remove cues from track not found in details.dateRanges\n\n    if (id3Track) {\n      var idsToRemove = Object.keys(dateRangeCuesAppended).filter(function (id) {\n        return !ids.includes(id);\n      });\n\n      var _loop = function _loop(i) {\n        var id = idsToRemove[i];\n        Object.keys(dateRangeCuesAppended[id].cues).forEach(function (key) {\n          id3Track.removeCue(dateRangeCuesAppended[id].cues[key]);\n        });\n        delete dateRangeCuesAppended[id];\n      };\n\n      for (var i = idsToRemove.length; i--;) {\n        _loop(i);\n      }\n    } // Exit if the playlist does not have Date Ranges or does not have Program Date Time\n\n\n    var lastFragment = details.fragments[details.fragments.length - 1];\n\n    if (ids.length === 0 || !Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(lastFragment === null || lastFragment === void 0 ? void 0 : lastFragment.programDateTime)) {\n      return;\n    }\n\n    if (!this.id3Track) {\n      this.id3Track = this.createTrack(this.media);\n    }\n\n    var dateTimeOffset = lastFragment.programDateTime / 1000 - lastFragment.start;\n    var maxCueTime = details.edge || lastFragment.end;\n    var Cue = getCueClass();\n\n    var _loop2 = function _loop2(_i) {\n      var id = ids[_i];\n      var dateRange = dateRanges[id];\n      var appendedDateRangeCues = dateRangeCuesAppended[id];\n      var cues = (appendedDateRangeCues === null || appendedDateRangeCues === void 0 ? void 0 : appendedDateRangeCues.cues) || {};\n      var durationKnown = (appendedDateRangeCues === null || appendedDateRangeCues === void 0 ? void 0 : appendedDateRangeCues.durationKnown) || false;\n      var startTime = dateRangeDateToTimelineSeconds(dateRange.startDate, dateTimeOffset);\n      var endTime = maxCueTime;\n      var endDate = dateRange.endDate;\n\n      if (endDate) {\n        endTime = dateRangeDateToTimelineSeconds(endDate, dateTimeOffset);\n        durationKnown = true;\n      } else if (dateRange.endOnNext && !durationKnown) {\n        var nextDateRangeWithSameClass = ids.reduce(function (filterMapArray, id) {\n          var candidate = dateRanges[id];\n\n          if (candidate.class === dateRange.class && candidate.id !== id && candidate.startDate > dateRange.startDate) {\n            filterMapArray.push(candidate);\n          }\n\n          return filterMapArray;\n        }, []).sort(function (a, b) {\n          return a.startDate.getTime() - b.startDate.getTime();\n        })[0];\n\n        if (nextDateRangeWithSameClass) {\n          endTime = dateRangeDateToTimelineSeconds(nextDateRangeWithSameClass.startDate, dateTimeOffset);\n          durationKnown = true;\n        }\n      }\n\n      var attributes = Object.keys(dateRange.attr);\n\n      for (var j = 0; j < attributes.length; j++) {\n        var key = attributes[j];\n\n        if (key === _loader_date_range__WEBPACK_IMPORTED_MODULE_4__[\"DateRangeAttribute\"].ID || key === _loader_date_range__WEBPACK_IMPORTED_MODULE_4__[\"DateRangeAttribute\"].CLASS || key === _loader_date_range__WEBPACK_IMPORTED_MODULE_4__[\"DateRangeAttribute\"].START_DATE || key === _loader_date_range__WEBPACK_IMPORTED_MODULE_4__[\"DateRangeAttribute\"].DURATION || key === _loader_date_range__WEBPACK_IMPORTED_MODULE_4__[\"DateRangeAttribute\"].END_DATE || key === _loader_date_range__WEBPACK_IMPORTED_MODULE_4__[\"DateRangeAttribute\"].END_ON_NEXT) {\n          continue;\n        }\n\n        var cue = cues[key];\n\n        if (cue) {\n          if (durationKnown && !appendedDateRangeCues.durationKnown) {\n            cue.endTime = endTime;\n          }\n        } else {\n          var data = dateRange.attr[key];\n          cue = new Cue(startTime, endTime, '');\n\n          if (key === _loader_date_range__WEBPACK_IMPORTED_MODULE_4__[\"DateRangeAttribute\"].SCTE35_OUT || key === _loader_date_range__WEBPACK_IMPORTED_MODULE_4__[\"DateRangeAttribute\"].SCTE35_IN) {\n            data = hexToArrayBuffer(data);\n          }\n\n          cue.value = {\n            key: key,\n            data: data\n          };\n          cue.type = _types_demuxer__WEBPACK_IMPORTED_MODULE_5__[\"MetadataSchema\"].dateRange;\n\n          _this.id3Track.addCue(cue);\n\n          cues[key] = cue;\n        }\n      }\n\n      dateRangeCuesAppended[id] = {\n        cues: cues,\n        dateRange: dateRange,\n        durationKnown: durationKnown\n      };\n    };\n\n    for (var _i = 0; _i < ids.length; _i++) {\n      _loop2(_i);\n    }\n  };\n\n  return ID3TrackController;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ID3TrackController);\n\n/***/ }),\n\n/***/ \"./src/controller/latency-controller.ts\":\n/*!**********************************************!*\\\n  !*** ./src/controller/latency-controller.ts ***!\n  \\**********************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_316631__) {\n\n\"use strict\";\n__nested_webpack_require_316631__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_316631__.d(__webpack_exports__, \"default\", function() { return LatencyController; });\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_316631__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_316631__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_316631__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n\n\n\nvar LatencyController = /*#__PURE__*/function () {\n  function LatencyController(hls) {\n    var _this = this;\n\n    this.hls = void 0;\n    this.config = void 0;\n    this.media = null;\n    this.levelDetails = null;\n    this.currentTime = 0;\n    this.stallCount = 0;\n    this._latency = null;\n\n    this.timeupdateHandler = function () {\n      return _this.timeupdate();\n    };\n\n    this.hls = hls;\n    this.config = hls.config;\n    this.registerListeners();\n  }\n\n  var _proto = LatencyController.prototype;\n\n  _proto.destroy = function destroy() {\n    this.unregisterListeners();\n    this.onMediaDetaching();\n    this.levelDetails = null; // @ts-ignore\n\n    this.hls = this.timeupdateHandler = null;\n  };\n\n  _proto.registerListeners = function registerListeners() {\n    this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVEL_UPDATED, this.onLevelUpdated, this);\n    this.hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, this.onError, this);\n  };\n\n  _proto.unregisterListeners = function unregisterListeners() {\n    this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached);\n    this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching);\n    this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading);\n    this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVEL_UPDATED, this.onLevelUpdated);\n    this.hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, this.onError);\n  };\n\n  _proto.onMediaAttached = function onMediaAttached(event, data) {\n    this.media = data.media;\n    this.media.addEventListener('timeupdate', this.timeupdateHandler);\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    if (this.media) {\n      this.media.removeEventListener('timeupdate', this.timeupdateHandler);\n      this.media = null;\n    }\n  };\n\n  _proto.onManifestLoading = function onManifestLoading() {\n    this.levelDetails = null;\n    this._latency = null;\n    this.stallCount = 0;\n  };\n\n  _proto.onLevelUpdated = function onLevelUpdated(event, _ref) {\n    var details = _ref.details;\n    this.levelDetails = details;\n\n    if (details.advanced) {\n      this.timeupdate();\n    }\n\n    if (!details.live && this.media) {\n      this.media.removeEventListener('timeupdate', this.timeupdateHandler);\n    }\n  };\n\n  _proto.onError = function onError(event, data) {\n    if (data.details !== _errors__WEBPACK_IMPORTED_MODULE_0__[\"ErrorDetails\"].BUFFER_STALLED_ERROR) {\n      return;\n    }\n\n    this.stallCount++;\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn('[playback-rate-controller]: Stall detected, adjusting target latency');\n  };\n\n  _proto.timeupdate = function timeupdate() {\n    var media = this.media,\n        levelDetails = this.levelDetails;\n\n    if (!media || !levelDetails) {\n      return;\n    }\n\n    this.currentTime = media.currentTime;\n    var latency = this.computeLatency();\n\n    if (latency === null) {\n      return;\n    }\n\n    this._latency = latency; // Adapt playbackRate to meet target latency in low-latency mode\n\n    var _this$config = this.config,\n        lowLatencyMode = _this$config.lowLatencyMode,\n        maxLiveSyncPlaybackRate = _this$config.maxLiveSyncPlaybackRate;\n\n    if (!lowLatencyMode || maxLiveSyncPlaybackRate === 1) {\n      return;\n    }\n\n    var targetLatency = this.targetLatency;\n\n    if (targetLatency === null) {\n      return;\n    }\n\n    var distanceFromTarget = latency - targetLatency; // Only adjust playbackRate when within one target duration of targetLatency\n    // and more than one second from under-buffering.\n    // Playback further than one target duration from target can be considered DVR playback.\n\n    var liveMinLatencyDuration = Math.min(this.maxLatency, targetLatency + levelDetails.targetduration);\n    var inLiveRange = distanceFromTarget < liveMinLatencyDuration;\n\n    if (levelDetails.live && inLiveRange && distanceFromTarget > 0.05 && this.forwardBufferLength > 1) {\n      var max = Math.min(2, Math.max(1.0, maxLiveSyncPlaybackRate));\n      var rate = Math.round(2 / (1 + Math.exp(-0.75 * distanceFromTarget - this.edgeStalled)) * 20) / 20;\n      media.playbackRate = Math.min(max, Math.max(1, rate));\n    } else if (media.playbackRate !== 1 && media.playbackRate !== 0) {\n      media.playbackRate = 1;\n    }\n  };\n\n  _proto.estimateLiveEdge = function estimateLiveEdge() {\n    var levelDetails = this.levelDetails;\n\n    if (levelDetails === null) {\n      return null;\n    }\n\n    return levelDetails.edge + levelDetails.age;\n  };\n\n  _proto.computeLatency = function computeLatency() {\n    var liveEdge = this.estimateLiveEdge();\n\n    if (liveEdge === null) {\n      return null;\n    }\n\n    return liveEdge - this.currentTime;\n  };\n\n  _createClass(LatencyController, [{\n    key: \"latency\",\n    get: function get() {\n      return this._latency || 0;\n    }\n  }, {\n    key: \"maxLatency\",\n    get: function get() {\n      var config = this.config,\n          levelDetails = this.levelDetails;\n\n      if (config.liveMaxLatencyDuration !== undefined) {\n        return config.liveMaxLatencyDuration;\n      }\n\n      return levelDetails ? config.liveMaxLatencyDurationCount * levelDetails.targetduration : 0;\n    }\n  }, {\n    key: \"targetLatency\",\n    get: function get() {\n      var levelDetails = this.levelDetails;\n\n      if (levelDetails === null) {\n        return null;\n      }\n\n      var holdBack = levelDetails.holdBack,\n          partHoldBack = levelDetails.partHoldBack,\n          targetduration = levelDetails.targetduration;\n      var _this$config2 = this.config,\n          liveSyncDuration = _this$config2.liveSyncDuration,\n          liveSyncDurationCount = _this$config2.liveSyncDurationCount,\n          lowLatencyMode = _this$config2.lowLatencyMode;\n      var userConfig = this.hls.userConfig;\n      var targetLatency = lowLatencyMode ? partHoldBack || holdBack : holdBack;\n\n      if (userConfig.liveSyncDuration || userConfig.liveSyncDurationCount || targetLatency === 0) {\n        targetLatency = liveSyncDuration !== undefined ? liveSyncDuration : liveSyncDurationCount * targetduration;\n      }\n\n      var maxLiveSyncOnStallIncrease = targetduration;\n      var liveSyncOnStallIncrease = 1.0;\n      return targetLatency + Math.min(this.stallCount * liveSyncOnStallIncrease, maxLiveSyncOnStallIncrease);\n    }\n  }, {\n    key: \"liveSyncPosition\",\n    get: function get() {\n      var liveEdge = this.estimateLiveEdge();\n      var targetLatency = this.targetLatency;\n      var levelDetails = this.levelDetails;\n\n      if (liveEdge === null || targetLatency === null || levelDetails === null) {\n        return null;\n      }\n\n      var edge = levelDetails.edge;\n      var syncPosition = liveEdge - targetLatency - this.edgeStalled;\n      var min = edge - levelDetails.totalduration;\n      var max = edge - (this.config.lowLatencyMode && levelDetails.partTarget || levelDetails.targetduration);\n      return Math.min(Math.max(min, syncPosition), max);\n    }\n  }, {\n    key: \"drift\",\n    get: function get() {\n      var levelDetails = this.levelDetails;\n\n      if (levelDetails === null) {\n        return 1;\n      }\n\n      return levelDetails.drift;\n    }\n  }, {\n    key: \"edgeStalled\",\n    get: function get() {\n      var levelDetails = this.levelDetails;\n\n      if (levelDetails === null) {\n        return 0;\n      }\n\n      var maxLevelUpdateAge = (this.config.lowLatencyMode && levelDetails.partTarget || levelDetails.targetduration) * 3;\n      return Math.max(levelDetails.age - maxLevelUpdateAge, 0);\n    }\n  }, {\n    key: \"forwardBufferLength\",\n    get: function get() {\n      var media = this.media,\n          levelDetails = this.levelDetails;\n\n      if (!media || !levelDetails) {\n        return 0;\n      }\n\n      var bufferedRanges = media.buffered.length;\n      return (bufferedRanges ? media.buffered.end(bufferedRanges - 1) : levelDetails.edge) - this.currentTime;\n    }\n  }]);\n\n  return LatencyController;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/controller/level-controller.ts\":\n/*!********************************************!*\\\n  !*** ./src/controller/level-controller.ts ***!\n  \\********************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_326410__) {\n\n\"use strict\";\n__nested_webpack_require_326410__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_326410__.d(__webpack_exports__, \"default\", function() { return LevelController; });\n/* harmony import */ var _types_level__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_326410__(/*! ../types/level */ \"./src/types/level.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_326410__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_326410__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _utils_codecs__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_326410__(/*! ../utils/codecs */ \"./src/utils/codecs.ts\");\n/* harmony import */ var _level_helper__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_326410__(/*! ./level-helper */ \"./src/controller/level-helper.ts\");\n/* harmony import */ var _base_playlist_controller__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_326410__(/*! ./base-playlist-controller */ \"./src/controller/base-playlist-controller.ts\");\n/* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_326410__(/*! ../types/loader */ \"./src/types/loader.ts\");\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/*\n * Level Controller\n */\n\n\n\n\n\n\n\nvar chromeOrFirefox = /chrome|firefox/.test(navigator.userAgent.toLowerCase());\n\nvar LevelController = /*#__PURE__*/function (_BasePlaylistControll) {\n  _inheritsLoose(LevelController, _BasePlaylistControll);\n\n  function LevelController(hls) {\n    var _this;\n\n    _this = _BasePlaylistControll.call(this, hls, '[level-controller]') || this;\n    _this._levels = [];\n    _this._firstLevel = -1;\n    _this._startLevel = void 0;\n    _this.currentLevelIndex = -1;\n    _this.manualLevelIndex = -1;\n    _this.onParsedComplete = void 0;\n\n    _this._registerListeners();\n\n    return _this;\n  }\n\n  var _proto = LevelController.prototype;\n\n  _proto._registerListeners = function _registerListeners() {\n    var hls = this.hls;\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADED, this.onManifestLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_LOADED, this.onFragLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, this.onError, this);\n  };\n\n  _proto._unregisterListeners = function _unregisterListeners() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADED, this.onManifestLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_LOADED, this.onFragLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, this.onError, this);\n  };\n\n  _proto.destroy = function destroy() {\n    this._unregisterListeners();\n\n    this.manualLevelIndex = -1;\n    this._levels.length = 0;\n\n    _BasePlaylistControll.prototype.destroy.call(this);\n  };\n\n  _proto.startLoad = function startLoad() {\n    var levels = this._levels; // clean up live level details to force reload them, and reset load errors\n\n    levels.forEach(function (level) {\n      level.loadError = 0;\n    });\n\n    _BasePlaylistControll.prototype.startLoad.call(this);\n  };\n\n  _proto.onManifestLoaded = function onManifestLoaded(event, data) {\n    var levels = [];\n    var audioTracks = [];\n    var subtitleTracks = [];\n    var bitrateStart;\n    var levelSet = {};\n    var levelFromSet;\n    var resolutionFound = false;\n    var videoCodecFound = false;\n    var audioCodecFound = false; // regroup redundant levels together\n\n    data.levels.forEach(function (levelParsed) {\n      var attributes = levelParsed.attrs;\n      resolutionFound = resolutionFound || !!(levelParsed.width && levelParsed.height);\n      videoCodecFound = videoCodecFound || !!levelParsed.videoCodec;\n      audioCodecFound = audioCodecFound || !!levelParsed.audioCodec; // erase audio codec info if browser does not support mp4a.40.34.\n      // demuxer will autodetect codec and fallback to mpeg/audio\n\n      if (chromeOrFirefox && levelParsed.audioCodec && levelParsed.audioCodec.indexOf('mp4a.40.34') !== -1) {\n        levelParsed.audioCodec = undefined;\n      }\n\n      var levelKey = levelParsed.bitrate + \"-\" + levelParsed.attrs.RESOLUTION + \"-\" + levelParsed.attrs.CODECS;\n      levelFromSet = levelSet[levelKey];\n\n      if (!levelFromSet) {\n        levelFromSet = new _types_level__WEBPACK_IMPORTED_MODULE_0__[\"Level\"](levelParsed);\n        levelSet[levelKey] = levelFromSet;\n        levels.push(levelFromSet);\n      } else {\n        levelFromSet.url.push(levelParsed.url);\n      }\n\n      if (attributes) {\n        if (attributes.AUDIO) {\n          Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__[\"addGroupId\"])(levelFromSet, 'audio', attributes.AUDIO);\n        }\n\n        if (attributes.SUBTITLES) {\n          Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__[\"addGroupId\"])(levelFromSet, 'text', attributes.SUBTITLES);\n        }\n      }\n    }); // remove audio-only level if we also have levels with video codecs or RESOLUTION signalled\n\n    if ((resolutionFound || videoCodecFound) && audioCodecFound) {\n      levels = levels.filter(function (_ref) {\n        var videoCodec = _ref.videoCodec,\n            width = _ref.width,\n            height = _ref.height;\n        return !!videoCodec || !!(width && height);\n      });\n    } // only keep levels with supported audio/video codecs\n\n\n    levels = levels.filter(function (_ref2) {\n      var audioCodec = _ref2.audioCodec,\n          videoCodec = _ref2.videoCodec;\n      return (!audioCodec || Object(_utils_codecs__WEBPACK_IMPORTED_MODULE_3__[\"isCodecSupportedInMp4\"])(audioCodec, 'audio')) && (!videoCodec || Object(_utils_codecs__WEBPACK_IMPORTED_MODULE_3__[\"isCodecSupportedInMp4\"])(videoCodec, 'video'));\n    });\n\n    if (data.audioTracks) {\n      audioTracks = data.audioTracks.filter(function (track) {\n        return !track.audioCodec || Object(_utils_codecs__WEBPACK_IMPORTED_MODULE_3__[\"isCodecSupportedInMp4\"])(track.audioCodec, 'audio');\n      }); // Assign ids after filtering as array indices by group-id\n\n      Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__[\"assignTrackIdsByGroup\"])(audioTracks);\n    }\n\n    if (data.subtitles) {\n      subtitleTracks = data.subtitles;\n      Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__[\"assignTrackIdsByGroup\"])(subtitleTracks);\n    }\n\n    if (levels.length > 0) {\n      // start bitrate is the first bitrate of the manifest\n      bitrateStart = levels[0].bitrate; // sort level on bitrate\n\n      levels.sort(function (a, b) {\n        return a.bitrate - b.bitrate;\n      });\n      this._levels = levels; // find index of first level in sorted levels\n\n      for (var i = 0; i < levels.length; i++) {\n        if (levels[i].bitrate === bitrateStart) {\n          this._firstLevel = i;\n          this.log(\"manifest loaded, \" + levels.length + \" level(s) found, first bitrate: \" + bitrateStart);\n          break;\n        }\n      } // Audio is only alternate if manifest include a URI along with the audio group tag,\n      // and this is not an audio-only stream where levels contain audio-only\n\n\n      var audioOnly = audioCodecFound && !videoCodecFound;\n      var edata = {\n        levels: levels,\n        audioTracks: audioTracks,\n        subtitleTracks: subtitleTracks,\n        firstLevel: this._firstLevel,\n        stats: data.stats,\n        audio: audioCodecFound,\n        video: videoCodecFound,\n        altAudio: !audioOnly && audioTracks.some(function (t) {\n          return !!t.url;\n        })\n      };\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_PARSED, edata); // Initiate loading after all controllers have received MANIFEST_PARSED\n\n      if (this.hls.config.autoStartLoad || this.hls.forceStartLoad) {\n        this.hls.startLoad(this.hls.config.startPosition);\n      }\n    } else {\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorTypes\"].MEDIA_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].MANIFEST_INCOMPATIBLE_CODECS_ERROR,\n        fatal: true,\n        url: data.url,\n        reason: 'no level with compatible codecs found in manifest'\n      });\n    }\n  };\n\n  _proto.onError = function onError(event, data) {\n    var _data$level;\n\n    _BasePlaylistControll.prototype.onError.call(this, event, data);\n\n    if (data.fatal) {\n      return;\n    } // Switch to redundant level when track fails to load\n\n\n    var context = data.context;\n    var level = this._levels[this.currentLevelIndex];\n\n    if (context && (context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].AUDIO_TRACK && level.audioGroupIds && context.groupId === level.audioGroupIds[level.urlId] || context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].SUBTITLE_TRACK && level.textGroupIds && context.groupId === level.textGroupIds[level.urlId])) {\n      this.redundantFailover(this.currentLevelIndex);\n      return;\n    }\n\n    var levelError = false;\n    var levelSwitch = true;\n    var levelIndex; // try to recover not fatal errors\n\n    switch (data.details) {\n      case _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].FRAG_LOAD_ERROR:\n      case _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].FRAG_LOAD_TIMEOUT:\n      case _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].KEY_LOAD_ERROR:\n      case _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].KEY_LOAD_TIMEOUT:\n        if (data.frag) {\n          // Share fragment error count accross media options (main, audio, subs)\n          // This allows for level based rendition switching when media option assets fail\n          var variantLevelIndex = data.frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].MAIN ? data.frag.level : this.currentLevelIndex;\n          var _level = this._levels[variantLevelIndex]; // Set levelIndex when we're out of fragment retries\n\n          if (_level) {\n            _level.fragmentError++;\n\n            if (_level.fragmentError > this.hls.config.fragLoadingMaxRetry) {\n              levelIndex = variantLevelIndex;\n            }\n          } else {\n            levelIndex = variantLevelIndex;\n          }\n        }\n\n        break;\n\n      case _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].LEVEL_LOAD_ERROR:\n      case _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].LEVEL_LOAD_TIMEOUT:\n        // Do not perform level switch if an error occurred using delivery directives\n        // Attempt to reload level without directives first\n        if (context) {\n          if (context.deliveryDirectives) {\n            levelSwitch = false;\n          }\n\n          levelIndex = context.level;\n        }\n\n        levelError = true;\n        break;\n\n      case _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].REMUX_ALLOC_ERROR:\n        levelIndex = (_data$level = data.level) != null ? _data$level : this.currentLevelIndex;\n        levelError = true;\n        break;\n    }\n\n    if (levelIndex !== undefined) {\n      this.recoverLevel(data, levelIndex, levelError, levelSwitch);\n    }\n  }\n  /**\n   * Switch to a redundant stream if any available.\n   * If redundant stream is not available, emergency switch down if ABR mode is enabled.\n   */\n  ;\n\n  _proto.recoverLevel = function recoverLevel(errorEvent, levelIndex, levelError, levelSwitch) {\n    var errorDetails = errorEvent.details;\n    var level = this._levels[levelIndex];\n    level.loadError++;\n\n    if (levelError) {\n      var retrying = this.retryLoadingOrFail(errorEvent);\n\n      if (retrying) {\n        // boolean used to inform stream controller not to switch back to IDLE on non fatal error\n        errorEvent.levelRetry = true;\n      } else {\n        this.currentLevelIndex = -1;\n        return;\n      }\n    }\n\n    if (levelSwitch) {\n      var redundantLevels = level.url.length; // Try redundant fail-over until level.loadError reaches redundantLevels\n\n      if (redundantLevels > 1 && level.loadError < redundantLevels) {\n        errorEvent.levelRetry = true;\n        this.redundantFailover(levelIndex);\n      } else if (this.manualLevelIndex === -1) {\n        // Search for next level to retry\n        var nextLevel = -1;\n        var levels = this._levels;\n\n        for (var i = levels.length; i--;) {\n          var candidate = (i + this.currentLevelIndex) % levels.length;\n\n          if (candidate !== this.currentLevelIndex && levels[candidate].loadError === 0) {\n            nextLevel = candidate;\n            break;\n          }\n        }\n\n        if (nextLevel > -1 && this.currentLevelIndex !== nextLevel) {\n          this.warn(errorDetails + \": switch to \" + nextLevel);\n          errorEvent.levelRetry = true;\n          this.hls.nextAutoLevel = nextLevel;\n        }\n      }\n    }\n  };\n\n  _proto.redundantFailover = function redundantFailover(levelIndex) {\n    var level = this._levels[levelIndex];\n    var redundantLevels = level.url.length;\n\n    if (redundantLevels > 1) {\n      // Update the url id of all levels so that we stay on the same set of variants when level switching\n      var newUrlId = (level.urlId + 1) % redundantLevels;\n      this.warn(\"Switching to redundant URL-id \" + newUrlId);\n\n      this._levels.forEach(function (level) {\n        level.urlId = newUrlId;\n      });\n\n      this.level = levelIndex;\n    }\n  } // reset errors on the successful load of a fragment\n  ;\n\n  _proto.onFragLoaded = function onFragLoaded(event, _ref3) {\n    var frag = _ref3.frag;\n\n    if (frag !== undefined && frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].MAIN) {\n      var level = this._levels[frag.level];\n\n      if (level !== undefined) {\n        level.fragmentError = 0;\n        level.loadError = 0;\n      }\n    }\n  };\n\n  _proto.onLevelLoaded = function onLevelLoaded(event, data) {\n    var _data$deliveryDirecti2;\n\n    var level = data.level,\n        details = data.details;\n    var curLevel = this._levels[level];\n\n    if (!curLevel) {\n      var _data$deliveryDirecti;\n\n      this.warn(\"Invalid level index \" + level);\n\n      if ((_data$deliveryDirecti = data.deliveryDirectives) !== null && _data$deliveryDirecti !== void 0 && _data$deliveryDirecti.skip) {\n        details.deltaUpdateFailed = true;\n      }\n\n      return;\n    } // only process level loaded events matching with expected level\n\n\n    if (level === this.currentLevelIndex) {\n      // reset level load error counter on successful level loaded only if there is no issues with fragments\n      if (curLevel.fragmentError === 0) {\n        curLevel.loadError = 0;\n        this.retryCount = 0;\n      }\n\n      this.playlistLoaded(level, data, curLevel.details);\n    } else if ((_data$deliveryDirecti2 = data.deliveryDirectives) !== null && _data$deliveryDirecti2 !== void 0 && _data$deliveryDirecti2.skip) {\n      // received a delta playlist update that cannot be merged\n      details.deltaUpdateFailed = true;\n    }\n  };\n\n  _proto.onAudioTrackSwitched = function onAudioTrackSwitched(event, data) {\n    var currentLevel = this.hls.levels[this.currentLevelIndex];\n\n    if (!currentLevel) {\n      return;\n    }\n\n    if (currentLevel.audioGroupIds) {\n      var urlId = -1;\n      var audioGroupId = this.hls.audioTracks[data.id].groupId;\n\n      for (var i = 0; i < currentLevel.audioGroupIds.length; i++) {\n        if (currentLevel.audioGroupIds[i] === audioGroupId) {\n          urlId = i;\n          break;\n        }\n      }\n\n      if (urlId !== currentLevel.urlId) {\n        currentLevel.urlId = urlId;\n        this.startLoad();\n      }\n    }\n  };\n\n  _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {\n    var level = this.currentLevelIndex;\n    var currentLevel = this._levels[level];\n\n    if (this.canLoad && currentLevel && currentLevel.url.length > 0) {\n      var id = currentLevel.urlId;\n      var url = currentLevel.url[id];\n\n      if (hlsUrlParameters) {\n        try {\n          url = hlsUrlParameters.addDirectives(url);\n        } catch (error) {\n          this.warn(\"Could not construct new URL with HLS Delivery Directives: \" + error);\n        }\n      }\n\n      this.log(\"Attempt loading level index \" + level + (hlsUrlParameters ? ' at sn ' + hlsUrlParameters.msn + ' part ' + hlsUrlParameters.part : '') + \" with URL-id \" + id + \" \" + url); // console.log('Current audio track group ID:', this.hls.audioTracks[this.hls.audioTrack].groupId);\n      // console.log('New video quality level audio group id:', levelObject.attrs.AUDIO, level);\n\n      this.clearTimer();\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVEL_LOADING, {\n        url: url,\n        level: level,\n        id: id,\n        deliveryDirectives: hlsUrlParameters || null\n      });\n    }\n  };\n\n  _proto.removeLevel = function removeLevel(levelIndex, urlId) {\n    var filterLevelAndGroupByIdIndex = function filterLevelAndGroupByIdIndex(url, id) {\n      return id !== urlId;\n    };\n\n    var levels = this._levels.filter(function (level, index) {\n      if (index !== levelIndex) {\n        return true;\n      }\n\n      if (level.url.length > 1 && urlId !== undefined) {\n        level.url = level.url.filter(filterLevelAndGroupByIdIndex);\n\n        if (level.audioGroupIds) {\n          level.audioGroupIds = level.audioGroupIds.filter(filterLevelAndGroupByIdIndex);\n        }\n\n        if (level.textGroupIds) {\n          level.textGroupIds = level.textGroupIds.filter(filterLevelAndGroupByIdIndex);\n        }\n\n        level.urlId = 0;\n        return true;\n      }\n\n      return false;\n    }).map(function (level, index) {\n      var details = level.details;\n\n      if (details !== null && details !== void 0 && details.fragments) {\n        details.fragments.forEach(function (fragment) {\n          fragment.level = index;\n        });\n      }\n\n      return level;\n    });\n\n    this._levels = levels;\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVELS_UPDATED, {\n      levels: levels\n    });\n  };\n\n  _createClass(LevelController, [{\n    key: \"levels\",\n    get: function get() {\n      if (this._levels.length === 0) {\n        return null;\n      }\n\n      return this._levels;\n    }\n  }, {\n    key: \"level\",\n    get: function get() {\n      return this.currentLevelIndex;\n    },\n    set: function set(newLevel) {\n      var _levels$newLevel;\n\n      var levels = this._levels;\n\n      if (levels.length === 0) {\n        return;\n      }\n\n      if (this.currentLevelIndex === newLevel && (_levels$newLevel = levels[newLevel]) !== null && _levels$newLevel !== void 0 && _levels$newLevel.details) {\n        return;\n      } // check if level idx is valid\n\n\n      if (newLevel < 0 || newLevel >= levels.length) {\n        // invalid level id given, trigger error\n        var fatal = newLevel < 0;\n        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, {\n          type: _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorTypes\"].OTHER_ERROR,\n          details: _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].LEVEL_SWITCH_ERROR,\n          level: newLevel,\n          fatal: fatal,\n          reason: 'invalid level idx'\n        });\n\n        if (fatal) {\n          return;\n        }\n\n        newLevel = Math.min(newLevel, levels.length - 1);\n      } // stopping live reloading timer if any\n\n\n      this.clearTimer();\n      var lastLevelIndex = this.currentLevelIndex;\n      var lastLevel = levels[lastLevelIndex];\n      var level = levels[newLevel];\n      this.log(\"switching to level \" + newLevel + \" from \" + lastLevelIndex);\n      this.currentLevelIndex = newLevel;\n\n      var levelSwitchingData = _extends({}, level, {\n        level: newLevel,\n        maxBitrate: level.maxBitrate,\n        uri: level.uri,\n        urlId: level.urlId\n      }); // @ts-ignore\n\n\n      delete levelSwitchingData._urlId;\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVEL_SWITCHING, levelSwitchingData); // check if we need to load playlist for this level\n\n      var levelDetails = level.details;\n\n      if (!levelDetails || levelDetails.live) {\n        // level not retrieved yet, or live playlist we need to (re)load it\n        var hlsUrlParameters = this.switchParams(level.uri, lastLevel === null || lastLevel === void 0 ? void 0 : lastLevel.details);\n        this.loadPlaylist(hlsUrlParameters);\n      }\n    }\n  }, {\n    key: \"manualLevel\",\n    get: function get() {\n      return this.manualLevelIndex;\n    },\n    set: function set(newLevel) {\n      this.manualLevelIndex = newLevel;\n\n      if (this._startLevel === undefined) {\n        this._startLevel = newLevel;\n      }\n\n      if (newLevel !== -1) {\n        this.level = newLevel;\n      }\n    }\n  }, {\n    key: \"firstLevel\",\n    get: function get() {\n      return this._firstLevel;\n    },\n    set: function set(newLevel) {\n      this._firstLevel = newLevel;\n    }\n  }, {\n    key: \"startLevel\",\n    get: function get() {\n      // hls.startLevel takes precedence over config.startLevel\n      // if none of these values are defined, fallback on this._firstLevel (first quality level appearing in variant manifest)\n      if (this._startLevel === undefined) {\n        var configStartLevel = this.hls.config.startLevel;\n\n        if (configStartLevel !== undefined) {\n          return configStartLevel;\n        } else {\n          return this._firstLevel;\n        }\n      } else {\n        return this._startLevel;\n      }\n    },\n    set: function set(newLevel) {\n      this._startLevel = newLevel;\n    }\n  }, {\n    key: \"nextLoadLevel\",\n    get: function get() {\n      if (this.manualLevelIndex !== -1) {\n        return this.manualLevelIndex;\n      } else {\n        return this.hls.nextAutoLevel;\n      }\n    },\n    set: function set(nextLevel) {\n      this.level = nextLevel;\n\n      if (this.manualLevelIndex === -1) {\n        this.hls.nextAutoLevel = nextLevel;\n      }\n    }\n  }]);\n\n  return LevelController;\n}(_base_playlist_controller__WEBPACK_IMPORTED_MODULE_5__[\"default\"]);\n\n\n\n/***/ }),\n\n/***/ \"./src/controller/level-helper.ts\":\n/*!****************************************!*\\\n  !*** ./src/controller/level-helper.ts ***!\n  \\****************************************/\n/*! exports provided: addGroupId, assignTrackIdsByGroup, updatePTS, updateFragPTSDTS, mergeDetails, mapPartIntersection, mapFragmentIntersection, adjustSliding, addSliding, computeReloadInterval, getFragmentWithSN, getPartWith */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_350421__) {\n\n\"use strict\";\n__nested_webpack_require_350421__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_350421__.d(__webpack_exports__, \"addGroupId\", function() { return addGroupId; });\n/* harmony export (binding) */ __nested_webpack_require_350421__.d(__webpack_exports__, \"assignTrackIdsByGroup\", function() { return assignTrackIdsByGroup; });\n/* harmony export (binding) */ __nested_webpack_require_350421__.d(__webpack_exports__, \"updatePTS\", function() { return updatePTS; });\n/* harmony export (binding) */ __nested_webpack_require_350421__.d(__webpack_exports__, \"updateFragPTSDTS\", function() { return updateFragPTSDTS; });\n/* harmony export (binding) */ __nested_webpack_require_350421__.d(__webpack_exports__, \"mergeDetails\", function() { return mergeDetails; });\n/* harmony export (binding) */ __nested_webpack_require_350421__.d(__webpack_exports__, \"mapPartIntersection\", function() { return mapPartIntersection; });\n/* harmony export (binding) */ __nested_webpack_require_350421__.d(__webpack_exports__, \"mapFragmentIntersection\", function() { return mapFragmentIntersection; });\n/* harmony export (binding) */ __nested_webpack_require_350421__.d(__webpack_exports__, \"adjustSliding\", function() { return adjustSliding; });\n/* harmony export (binding) */ __nested_webpack_require_350421__.d(__webpack_exports__, \"addSliding\", function() { return addSliding; });\n/* harmony export (binding) */ __nested_webpack_require_350421__.d(__webpack_exports__, \"computeReloadInterval\", function() { return computeReloadInterval; });\n/* harmony export (binding) */ __nested_webpack_require_350421__.d(__webpack_exports__, \"getFragmentWithSN\", function() { return getFragmentWithSN; });\n/* harmony export (binding) */ __nested_webpack_require_350421__.d(__webpack_exports__, \"getPartWith\", function() { return getPartWith; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_350421__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_350421__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _loader_date_range__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_350421__(/*! ../loader/date-range */ \"./src/loader/date-range.ts\");\n\n\n\n\n\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/**\n * @module LevelHelper\n * Providing methods dealing with playlist sliding and drift\n * */\n\n\nfunction addGroupId(level, type, id) {\n  switch (type) {\n    case 'audio':\n      if (!level.audioGroupIds) {\n        level.audioGroupIds = [];\n      }\n\n      level.audioGroupIds.push(id);\n      break;\n\n    case 'text':\n      if (!level.textGroupIds) {\n        level.textGroupIds = [];\n      }\n\n      level.textGroupIds.push(id);\n      break;\n  }\n}\nfunction assignTrackIdsByGroup(tracks) {\n  var groups = {};\n  tracks.forEach(function (track) {\n    var groupId = track.groupId || '';\n    track.id = groups[groupId] = groups[groupId] || 0;\n    groups[groupId]++;\n  });\n}\nfunction updatePTS(fragments, fromIdx, toIdx) {\n  var fragFrom = fragments[fromIdx];\n  var fragTo = fragments[toIdx];\n  updateFromToPTS(fragFrom, fragTo);\n}\n\nfunction updateFromToPTS(fragFrom, fragTo) {\n  var fragToPTS = fragTo.startPTS; // if we know startPTS[toIdx]\n\n  if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(fragToPTS)) {\n    // update fragment duration.\n    // it helps to fix drifts between playlist reported duration and fragment real duration\n    var duration = 0;\n    var frag;\n\n    if (fragTo.sn > fragFrom.sn) {\n      duration = fragToPTS - fragFrom.start;\n      frag = fragFrom;\n    } else {\n      duration = fragFrom.start - fragToPTS;\n      frag = fragTo;\n    } // TODO? Drift can go either way, or the playlist could be completely accurate\n    // console.assert(duration > 0,\n    //   `duration of ${duration} computed for frag ${frag.sn}, level ${frag.level}, there should be some duration drift between playlist and fragment!`);\n\n\n    if (frag.duration !== duration) {\n      frag.duration = duration;\n    } // we dont know startPTS[toIdx]\n\n  } else if (fragTo.sn > fragFrom.sn) {\n    var contiguous = fragFrom.cc === fragTo.cc; // TODO: With part-loading end/durations we need to confirm the whole fragment is loaded before using (or setting) minEndPTS\n\n    if (contiguous && fragFrom.minEndPTS) {\n      fragTo.start = fragFrom.start + (fragFrom.minEndPTS - fragFrom.start);\n    } else {\n      fragTo.start = fragFrom.start + fragFrom.duration;\n    }\n  } else {\n    fragTo.start = Math.max(fragFrom.start - fragTo.duration, 0);\n  }\n}\n\nfunction updateFragPTSDTS(details, frag, startPTS, endPTS, startDTS, endDTS) {\n  var parsedMediaDuration = endPTS - startPTS;\n\n  if (parsedMediaDuration <= 0) {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].warn('Fragment should have a positive duration', frag);\n    endPTS = startPTS + frag.duration;\n    endDTS = startDTS + frag.duration;\n  }\n\n  var maxStartPTS = startPTS;\n  var minEndPTS = endPTS;\n  var fragStartPts = frag.startPTS;\n  var fragEndPts = frag.endPTS;\n\n  if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(fragStartPts)) {\n    // delta PTS between audio and video\n    var deltaPTS = Math.abs(fragStartPts - startPTS);\n\n    if (!Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(frag.deltaPTS)) {\n      frag.deltaPTS = deltaPTS;\n    } else {\n      frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS);\n    }\n\n    maxStartPTS = Math.max(startPTS, fragStartPts);\n    startPTS = Math.min(startPTS, fragStartPts);\n    startDTS = Math.min(startDTS, frag.startDTS);\n    minEndPTS = Math.min(endPTS, fragEndPts);\n    endPTS = Math.max(endPTS, fragEndPts);\n    endDTS = Math.max(endDTS, frag.endDTS);\n  }\n\n  frag.duration = endPTS - startPTS;\n  var drift = startPTS - frag.start;\n  frag.appendedPTS = endPTS;\n  frag.start = frag.startPTS = startPTS;\n  frag.maxStartPTS = maxStartPTS;\n  frag.startDTS = startDTS;\n  frag.endPTS = endPTS;\n  frag.minEndPTS = minEndPTS;\n  frag.endDTS = endDTS;\n  var sn = frag.sn; // 'initSegment'\n  // exit if sn out of range\n\n  if (!details || sn < details.startSN || sn > details.endSN) {\n    return 0;\n  }\n\n  var i;\n  var fragIdx = sn - details.startSN;\n  var fragments = details.fragments; // update frag reference in fragments array\n  // rationale is that fragments array might not contain this frag object.\n  // this will happen if playlist has been refreshed between frag loading and call to updateFragPTSDTS()\n  // if we don't update frag, we won't be able to propagate PTS info on the playlist\n  // resulting in invalid sliding computation\n\n  fragments[fragIdx] = frag; // adjust fragment PTS/duration from seqnum-1 to frag 0\n\n  for (i = fragIdx; i > 0; i--) {\n    updateFromToPTS(fragments[i], fragments[i - 1]);\n  } // adjust fragment PTS/duration from seqnum to last frag\n\n\n  for (i = fragIdx; i < fragments.length - 1; i++) {\n    updateFromToPTS(fragments[i], fragments[i + 1]);\n  }\n\n  if (details.fragmentHint) {\n    updateFromToPTS(fragments[fragments.length - 1], details.fragmentHint);\n  }\n\n  details.PTSKnown = details.alignedSliding = true;\n  return drift;\n}\nfunction mergeDetails(oldDetails, newDetails) {\n  // Track the last initSegment processed. Initialize it to the last one on the timeline.\n  var currentInitSegment = null;\n  var oldFragments = oldDetails.fragments;\n\n  for (var i = oldFragments.length - 1; i >= 0; i--) {\n    var oldInit = oldFragments[i].initSegment;\n\n    if (oldInit) {\n      currentInitSegment = oldInit;\n      break;\n    }\n  }\n\n  if (oldDetails.fragmentHint) {\n    // prevent PTS and duration from being adjusted on the next hint\n    delete oldDetails.fragmentHint.endPTS;\n  } // check if old/new playlists have fragments in common\n  // loop through overlapping SN and update startPTS , cc, and duration if any found\n\n\n  var ccOffset = 0;\n  var PTSFrag;\n  mapFragmentIntersection(oldDetails, newDetails, function (oldFrag, newFrag) {\n    if (oldFrag.relurl) {\n      // Do not compare CC if the old fragment has no url. This is a level.fragmentHint used by LL-HLS parts.\n      // It maybe be off by 1 if it was created before any parts or discontinuity tags were appended to the end\n      // of the playlist.\n      ccOffset = oldFrag.cc - newFrag.cc;\n    }\n\n    if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(oldFrag.startPTS) && Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(oldFrag.endPTS)) {\n      newFrag.start = newFrag.startPTS = oldFrag.startPTS;\n      newFrag.startDTS = oldFrag.startDTS;\n      newFrag.appendedPTS = oldFrag.appendedPTS;\n      newFrag.maxStartPTS = oldFrag.maxStartPTS;\n      newFrag.endPTS = oldFrag.endPTS;\n      newFrag.endDTS = oldFrag.endDTS;\n      newFrag.minEndPTS = oldFrag.minEndPTS;\n      newFrag.duration = oldFrag.endPTS - oldFrag.startPTS;\n\n      if (newFrag.duration) {\n        PTSFrag = newFrag;\n      } // PTS is known when any segment has startPTS and endPTS\n\n\n      newDetails.PTSKnown = newDetails.alignedSliding = true;\n    }\n\n    newFrag.elementaryStreams = oldFrag.elementaryStreams;\n    newFrag.loader = oldFrag.loader;\n    newFrag.stats = oldFrag.stats;\n    newFrag.urlId = oldFrag.urlId;\n\n    if (oldFrag.initSegment) {\n      newFrag.initSegment = oldFrag.initSegment;\n      currentInitSegment = oldFrag.initSegment;\n    }\n  });\n\n  if (currentInitSegment) {\n    var fragmentsToCheck = newDetails.fragmentHint ? newDetails.fragments.concat(newDetails.fragmentHint) : newDetails.fragments;\n    fragmentsToCheck.forEach(function (frag) {\n      var _currentInitSegment;\n\n      if (!frag.initSegment || frag.initSegment.relurl === ((_currentInitSegment = currentInitSegment) === null || _currentInitSegment === void 0 ? void 0 : _currentInitSegment.relurl)) {\n        frag.initSegment = currentInitSegment;\n      }\n    });\n  }\n\n  if (newDetails.skippedSegments) {\n    newDetails.deltaUpdateFailed = newDetails.fragments.some(function (frag) {\n      return !frag;\n    });\n\n    if (newDetails.deltaUpdateFailed) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].warn('[level-helper] Previous playlist missing segments skipped in delta playlist');\n\n      for (var _i = newDetails.skippedSegments; _i--;) {\n        newDetails.fragments.shift();\n      }\n\n      newDetails.startSN = newDetails.fragments[0].sn;\n      newDetails.startCC = newDetails.fragments[0].cc;\n    } else if (newDetails.canSkipDateRanges) {\n      newDetails.dateRanges = mergeDateRanges(oldDetails.dateRanges, newDetails.dateRanges, newDetails.recentlyRemovedDateranges);\n    }\n  }\n\n  var newFragments = newDetails.fragments;\n\n  if (ccOffset) {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].warn('discontinuity sliding from playlist, take drift into account');\n\n    for (var _i2 = 0; _i2 < newFragments.length; _i2++) {\n      newFragments[_i2].cc += ccOffset;\n    }\n  }\n\n  if (newDetails.skippedSegments) {\n    newDetails.startCC = newDetails.fragments[0].cc;\n  } // Merge parts\n\n\n  mapPartIntersection(oldDetails.partList, newDetails.partList, function (oldPart, newPart) {\n    newPart.elementaryStreams = oldPart.elementaryStreams;\n    newPart.stats = oldPart.stats;\n  }); // if at least one fragment contains PTS info, recompute PTS information for all fragments\n\n  if (PTSFrag) {\n    updateFragPTSDTS(newDetails, PTSFrag, PTSFrag.startPTS, PTSFrag.endPTS, PTSFrag.startDTS, PTSFrag.endDTS);\n  } else {\n    // ensure that delta is within oldFragments range\n    // also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])\n    // in that case we also need to adjust start offset of all fragments\n    adjustSliding(oldDetails, newDetails);\n  }\n\n  if (newFragments.length) {\n    newDetails.totalduration = newDetails.edge - newFragments[0].start;\n  }\n\n  newDetails.driftStartTime = oldDetails.driftStartTime;\n  newDetails.driftStart = oldDetails.driftStart;\n  var advancedDateTime = newDetails.advancedDateTime;\n\n  if (newDetails.advanced && advancedDateTime) {\n    var edge = newDetails.edge;\n\n    if (!newDetails.driftStart) {\n      newDetails.driftStartTime = advancedDateTime;\n      newDetails.driftStart = edge;\n    }\n\n    newDetails.driftEndTime = advancedDateTime;\n    newDetails.driftEnd = edge;\n  } else {\n    newDetails.driftEndTime = oldDetails.driftEndTime;\n    newDetails.driftEnd = oldDetails.driftEnd;\n    newDetails.advancedDateTime = oldDetails.advancedDateTime;\n  }\n}\n\nfunction mergeDateRanges(oldDateRanges, deltaDateRanges, recentlyRemovedDateranges) {\n  var dateRanges = _extends({}, oldDateRanges);\n\n  if (recentlyRemovedDateranges) {\n    recentlyRemovedDateranges.forEach(function (id) {\n      delete dateRanges[id];\n    });\n  }\n\n  Object.keys(deltaDateRanges).forEach(function (id) {\n    var dateRange = new _loader_date_range__WEBPACK_IMPORTED_MODULE_2__[\"DateRange\"](deltaDateRanges[id].attr, dateRanges[id]);\n\n    if (dateRange.isValid) {\n      dateRanges[id] = dateRange;\n    } else {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].warn(\"Ignoring invalid Playlist Delta Update DATERANGE tag: \\\"\" + JSON.stringify(deltaDateRanges[id].attr) + \"\\\"\");\n    }\n  });\n  return dateRanges;\n}\n\nfunction mapPartIntersection(oldParts, newParts, intersectionFn) {\n  if (oldParts && newParts) {\n    var delta = 0;\n\n    for (var i = 0, len = oldParts.length; i <= len; i++) {\n      var _oldPart = oldParts[i];\n      var _newPart = newParts[i + delta];\n\n      if (_oldPart && _newPart && _oldPart.index === _newPart.index && _oldPart.fragment.sn === _newPart.fragment.sn) {\n        intersectionFn(_oldPart, _newPart);\n      } else {\n        delta--;\n      }\n    }\n  }\n}\nfunction mapFragmentIntersection(oldDetails, newDetails, intersectionFn) {\n  var skippedSegments = newDetails.skippedSegments;\n  var start = Math.max(oldDetails.startSN, newDetails.startSN) - newDetails.startSN;\n  var end = (oldDetails.fragmentHint ? 1 : 0) + (skippedSegments ? newDetails.endSN : Math.min(oldDetails.endSN, newDetails.endSN)) - newDetails.startSN;\n  var delta = newDetails.startSN - oldDetails.startSN;\n  var newFrags = newDetails.fragmentHint ? newDetails.fragments.concat(newDetails.fragmentHint) : newDetails.fragments;\n  var oldFrags = oldDetails.fragmentHint ? oldDetails.fragments.concat(oldDetails.fragmentHint) : oldDetails.fragments;\n\n  for (var i = start; i <= end; i++) {\n    var _oldFrag = oldFrags[delta + i];\n    var _newFrag = newFrags[i];\n\n    if (skippedSegments && !_newFrag && i < skippedSegments) {\n      // Fill in skipped segments in delta playlist\n      _newFrag = newDetails.fragments[i] = _oldFrag;\n    }\n\n    if (_oldFrag && _newFrag) {\n      intersectionFn(_oldFrag, _newFrag);\n    }\n  }\n}\nfunction adjustSliding(oldDetails, newDetails) {\n  var delta = newDetails.startSN + newDetails.skippedSegments - oldDetails.startSN;\n  var oldFragments = oldDetails.fragments;\n\n  if (delta < 0 || delta >= oldFragments.length) {\n    return;\n  }\n\n  addSliding(newDetails, oldFragments[delta].start);\n}\nfunction addSliding(details, start) {\n  if (start) {\n    var fragments = details.fragments;\n\n    for (var i = details.skippedSegments; i < fragments.length; i++) {\n      fragments[i].start += start;\n    }\n\n    if (details.fragmentHint) {\n      details.fragmentHint.start += start;\n    }\n  }\n}\nfunction computeReloadInterval(newDetails, stats) {\n  var reloadInterval = 1000 * newDetails.levelTargetDuration;\n  var reloadIntervalAfterMiss = reloadInterval / 2;\n  var timeSinceLastModified = newDetails.age;\n  var useLastModified = timeSinceLastModified > 0 && timeSinceLastModified < reloadInterval * 3;\n  var roundTrip = stats.loading.end - stats.loading.start;\n  var estimatedTimeUntilUpdate;\n  var availabilityDelay = newDetails.availabilityDelay; // let estimate = 'average';\n\n  if (newDetails.updated === false) {\n    if (useLastModified) {\n      // estimate = 'miss round trip';\n      // We should have had a hit so try again in the time it takes to get a response,\n      // but no less than 1/3 second.\n      var minRetry = 333 * newDetails.misses;\n      estimatedTimeUntilUpdate = Math.max(Math.min(reloadIntervalAfterMiss, roundTrip * 2), minRetry);\n      newDetails.availabilityDelay = (newDetails.availabilityDelay || 0) + estimatedTimeUntilUpdate;\n    } else {\n      // estimate = 'miss half average';\n      // follow HLS Spec, If the client reloads a Playlist file and finds that it has not\n      // changed then it MUST wait for a period of one-half the target\n      // duration before retrying.\n      estimatedTimeUntilUpdate = reloadIntervalAfterMiss;\n    }\n  } else if (useLastModified) {\n    // estimate = 'next modified date';\n    // Get the closest we've been to timeSinceLastModified on update\n    availabilityDelay = Math.min(availabilityDelay || reloadInterval / 2, timeSinceLastModified);\n    newDetails.availabilityDelay = availabilityDelay;\n    estimatedTimeUntilUpdate = availabilityDelay + reloadInterval - timeSinceLastModified;\n  } else {\n    estimatedTimeUntilUpdate = reloadInterval - roundTrip;\n  } // console.log(`[computeReloadInterval] live reload ${newDetails.updated ? 'REFRESHED' : 'MISSED'}`,\n  //   '\\n  method', estimate,\n  //   '\\n  estimated time until update =>', estimatedTimeUntilUpdate,\n  //   '\\n  average target duration', reloadInterval,\n  //   '\\n  time since modified', timeSinceLastModified,\n  //   '\\n  time round trip', roundTrip,\n  //   '\\n  availability delay', availabilityDelay);\n\n\n  return Math.round(estimatedTimeUntilUpdate);\n}\nfunction getFragmentWithSN(level, sn, fragCurrent) {\n  if (!level || !level.details) {\n    return null;\n  }\n\n  var levelDetails = level.details;\n  var fragment = levelDetails.fragments[sn - levelDetails.startSN];\n\n  if (fragment) {\n    return fragment;\n  }\n\n  fragment = levelDetails.fragmentHint;\n\n  if (fragment && fragment.sn === sn) {\n    return fragment;\n  }\n\n  if (sn < levelDetails.startSN && fragCurrent && fragCurrent.sn === sn) {\n    return fragCurrent;\n  }\n\n  return null;\n}\nfunction getPartWith(level, sn, partIndex) {\n  if (!level || !level.details) {\n    return null;\n  }\n\n  var partList = level.details.partList;\n\n  if (partList) {\n    for (var i = partList.length; i--;) {\n      var part = partList[i];\n\n      if (part.index === partIndex && part.fragment.sn === sn) {\n        return part;\n      }\n    }\n  }\n\n  return null;\n}\n\n/***/ }),\n\n/***/ \"./src/controller/stream-controller.ts\":\n/*!*********************************************!*\\\n  !*** ./src/controller/stream-controller.ts ***!\n  \\*********************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_369340__) {\n\n\"use strict\";\n__nested_webpack_require_369340__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_369340__.d(__webpack_exports__, \"default\", function() { return StreamController; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_369340__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_369340__(/*! ./base-stream-controller */ \"./src/controller/base-stream-controller.ts\");\n/* harmony import */ var _is_supported__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_369340__(/*! ../is-supported */ \"./src/is-supported.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_369340__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_369340__(/*! ../utils/buffer-helper */ \"./src/utils/buffer-helper.ts\");\n/* harmony import */ var _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_369340__(/*! ./fragment-tracker */ \"./src/controller/fragment-tracker.ts\");\n/* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_369340__(/*! ../types/loader */ \"./src/types/loader.ts\");\n/* harmony import */ var _loader_fragment__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_369340__(/*! ../loader/fragment */ \"./src/loader/fragment.ts\");\n/* harmony import */ var _demux_transmuxer_interface__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_369340__(/*! ../demux/transmuxer-interface */ \"./src/demux/transmuxer-interface.ts\");\n/* harmony import */ var _types_transmuxer__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_369340__(/*! ../types/transmuxer */ \"./src/types/transmuxer.ts\");\n/* harmony import */ var _gap_controller__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_369340__(/*! ./gap-controller */ \"./src/controller/gap-controller.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_369340__(/*! ../errors */ \"./src/errors.ts\");\n\n\n\n\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\n\n\n\n\nvar TICK_INTERVAL = 100; // how often to tick in ms\n\nvar StreamController = /*#__PURE__*/function (_BaseStreamController) {\n  _inheritsLoose(StreamController, _BaseStreamController);\n\n  function StreamController(hls, fragmentTracker) {\n    var _this;\n\n    _this = _BaseStreamController.call(this, hls, fragmentTracker, '[stream-controller]') || this;\n    _this.audioCodecSwap = false;\n    _this.gapController = null;\n    _this.level = -1;\n    _this._forceStartLoad = false;\n    _this.altAudio = false;\n    _this.audioOnly = false;\n    _this.fragPlaying = null;\n    _this.onvplaying = null;\n    _this.onvseeked = null;\n    _this.fragLastKbps = 0;\n    _this.couldBacktrack = false;\n    _this.backtrackFragment = null;\n    _this.audioCodecSwitch = false;\n    _this.videoBuffer = null;\n\n    _this._registerListeners();\n\n    return _this;\n  }\n\n  var _proto = StreamController.prototype;\n\n  _proto._registerListeners = function _registerListeners() {\n    var hls = this.hls;\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].LEVEL_LOADING, this.onLevelLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].ERROR, this.onError, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].BUFFER_CREATED, this.onBufferCreated, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].BUFFER_FLUSHED, this.onBufferFlushed, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].LEVELS_UPDATED, this.onLevelsUpdated, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].FRAG_BUFFERED, this.onFragBuffered, this);\n  };\n\n  _proto._unregisterListeners = function _unregisterListeners() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].ERROR, this.onError, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].BUFFER_CREATED, this.onBufferCreated, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].BUFFER_FLUSHED, this.onBufferFlushed, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].LEVELS_UPDATED, this.onLevelsUpdated, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].FRAG_BUFFERED, this.onFragBuffered, this);\n  };\n\n  _proto.onHandlerDestroying = function onHandlerDestroying() {\n    this._unregisterListeners();\n\n    this.onMediaDetaching();\n  };\n\n  _proto.startLoad = function startLoad(startPosition) {\n    if (this.levels) {\n      var lastCurrentTime = this.lastCurrentTime,\n          hls = this.hls;\n      this.stopLoad();\n      this.setInterval(TICK_INTERVAL);\n      this.level = -1;\n      this.fragLoadError = 0;\n\n      if (!this.startFragRequested) {\n        // determine load level\n        var startLevel = hls.startLevel;\n\n        if (startLevel === -1) {\n          if (hls.config.testBandwidth && this.levels.length > 1) {\n            // -1 : guess start Level by doing a bitrate test by loading first fragment of lowest quality level\n            startLevel = 0;\n            this.bitrateTest = true;\n          } else {\n            startLevel = hls.nextAutoLevel;\n          }\n        } // set new level to playlist loader : this will trigger start level load\n        // hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded\n\n\n        this.level = hls.nextLoadLevel = startLevel;\n        this.loadedmetadata = false;\n      } // if startPosition undefined but lastCurrentTime set, set startPosition to last currentTime\n\n\n      if (lastCurrentTime > 0 && startPosition === -1) {\n        this.log(\"Override startPosition with lastCurrentTime @\" + lastCurrentTime.toFixed(3));\n        startPosition = lastCurrentTime;\n      }\n\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n      this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;\n      this.tick();\n    } else {\n      this._forceStartLoad = true;\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].STOPPED;\n    }\n  };\n\n  _proto.stopLoad = function stopLoad() {\n    this._forceStartLoad = false;\n\n    _BaseStreamController.prototype.stopLoad.call(this);\n  };\n\n  _proto.doTick = function doTick() {\n    switch (this.state) {\n      case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE:\n        this.doTickIdle();\n        break;\n\n      case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_LEVEL:\n        {\n          var _levels$level;\n\n          var levels = this.levels,\n              level = this.level;\n          var details = levels === null || levels === void 0 ? void 0 : (_levels$level = levels[level]) === null || _levels$level === void 0 ? void 0 : _levels$level.details;\n\n          if (details && (!details.live || this.levelLastLoaded === this.level)) {\n            if (this.waitForCdnTuneIn(details)) {\n              break;\n            }\n\n            this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n            break;\n          }\n\n          break;\n        }\n\n      case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].FRAG_LOADING_WAITING_RETRY:\n        {\n          var _this$media;\n\n          var now = self.performance.now();\n          var retryDate = this.retryDate; // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading\n\n          if (!retryDate || now >= retryDate || (_this$media = this.media) !== null && _this$media !== void 0 && _this$media.seeking) {\n            this.log('retryDate reached, switch back to IDLE state');\n            this.resetStartWhenNotLoaded(this.level);\n            this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n          }\n        }\n        break;\n\n      default:\n        break;\n    } // check buffer\n    // check/update current fragment\n\n\n    this.onTickEnd();\n  };\n\n  _proto.onTickEnd = function onTickEnd() {\n    _BaseStreamController.prototype.onTickEnd.call(this);\n\n    this.checkBuffer();\n    this.checkFragmentChanged();\n  };\n\n  _proto.doTickIdle = function doTickIdle() {\n    var _frag$decryptdata, _frag$decryptdata2;\n\n    var hls = this.hls,\n        levelLastLoaded = this.levelLastLoaded,\n        levels = this.levels,\n        media = this.media;\n    var config = hls.config,\n        level = hls.nextLoadLevel; // if start level not parsed yet OR\n    // if video not attached AND start fragment already requested OR start frag prefetch not enabled\n    // exit loop, as we either need more info (level not parsed) or we need media to be attached to load new fragment\n\n    if (levelLastLoaded === null || !media && (this.startFragRequested || !config.startFragPrefetch)) {\n      return;\n    } // If the \"main\" level is audio-only but we are loading an alternate track in the same group, do not load anything\n\n\n    if (this.altAudio && this.audioOnly) {\n      return;\n    }\n\n    if (!levels || !levels[level]) {\n      return;\n    }\n\n    var levelInfo = levels[level]; // if buffer length is less than maxBufLen try to load a new fragment\n    // set next load level : this will trigger a playlist load if needed\n\n    this.level = hls.nextLoadLevel = level;\n    var levelDetails = levelInfo.details; // if level info not retrieved yet, switch state and wait for level retrieval\n    // if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load\n    // a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)\n\n    if (!levelDetails || this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_LEVEL || levelDetails.live && this.levelLastLoaded !== level) {\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_LEVEL;\n      return;\n    }\n\n    var bufferInfo = this.getMainFwdBufferInfo();\n\n    if (bufferInfo === null) {\n      return;\n    }\n\n    var bufferLen = bufferInfo.len; // compute max Buffer Length that we could get from this load level, based on level bitrate. don't buffer more than 60 MB and more than 30s\n\n    var maxBufLen = this.getMaxBufferLength(levelInfo.maxBitrate); // Stay idle if we are still with buffer margins\n\n    if (bufferLen >= maxBufLen) {\n      return;\n    }\n\n    if (this._streamEnded(bufferInfo, levelDetails)) {\n      var data = {};\n\n      if (this.altAudio) {\n        data.type = 'video';\n      }\n\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].BUFFER_EOS, data);\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].ENDED;\n      return;\n    }\n\n    if (this.backtrackFragment && this.backtrackFragment.start > bufferInfo.end) {\n      this.backtrackFragment = null;\n    }\n\n    var targetBufferTime = this.backtrackFragment ? this.backtrackFragment.start : bufferInfo.end;\n    var frag = this.getNextFragment(targetBufferTime, levelDetails); // Avoid backtracking by loading an earlier segment in streams with segments that do not start with a key frame (flagged by `couldBacktrack`)\n\n    if (this.couldBacktrack && !this.fragPrevious && frag && frag.sn !== 'initSegment' && this.fragmentTracker.getState(frag) !== _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__[\"FragmentState\"].OK) {\n      var _this$backtrackFragme;\n\n      var backtrackSn = ((_this$backtrackFragme = this.backtrackFragment) != null ? _this$backtrackFragme : frag).sn;\n      var fragIdx = backtrackSn - levelDetails.startSN;\n      var backtrackFrag = levelDetails.fragments[fragIdx - 1];\n\n      if (backtrackFrag && frag.cc === backtrackFrag.cc) {\n        frag = backtrackFrag;\n        this.fragmentTracker.removeFragment(backtrackFrag);\n      }\n    } else if (this.backtrackFragment && bufferInfo.len) {\n      this.backtrackFragment = null;\n    } // Avoid loop loading by using nextLoadPosition set for backtracking\n\n\n    if (frag && this.fragmentTracker.getState(frag) === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__[\"FragmentState\"].OK && this.nextLoadPosition > targetBufferTime) {\n      // Cleanup the fragment tracker before trying to find the next unbuffered fragment\n      var type = this.audioOnly && !this.altAudio ? _loader_fragment__WEBPACK_IMPORTED_MODULE_7__[\"ElementaryStreamTypes\"].AUDIO : _loader_fragment__WEBPACK_IMPORTED_MODULE_7__[\"ElementaryStreamTypes\"].VIDEO;\n\n      if (media) {\n        this.afterBufferFlushed(media, type, _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].MAIN);\n      }\n\n      frag = this.getNextFragment(this.nextLoadPosition, levelDetails);\n    }\n\n    if (!frag) {\n      return;\n    }\n\n    if (frag.initSegment && !frag.initSegment.data && !this.bitrateTest) {\n      frag = frag.initSegment;\n    } // We want to load the key if we're dealing with an identity key, because we will decrypt\n    // this content using the key we fetch. Other keys will be handled by the DRM CDM via EME.\n\n\n    if (((_frag$decryptdata = frag.decryptdata) === null || _frag$decryptdata === void 0 ? void 0 : _frag$decryptdata.keyFormat) === 'identity' && !((_frag$decryptdata2 = frag.decryptdata) !== null && _frag$decryptdata2 !== void 0 && _frag$decryptdata2.key)) {\n      this.loadKey(frag, levelDetails);\n    } else {\n      this.loadFragment(frag, levelDetails, targetBufferTime);\n    }\n  };\n\n  _proto.loadFragment = function loadFragment(frag, levelDetails, targetBufferTime) {\n    var _this$media2;\n\n    // Check if fragment is not loaded\n    var fragState = this.fragmentTracker.getState(frag);\n    this.fragCurrent = frag;\n\n    if (fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__[\"FragmentState\"].NOT_LOADED) {\n      if (frag.sn === 'initSegment') {\n        this._loadInitSegment(frag);\n      } else if (this.bitrateTest) {\n        this.log(\"Fragment \" + frag.sn + \" of level \" + frag.level + \" is being downloaded to test bitrate and will not be buffered\");\n\n        this._loadBitrateTestFrag(frag);\n      } else {\n        this.startFragRequested = true;\n\n        _BaseStreamController.prototype.loadFragment.call(this, frag, levelDetails, targetBufferTime);\n      }\n    } else if (fragState === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__[\"FragmentState\"].APPENDING) {\n      // Lower the buffer size and try again\n      if (this.reduceMaxBufferLength(frag.duration)) {\n        this.fragmentTracker.removeFragment(frag);\n      }\n    } else if (((_this$media2 = this.media) === null || _this$media2 === void 0 ? void 0 : _this$media2.buffered.length) === 0) {\n      // Stop gap for bad tracker / buffer flush behavior\n      this.fragmentTracker.removeAllFragments();\n    }\n  };\n\n  _proto.getAppendedFrag = function getAppendedFrag(position) {\n    var fragOrPart = this.fragmentTracker.getAppendedFrag(position, _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].MAIN);\n\n    if (fragOrPart && 'fragment' in fragOrPart) {\n      return fragOrPart.fragment;\n    }\n\n    return fragOrPart;\n  };\n\n  _proto.getBufferedFrag = function getBufferedFrag(position) {\n    return this.fragmentTracker.getBufferedFrag(position, _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].MAIN);\n  };\n\n  _proto.followingBufferedFrag = function followingBufferedFrag(frag) {\n    if (frag) {\n      // try to get range of next fragment (500ms after this range)\n      return this.getBufferedFrag(frag.end + 0.5);\n    }\n\n    return null;\n  }\n  /*\n    on immediate level switch :\n     - pause playback if playing\n     - cancel any pending load request\n     - and trigger a buffer flush\n  */\n  ;\n\n  _proto.immediateLevelSwitch = function immediateLevelSwitch() {\n    this.abortCurrentFrag();\n    this.flushMainBuffer(0, Number.POSITIVE_INFINITY);\n  }\n  /**\n   * try to switch ASAP without breaking video playback:\n   * in order to ensure smooth but quick level switching,\n   * we need to find the next flushable buffer range\n   * we should take into account new segment fetch time\n   */\n  ;\n\n  _proto.nextLevelSwitch = function nextLevelSwitch() {\n    var levels = this.levels,\n        media = this.media; // ensure that media is defined and that metadata are available (to retrieve currentTime)\n\n    if (media !== null && media !== void 0 && media.readyState) {\n      var fetchdelay;\n      var fragPlayingCurrent = this.getAppendedFrag(media.currentTime);\n\n      if (fragPlayingCurrent && fragPlayingCurrent.start > 1) {\n        // flush buffer preceding current fragment (flush until current fragment start offset)\n        // minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...\n        this.flushMainBuffer(0, fragPlayingCurrent.start - 1);\n      }\n\n      if (!media.paused && levels) {\n        // add a safety delay of 1s\n        var nextLevelId = this.hls.nextLoadLevel;\n        var nextLevel = levels[nextLevelId];\n        var fragLastKbps = this.fragLastKbps;\n\n        if (fragLastKbps && this.fragCurrent) {\n          fetchdelay = this.fragCurrent.duration * nextLevel.maxBitrate / (1000 * fragLastKbps) + 1;\n        } else {\n          fetchdelay = 0;\n        }\n      } else {\n        fetchdelay = 0;\n      } // this.log('fetchdelay:'+fetchdelay);\n      // find buffer range that will be reached once new fragment will be fetched\n\n\n      var bufferedFrag = this.getBufferedFrag(media.currentTime + fetchdelay);\n\n      if (bufferedFrag) {\n        // we can flush buffer range following this one without stalling playback\n        var nextBufferedFrag = this.followingBufferedFrag(bufferedFrag);\n\n        if (nextBufferedFrag) {\n          // if we are here, we can also cancel any loading/demuxing in progress, as they are useless\n          this.abortCurrentFrag(); // start flush position is in next buffered frag. Leave some padding for non-independent segments and smoother playback.\n\n          var maxStart = nextBufferedFrag.maxStartPTS ? nextBufferedFrag.maxStartPTS : nextBufferedFrag.start;\n          var fragDuration = nextBufferedFrag.duration;\n          var startPts = Math.max(bufferedFrag.end, maxStart + Math.min(Math.max(fragDuration - this.config.maxFragLookUpTolerance, fragDuration * 0.5), fragDuration * 0.75));\n          this.flushMainBuffer(startPts, Number.POSITIVE_INFINITY);\n        }\n      }\n    }\n  };\n\n  _proto.abortCurrentFrag = function abortCurrentFrag() {\n    var fragCurrent = this.fragCurrent;\n    this.fragCurrent = null;\n    this.backtrackFragment = null;\n\n    if (fragCurrent !== null && fragCurrent !== void 0 && fragCurrent.loader) {\n      fragCurrent.loader.abort();\n    }\n\n    switch (this.state) {\n      case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].KEY_LOADING:\n      case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].FRAG_LOADING:\n      case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].FRAG_LOADING_WAITING_RETRY:\n      case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].PARSING:\n      case _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].PARSED:\n        this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n        break;\n    }\n\n    this.nextLoadPosition = this.getLoadPosition();\n  };\n\n  _proto.flushMainBuffer = function flushMainBuffer(startOffset, endOffset) {\n    _BaseStreamController.prototype.flushMainBuffer.call(this, startOffset, endOffset, this.altAudio ? 'video' : null);\n  };\n\n  _proto.onMediaAttached = function onMediaAttached(event, data) {\n    _BaseStreamController.prototype.onMediaAttached.call(this, event, data);\n\n    var media = data.media;\n    this.onvplaying = this.onMediaPlaying.bind(this);\n    this.onvseeked = this.onMediaSeeked.bind(this);\n    media.addEventListener('playing', this.onvplaying);\n    media.addEventListener('seeked', this.onvseeked);\n    this.gapController = new _gap_controller__WEBPACK_IMPORTED_MODULE_10__[\"default\"](this.config, media, this.fragmentTracker, this.hls);\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    var media = this.media;\n\n    if (media && this.onvplaying && this.onvseeked) {\n      media.removeEventListener('playing', this.onvplaying);\n      media.removeEventListener('seeked', this.onvseeked);\n      this.onvplaying = this.onvseeked = null;\n      this.videoBuffer = null;\n    }\n\n    this.fragPlaying = null;\n\n    if (this.gapController) {\n      this.gapController.destroy();\n      this.gapController = null;\n    }\n\n    _BaseStreamController.prototype.onMediaDetaching.call(this);\n  };\n\n  _proto.onMediaPlaying = function onMediaPlaying() {\n    // tick to speed up FRAG_CHANGED triggering\n    this.tick();\n  };\n\n  _proto.onMediaSeeked = function onMediaSeeked() {\n    var media = this.media;\n    var currentTime = media ? media.currentTime : null;\n\n    if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(currentTime)) {\n      this.log(\"Media seeked to \" + currentTime.toFixed(3));\n    } // tick to speed up FRAG_CHANGED triggering\n\n\n    this.tick();\n  };\n\n  _proto.onManifestLoading = function onManifestLoading() {\n    // reset buffer on manifest loading\n    this.log('Trigger BUFFER_RESET');\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].BUFFER_RESET, undefined);\n    this.fragmentTracker.removeAllFragments();\n    this.couldBacktrack = false;\n    this.startPosition = this.lastCurrentTime = 0;\n    this.fragPlaying = null;\n    this.backtrackFragment = null;\n  };\n\n  _proto.onManifestParsed = function onManifestParsed(event, data) {\n    var aac = false;\n    var heaac = false;\n    var codec;\n    data.levels.forEach(function (level) {\n      // detect if we have different kind of audio codecs used amongst playlists\n      codec = level.audioCodec;\n\n      if (codec) {\n        if (codec.indexOf('mp4a.40.2') !== -1) {\n          aac = true;\n        }\n\n        if (codec.indexOf('mp4a.40.5') !== -1) {\n          heaac = true;\n        }\n      }\n    });\n    this.audioCodecSwitch = aac && heaac && !Object(_is_supported__WEBPACK_IMPORTED_MODULE_2__[\"changeTypeSupported\"])();\n\n    if (this.audioCodecSwitch) {\n      this.log('Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC');\n    }\n\n    this.levels = data.levels;\n    this.startFragRequested = false;\n  };\n\n  _proto.onLevelLoading = function onLevelLoading(event, data) {\n    var levels = this.levels;\n\n    if (!levels || this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE) {\n      return;\n    }\n\n    var level = levels[data.level];\n\n    if (!level.details || level.details.live && this.levelLastLoaded !== data.level || this.waitForCdnTuneIn(level.details)) {\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_LEVEL;\n    }\n  };\n\n  _proto.onLevelLoaded = function onLevelLoaded(event, data) {\n    var _curLevel$details;\n\n    var levels = this.levels;\n    var newLevelId = data.level;\n    var newDetails = data.details;\n    var duration = newDetails.totalduration;\n\n    if (!levels) {\n      this.warn(\"Levels were reset while loading level \" + newLevelId);\n      return;\n    }\n\n    this.log(\"Level \" + newLevelId + \" loaded [\" + newDetails.startSN + \",\" + newDetails.endSN + \"], cc [\" + newDetails.startCC + \", \" + newDetails.endCC + \"] duration:\" + duration);\n    var fragCurrent = this.fragCurrent;\n\n    if (fragCurrent && (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].FRAG_LOADING || this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].FRAG_LOADING_WAITING_RETRY)) {\n      if (fragCurrent.level !== data.level && fragCurrent.loader) {\n        this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n        this.backtrackFragment = null;\n        fragCurrent.loader.abort();\n      }\n    }\n\n    var curLevel = levels[newLevelId];\n    var sliding = 0;\n\n    if (newDetails.live || (_curLevel$details = curLevel.details) !== null && _curLevel$details !== void 0 && _curLevel$details.live) {\n      if (!newDetails.fragments[0]) {\n        newDetails.deltaUpdateFailed = true;\n      }\n\n      if (newDetails.deltaUpdateFailed) {\n        return;\n      }\n\n      sliding = this.alignPlaylists(newDetails, curLevel.details);\n    } // override level info\n\n\n    curLevel.details = newDetails;\n    this.levelLastLoaded = newLevelId;\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].LEVEL_UPDATED, {\n      details: newDetails,\n      level: newLevelId\n    }); // only switch back to IDLE state if we were waiting for level to start downloading a new fragment\n\n    if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_LEVEL) {\n      if (this.waitForCdnTuneIn(newDetails)) {\n        // Wait for Low-Latency CDN Tune-in\n        return;\n      }\n\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n    }\n\n    if (!this.startFragRequested) {\n      this.setStartPosition(newDetails, sliding);\n    } else if (newDetails.live) {\n      this.synchronizeToLiveEdge(newDetails);\n    } // trigger handler right now\n\n\n    this.tick();\n  };\n\n  _proto._handleFragmentLoadProgress = function _handleFragmentLoadProgress(data) {\n    var _frag$initSegment;\n\n    var frag = data.frag,\n        part = data.part,\n        payload = data.payload;\n    var levels = this.levels;\n\n    if (!levels) {\n      this.warn(\"Levels were reset while fragment load was in progress. Fragment \" + frag.sn + \" of level \" + frag.level + \" will not be buffered\");\n      return;\n    }\n\n    var currentLevel = levels[frag.level];\n    var details = currentLevel.details;\n\n    if (!details) {\n      this.warn(\"Dropping fragment \" + frag.sn + \" of level \" + frag.level + \" after level details were reset\");\n      return;\n    }\n\n    var videoCodec = currentLevel.videoCodec; // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)\n\n    var accurateTimeOffset = details.PTSKnown || !details.live;\n    var initSegmentData = (_frag$initSegment = frag.initSegment) === null || _frag$initSegment === void 0 ? void 0 : _frag$initSegment.data;\n\n    var audioCodec = this._getAudioCodec(currentLevel); // transmux the MPEG-TS data to ISO-BMFF segments\n    // this.log(`Transmuxing ${frag.sn} of [${details.startSN} ,${details.endSN}],level ${frag.level}, cc ${frag.cc}`);\n\n\n    var transmuxer = this.transmuxer = this.transmuxer || new _demux_transmuxer_interface__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.hls, _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].MAIN, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this));\n    var partIndex = part ? part.index : -1;\n    var partial = partIndex !== -1;\n    var chunkMeta = new _types_transmuxer__WEBPACK_IMPORTED_MODULE_9__[\"ChunkMetadata\"](frag.level, frag.sn, frag.stats.chunkCount, payload.byteLength, partIndex, partial);\n    var initPTS = this.initPTS[frag.cc];\n    transmuxer.push(payload, initSegmentData, audioCodec, videoCodec, frag, part, details.totalduration, accurateTimeOffset, chunkMeta, initPTS);\n  };\n\n  _proto.onAudioTrackSwitching = function onAudioTrackSwitching(event, data) {\n    // if any URL found on new audio track, it is an alternate audio track\n    var fromAltAudio = this.altAudio;\n    var altAudio = !!data.url;\n    var trackId = data.id; // if we switch on main audio, ensure that main fragment scheduling is synced with media.buffered\n    // don't do anything if we switch to alt audio: audio stream controller is handling it.\n    // we will just have to change buffer scheduling on audioTrackSwitched\n\n    if (!altAudio) {\n      if (this.mediaBuffer !== this.media) {\n        this.log('Switching on main audio, use media.buffered to schedule main fragment loading');\n        this.mediaBuffer = this.media;\n        var fragCurrent = this.fragCurrent; // we need to refill audio buffer from main: cancel any frag loading to speed up audio switch\n\n        if (fragCurrent !== null && fragCurrent !== void 0 && fragCurrent.loader) {\n          this.log('Switching to main audio track, cancel main fragment load');\n          fragCurrent.loader.abort();\n        } // destroy transmuxer to force init segment generation (following audio switch)\n\n\n        this.resetTransmuxer(); // switch to IDLE state to load new fragment\n\n        this.resetLoadingState();\n      } else if (this.audioOnly) {\n        // Reset audio transmuxer so when switching back to main audio we're not still appending where we left off\n        this.resetTransmuxer();\n      }\n\n      var hls = this.hls; // If switching from alt to main audio, flush all audio and trigger track switched\n\n      if (fromAltAudio) {\n        hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].BUFFER_FLUSHING, {\n          startOffset: 0,\n          endOffset: Number.POSITIVE_INFINITY,\n          type: 'audio'\n        });\n      }\n\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].AUDIO_TRACK_SWITCHED, {\n        id: trackId\n      });\n    }\n  };\n\n  _proto.onAudioTrackSwitched = function onAudioTrackSwitched(event, data) {\n    var trackId = data.id;\n    var altAudio = !!this.hls.audioTracks[trackId].url;\n\n    if (altAudio) {\n      var videoBuffer = this.videoBuffer; // if we switched on alternate audio, ensure that main fragment scheduling is synced with video sourcebuffer buffered\n\n      if (videoBuffer && this.mediaBuffer !== videoBuffer) {\n        this.log('Switching on alternate audio, use video.buffered to schedule main fragment loading');\n        this.mediaBuffer = videoBuffer;\n      }\n    }\n\n    this.altAudio = altAudio;\n    this.tick();\n  };\n\n  _proto.onBufferCreated = function onBufferCreated(event, data) {\n    var tracks = data.tracks;\n    var mediaTrack;\n    var name;\n    var alternate = false;\n\n    for (var type in tracks) {\n      var track = tracks[type];\n\n      if (track.id === 'main') {\n        name = type;\n        mediaTrack = track; // keep video source buffer reference\n\n        if (type === 'video') {\n          var videoTrack = tracks[type];\n\n          if (videoTrack) {\n            this.videoBuffer = videoTrack.buffer;\n          }\n        }\n      } else {\n        alternate = true;\n      }\n    }\n\n    if (alternate && mediaTrack) {\n      this.log(\"Alternate track found, use \" + name + \".buffered to schedule main fragment loading\");\n      this.mediaBuffer = mediaTrack.buffer;\n    } else {\n      this.mediaBuffer = this.media;\n    }\n  };\n\n  _proto.onFragBuffered = function onFragBuffered(event, data) {\n    var frag = data.frag,\n        part = data.part;\n\n    if (frag && frag.type !== _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].MAIN) {\n      return;\n    }\n\n    if (this.fragContextChanged(frag)) {\n      // If a level switch was requested while a fragment was buffering, it will emit the FRAG_BUFFERED event upon completion\n      // Avoid setting state back to IDLE, since that will interfere with a level switch\n      this.warn(\"Fragment \" + frag.sn + (part ? ' p: ' + part.index : '') + \" of level \" + frag.level + \" finished buffering, but was aborted. state: \" + this.state);\n\n      if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].PARSED) {\n        this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n      }\n\n      return;\n    }\n\n    var stats = part ? part.stats : frag.stats;\n    this.fragLastKbps = Math.round(8 * stats.total / (stats.buffering.end - stats.loading.first));\n\n    if (frag.sn !== 'initSegment') {\n      this.fragPrevious = frag;\n    }\n\n    this.fragBufferedComplete(frag, part);\n  };\n\n  _proto.onError = function onError(event, data) {\n    switch (data.details) {\n      case _errors__WEBPACK_IMPORTED_MODULE_11__[\"ErrorDetails\"].FRAG_LOAD_ERROR:\n      case _errors__WEBPACK_IMPORTED_MODULE_11__[\"ErrorDetails\"].FRAG_LOAD_TIMEOUT:\n      case _errors__WEBPACK_IMPORTED_MODULE_11__[\"ErrorDetails\"].KEY_LOAD_ERROR:\n      case _errors__WEBPACK_IMPORTED_MODULE_11__[\"ErrorDetails\"].KEY_LOAD_TIMEOUT:\n        this.onFragmentOrKeyLoadError(_types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].MAIN, data);\n        break;\n\n      case _errors__WEBPACK_IMPORTED_MODULE_11__[\"ErrorDetails\"].LEVEL_LOAD_ERROR:\n      case _errors__WEBPACK_IMPORTED_MODULE_11__[\"ErrorDetails\"].LEVEL_LOAD_TIMEOUT:\n        if (this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].ERROR) {\n          if (data.fatal) {\n            // if fatal error, stop processing\n            this.warn(\"\" + data.details);\n            this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].ERROR;\n          } else {\n            // in case of non fatal error while loading level, if level controller is not retrying to load level , switch back to IDLE\n            if (!data.levelRetry && this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].WAITING_LEVEL) {\n              this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n            }\n          }\n        }\n\n        break;\n\n      case _errors__WEBPACK_IMPORTED_MODULE_11__[\"ErrorDetails\"].BUFFER_FULL_ERROR:\n        // if in appending state\n        if (data.parent === 'main' && (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].PARSING || this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].PARSED)) {\n          var flushBuffer = true;\n          var bufferedInfo = this.getFwdBufferInfo(this.media, _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].MAIN); // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end\n          // reduce max buf len if current position is buffered\n\n          if (bufferedInfo && bufferedInfo.len > 0.5) {\n            flushBuffer = !this.reduceMaxBufferLength(bufferedInfo.len);\n          }\n\n          if (flushBuffer) {\n            // current position is not buffered, but browser is still complaining about buffer full error\n            // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708\n            // in that case flush the whole buffer to recover\n            this.warn('buffer full error also media.currentTime is not buffered, flush main'); // flush main buffer\n\n            this.immediateLevelSwitch();\n          }\n\n          this.resetLoadingState();\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  } // Checks the health of the buffer and attempts to resolve playback stalls.\n  ;\n\n  _proto.checkBuffer = function checkBuffer() {\n    var media = this.media,\n        gapController = this.gapController;\n\n    if (!media || !gapController || !media.readyState) {\n      // Exit early if we don't have media or if the media hasn't buffered anything yet (readyState 0)\n      return;\n    }\n\n    if (this.loadedmetadata || !_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__[\"BufferHelper\"].getBuffered(media).length) {\n      // Resolve gaps using the main buffer, whose ranges are the intersections of the A/V sourcebuffers\n      var activeFrag = this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE ? this.fragCurrent : null;\n      gapController.poll(this.lastCurrentTime, activeFrag);\n    }\n\n    this.lastCurrentTime = media.currentTime;\n  };\n\n  _proto.onFragLoadEmergencyAborted = function onFragLoadEmergencyAborted() {\n    this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE; // if loadedmetadata is not set, it means that we are emergency switch down on first frag\n    // in that case, reset startFragRequested flag\n\n    if (!this.loadedmetadata) {\n      this.startFragRequested = false;\n      this.nextLoadPosition = this.startPosition;\n    }\n\n    this.tickImmediate();\n  };\n\n  _proto.onBufferFlushed = function onBufferFlushed(event, _ref) {\n    var type = _ref.type;\n\n    if (type !== _loader_fragment__WEBPACK_IMPORTED_MODULE_7__[\"ElementaryStreamTypes\"].AUDIO || this.audioOnly && !this.altAudio) {\n      var media = (type === _loader_fragment__WEBPACK_IMPORTED_MODULE_7__[\"ElementaryStreamTypes\"].VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;\n      this.afterBufferFlushed(media, type, _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].MAIN);\n    }\n  };\n\n  _proto.onLevelsUpdated = function onLevelsUpdated(event, data) {\n    this.levels = data.levels;\n  };\n\n  _proto.swapAudioCodec = function swapAudioCodec() {\n    this.audioCodecSwap = !this.audioCodecSwap;\n  }\n  /**\n   * Seeks to the set startPosition if not equal to the mediaElement's current time.\n   */\n  ;\n\n  _proto.seekToStartPos = function seekToStartPos() {\n    var media = this.media;\n\n    if (!media) {\n      return;\n    }\n\n    var currentTime = media.currentTime;\n    var startPosition = this.startPosition; // only adjust currentTime if different from startPosition or if startPosition not buffered\n    // at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered\n\n    if (startPosition >= 0 && currentTime < startPosition) {\n      if (media.seeking) {\n        this.log(\"could not seek to \" + startPosition + \", already seeking at \" + currentTime);\n        return;\n      }\n\n      var buffered = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__[\"BufferHelper\"].getBuffered(media);\n      var bufferStart = buffered.length ? buffered.start(0) : 0;\n      var delta = bufferStart - startPosition;\n\n      if (delta > 0 && (delta < this.config.maxBufferHole || delta < this.config.maxFragLookUpTolerance)) {\n        this.log(\"adjusting start position by \" + delta + \" to match buffer start\");\n        startPosition += delta;\n        this.startPosition = startPosition;\n      }\n\n      this.log(\"seek to target start position \" + startPosition + \" from current time \" + currentTime);\n      media.currentTime = startPosition;\n    }\n  };\n\n  _proto._getAudioCodec = function _getAudioCodec(currentLevel) {\n    var audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;\n\n    if (this.audioCodecSwap && audioCodec) {\n      this.log('Swapping audio codec');\n\n      if (audioCodec.indexOf('mp4a.40.5') !== -1) {\n        audioCodec = 'mp4a.40.2';\n      } else {\n        audioCodec = 'mp4a.40.5';\n      }\n    }\n\n    return audioCodec;\n  };\n\n  _proto._loadBitrateTestFrag = function _loadBitrateTestFrag(frag) {\n    var _this2 = this;\n\n    frag.bitrateTest = true;\n\n    this._doFragLoad(frag).then(function (data) {\n      var hls = _this2.hls;\n\n      if (!data || hls.nextLoadLevel || _this2.fragContextChanged(frag)) {\n        return;\n      }\n\n      _this2.fragLoadError = 0;\n      _this2.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n      _this2.startFragRequested = false;\n      _this2.bitrateTest = false;\n      var stats = frag.stats; // Bitrate tests fragments are neither parsed nor buffered\n\n      stats.parsing.start = stats.parsing.end = stats.buffering.start = stats.buffering.end = self.performance.now();\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].FRAG_LOADED, data);\n      frag.bitrateTest = false;\n    });\n  };\n\n  _proto._handleTransmuxComplete = function _handleTransmuxComplete(transmuxResult) {\n    var _id3$samples;\n\n    var id = 'main';\n    var hls = this.hls;\n    var remuxResult = transmuxResult.remuxResult,\n        chunkMeta = transmuxResult.chunkMeta;\n    var context = this.getCurrentContext(chunkMeta);\n\n    if (!context) {\n      this.warn(\"The loading context changed while buffering fragment \" + chunkMeta.sn + \" of level \" + chunkMeta.level + \". This chunk will not be buffered.\");\n      this.resetStartWhenNotLoaded(chunkMeta.level);\n      return;\n    }\n\n    var frag = context.frag,\n        part = context.part,\n        level = context.level;\n    var video = remuxResult.video,\n        text = remuxResult.text,\n        id3 = remuxResult.id3,\n        initSegment = remuxResult.initSegment;\n    var details = level.details; // The audio-stream-controller handles audio buffering if Hls.js is playing an alternate audio track\n\n    var audio = this.altAudio ? undefined : remuxResult.audio; // Check if the current fragment has been aborted. We check this by first seeing if we're still playing the current level.\n    // If we are, subsequently check if the currently loading fragment (fragCurrent) has changed.\n\n    if (this.fragContextChanged(frag)) {\n      return;\n    }\n\n    this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].PARSING;\n\n    if (initSegment) {\n      if (initSegment.tracks) {\n        this._bufferInitSegment(level, initSegment.tracks, frag, chunkMeta);\n\n        hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].FRAG_PARSING_INIT_SEGMENT, {\n          frag: frag,\n          id: id,\n          tracks: initSegment.tracks\n        });\n      } // This would be nice if Number.isFinite acted as a typeguard, but it doesn't. See: https://github.com/Microsoft/TypeScript/issues/10038\n\n\n      var initPTS = initSegment.initPTS;\n      var timescale = initSegment.timescale;\n\n      if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(initPTS)) {\n        this.initPTS[frag.cc] = initPTS;\n        hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].INIT_PTS_FOUND, {\n          frag: frag,\n          id: id,\n          initPTS: initPTS,\n          timescale: timescale\n        });\n      }\n    } // Avoid buffering if backtracking this fragment\n\n\n    if (video && remuxResult.independent !== false) {\n      if (details) {\n        var startPTS = video.startPTS,\n            endPTS = video.endPTS,\n            startDTS = video.startDTS,\n            endDTS = video.endDTS;\n\n        if (part) {\n          part.elementaryStreams[video.type] = {\n            startPTS: startPTS,\n            endPTS: endPTS,\n            startDTS: startDTS,\n            endDTS: endDTS\n          };\n        } else {\n          if (video.firstKeyFrame && video.independent) {\n            this.couldBacktrack = true;\n          }\n\n          if (video.dropped && video.independent) {\n            // Backtrack if dropped frames create a gap after currentTime\n            var bufferInfo = this.getMainFwdBufferInfo();\n            var targetBufferTime = (bufferInfo ? bufferInfo.end : this.getLoadPosition()) + this.config.maxBufferHole;\n            var startTime = video.firstKeyFramePTS ? video.firstKeyFramePTS : startPTS;\n\n            if (targetBufferTime < startTime - this.config.maxBufferHole) {\n              this.backtrack(frag);\n              return;\n            } // Set video stream start to fragment start so that truncated samples do not distort the timeline, and mark it partial\n\n\n            frag.setElementaryStreamInfo(video.type, frag.start, endPTS, frag.start, endDTS, true);\n          }\n        }\n\n        frag.setElementaryStreamInfo(video.type, startPTS, endPTS, startDTS, endDTS);\n\n        if (this.backtrackFragment) {\n          this.backtrackFragment = frag;\n        }\n\n        this.bufferFragmentData(video, frag, part, chunkMeta);\n      }\n    } else if (remuxResult.independent === false) {\n      this.backtrack(frag);\n      return;\n    }\n\n    if (audio) {\n      var _startPTS = audio.startPTS,\n          _endPTS = audio.endPTS,\n          _startDTS = audio.startDTS,\n          _endDTS = audio.endDTS;\n\n      if (part) {\n        part.elementaryStreams[_loader_fragment__WEBPACK_IMPORTED_MODULE_7__[\"ElementaryStreamTypes\"].AUDIO] = {\n          startPTS: _startPTS,\n          endPTS: _endPTS,\n          startDTS: _startDTS,\n          endDTS: _endDTS\n        };\n      }\n\n      frag.setElementaryStreamInfo(_loader_fragment__WEBPACK_IMPORTED_MODULE_7__[\"ElementaryStreamTypes\"].AUDIO, _startPTS, _endPTS, _startDTS, _endDTS);\n      this.bufferFragmentData(audio, frag, part, chunkMeta);\n    }\n\n    if (details && id3 !== null && id3 !== void 0 && (_id3$samples = id3.samples) !== null && _id3$samples !== void 0 && _id3$samples.length) {\n      var emittedID3 = {\n        id: id,\n        frag: frag,\n        details: details,\n        samples: id3.samples\n      };\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].FRAG_PARSING_METADATA, emittedID3);\n    }\n\n    if (details && text) {\n      var emittedText = {\n        id: id,\n        frag: frag,\n        details: details,\n        samples: text.samples\n      };\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].FRAG_PARSING_USERDATA, emittedText);\n    }\n  };\n\n  _proto._bufferInitSegment = function _bufferInitSegment(currentLevel, tracks, frag, chunkMeta) {\n    var _this3 = this;\n\n    if (this.state !== _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].PARSING) {\n      return;\n    }\n\n    this.audioOnly = !!tracks.audio && !tracks.video; // if audio track is expected to come from audio stream controller, discard any coming from main\n\n    if (this.altAudio && !this.audioOnly) {\n      delete tracks.audio;\n    } // include levelCodec in audio and video tracks\n\n\n    var audio = tracks.audio,\n        video = tracks.video,\n        audiovideo = tracks.audiovideo;\n\n    if (audio) {\n      var audioCodec = currentLevel.audioCodec;\n      var ua = navigator.userAgent.toLowerCase();\n\n      if (this.audioCodecSwitch) {\n        if (audioCodec) {\n          if (audioCodec.indexOf('mp4a.40.5') !== -1) {\n            audioCodec = 'mp4a.40.2';\n          } else {\n            audioCodec = 'mp4a.40.5';\n          }\n        } // In the case that AAC and HE-AAC audio codecs are signalled in manifest,\n        // force HE-AAC, as it seems that most browsers prefers it.\n        // don't force HE-AAC if mono stream, or in Firefox\n\n\n        if (audio.metadata.channelCount !== 1 && ua.indexOf('firefox') === -1) {\n          audioCodec = 'mp4a.40.5';\n        }\n      } // HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise\n\n\n      if (ua.indexOf('android') !== -1 && audio.container !== 'audio/mpeg') {\n        // Exclude mpeg audio\n        audioCodec = 'mp4a.40.2';\n        this.log(\"Android: force audio codec to \" + audioCodec);\n      }\n\n      if (currentLevel.audioCodec && currentLevel.audioCodec !== audioCodec) {\n        this.log(\"Swapping manifest audio codec \\\"\" + currentLevel.audioCodec + \"\\\" for \\\"\" + audioCodec + \"\\\"\");\n      }\n\n      audio.levelCodec = audioCodec;\n      audio.id = 'main';\n      this.log(\"Init audio buffer, container:\" + audio.container + \", codecs[selected/level/parsed]=[\" + (audioCodec || '') + \"/\" + (currentLevel.audioCodec || '') + \"/\" + audio.codec + \"]\");\n    }\n\n    if (video) {\n      video.levelCodec = currentLevel.videoCodec;\n      video.id = 'main';\n      this.log(\"Init video buffer, container:\" + video.container + \", codecs[level/parsed]=[\" + (currentLevel.videoCodec || '') + \"/\" + video.codec + \"]\");\n    }\n\n    if (audiovideo) {\n      this.log(\"Init audiovideo buffer, container:\" + audiovideo.container + \", codecs[level/parsed]=[\" + (currentLevel.attrs.CODECS || '') + \"/\" + audiovideo.codec + \"]\");\n    }\n\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].BUFFER_CODECS, tracks); // loop through tracks that are going to be provided to bufferController\n\n    Object.keys(tracks).forEach(function (trackName) {\n      var track = tracks[trackName];\n      var initSegment = track.initSegment;\n\n      if (initSegment !== null && initSegment !== void 0 && initSegment.byteLength) {\n        _this3.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].BUFFER_APPENDING, {\n          type: trackName,\n          data: initSegment,\n          frag: frag,\n          part: null,\n          chunkMeta: chunkMeta,\n          parent: frag.type\n        });\n      }\n    }); // trigger handler right now\n\n    this.tick();\n  };\n\n  _proto.getMainFwdBufferInfo = function getMainFwdBufferInfo() {\n    return this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : this.media, _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].MAIN);\n  };\n\n  _proto.backtrack = function backtrack(frag) {\n    this.couldBacktrack = true; // Causes findFragments to backtrack through fragments to find the keyframe\n\n    this.backtrackFragment = frag;\n    this.resetTransmuxer();\n    this.flushBufferGap(frag);\n    this.fragmentTracker.removeFragment(frag);\n    this.fragPrevious = null;\n    this.nextLoadPosition = frag.start;\n    this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"State\"].IDLE;\n  };\n\n  _proto.checkFragmentChanged = function checkFragmentChanged() {\n    var video = this.media;\n    var fragPlayingCurrent = null;\n\n    if (video && video.readyState > 1 && video.seeking === false) {\n      var currentTime = video.currentTime;\n      /* if video element is in seeked state, currentTime can only increase.\n        (assuming that playback rate is positive ...)\n        As sometimes currentTime jumps back to zero after a\n        media decode error, check this, to avoid seeking back to\n        wrong position after a media decode error\n      */\n\n      if (_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__[\"BufferHelper\"].isBuffered(video, currentTime)) {\n        fragPlayingCurrent = this.getAppendedFrag(currentTime);\n      } else if (_utils_buffer_helper__WEBPACK_IMPORTED_MODULE_4__[\"BufferHelper\"].isBuffered(video, currentTime + 0.1)) {\n        /* ensure that FRAG_CHANGED event is triggered at startup,\n          when first video frame is displayed and playback is paused.\n          add a tolerance of 100ms, in case current position is not buffered,\n          check if current pos+100ms is buffered and use that buffer range\n          for FRAG_CHANGED event reporting */\n        fragPlayingCurrent = this.getAppendedFrag(currentTime + 0.1);\n      }\n\n      if (fragPlayingCurrent) {\n        this.backtrackFragment = null;\n        var fragPlaying = this.fragPlaying;\n        var fragCurrentLevel = fragPlayingCurrent.level;\n\n        if (!fragPlaying || fragPlayingCurrent.sn !== fragPlaying.sn || fragPlaying.level !== fragCurrentLevel || fragPlayingCurrent.urlId !== fragPlaying.urlId) {\n          this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].FRAG_CHANGED, {\n            frag: fragPlayingCurrent\n          });\n\n          if (!fragPlaying || fragPlaying.level !== fragCurrentLevel) {\n            this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].LEVEL_SWITCHED, {\n              level: fragCurrentLevel\n            });\n          }\n\n          this.fragPlaying = fragPlayingCurrent;\n        }\n      }\n    }\n  };\n\n  _createClass(StreamController, [{\n    key: \"nextLevel\",\n    get: function get() {\n      var frag = this.nextBufferedFrag;\n\n      if (frag) {\n        return frag.level;\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"currentFrag\",\n    get: function get() {\n      var media = this.media;\n\n      if (media) {\n        return this.fragPlaying || this.getAppendedFrag(media.currentTime);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"currentProgramDateTime\",\n    get: function get() {\n      var media = this.media;\n\n      if (media) {\n        var currentTime = media.currentTime;\n        var frag = this.currentFrag;\n\n        if (frag && Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(currentTime) && Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(frag.programDateTime)) {\n          var epocMs = frag.programDateTime + (currentTime - frag.start) * 1000;\n          return new Date(epocMs);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"currentLevel\",\n    get: function get() {\n      var frag = this.currentFrag;\n\n      if (frag) {\n        return frag.level;\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"nextBufferedFrag\",\n    get: function get() {\n      var frag = this.currentFrag;\n\n      if (frag) {\n        return this.followingBufferedFrag(frag);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"forceStartLoad\",\n    get: function get() {\n      return this._forceStartLoad;\n    }\n  }]);\n\n  return StreamController;\n}(_base_stream_controller__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n\n\n/***/ }),\n\n/***/ \"./src/controller/subtitle-stream-controller.ts\":\n/*!******************************************************!*\\\n  !*** ./src/controller/subtitle-stream-controller.ts ***!\n  \\******************************************************/\n/*! exports provided: SubtitleStreamController */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_424379__) {\n\n\"use strict\";\n__nested_webpack_require_424379__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_424379__.d(__webpack_exports__, \"SubtitleStreamController\", function() { return SubtitleStreamController; });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_424379__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_424379__(/*! ../utils/buffer-helper */ \"./src/utils/buffer-helper.ts\");\n/* harmony import */ var _fragment_finders__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_424379__(/*! ./fragment-finders */ \"./src/controller/fragment-finders.ts\");\n/* harmony import */ var _utils_discontinuities__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_424379__(/*! ../utils/discontinuities */ \"./src/utils/discontinuities.ts\");\n/* harmony import */ var _level_helper__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_424379__(/*! ./level-helper */ \"./src/controller/level-helper.ts\");\n/* harmony import */ var _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_424379__(/*! ./fragment-tracker */ \"./src/controller/fragment-tracker.ts\");\n/* harmony import */ var _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_424379__(/*! ./base-stream-controller */ \"./src/controller/base-stream-controller.ts\");\n/* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_424379__(/*! ../types/loader */ \"./src/types/loader.ts\");\n/* harmony import */ var _types_level__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_424379__(/*! ../types/level */ \"./src/types/level.ts\");\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\n\n\nvar TICK_INTERVAL = 500; // how often to tick in ms\n\nvar SubtitleStreamController = /*#__PURE__*/function (_BaseStreamController) {\n  _inheritsLoose(SubtitleStreamController, _BaseStreamController);\n\n  function SubtitleStreamController(hls, fragmentTracker) {\n    var _this;\n\n    _this = _BaseStreamController.call(this, hls, fragmentTracker, '[subtitle-stream-controller]') || this;\n    _this.levels = [];\n    _this.currentTrackId = -1;\n    _this.tracksBuffered = [];\n    _this.mainDetails = null;\n\n    _this._registerListeners();\n\n    return _this;\n  }\n\n  var _proto = SubtitleStreamController.prototype;\n\n  _proto.onHandlerDestroying = function onHandlerDestroying() {\n    this._unregisterListeners();\n\n    this.mainDetails = null;\n  };\n\n  _proto._registerListeners = function _registerListeners() {\n    var hls = this.hls;\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, this.onError, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].BUFFER_FLUSHING, this.onBufferFlushing, this);\n  };\n\n  _proto._unregisterListeners = function _unregisterListeners() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, this.onError, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].BUFFER_FLUSHING, this.onBufferFlushing, this);\n  };\n\n  _proto.startLoad = function startLoad() {\n    this.stopLoad();\n    this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__[\"State\"].IDLE;\n    this.setInterval(TICK_INTERVAL);\n    this.tick();\n  };\n\n  _proto.onManifestLoading = function onManifestLoading() {\n    this.mainDetails = null;\n    this.fragmentTracker.removeAllFragments();\n  };\n\n  _proto.onLevelLoaded = function onLevelLoaded(event, data) {\n    this.mainDetails = data.details;\n  };\n\n  _proto.onSubtitleFragProcessed = function onSubtitleFragProcessed(event, data) {\n    var frag = data.frag,\n        success = data.success;\n    this.fragPrevious = frag;\n    this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__[\"State\"].IDLE;\n\n    if (!success) {\n      return;\n    }\n\n    var buffered = this.tracksBuffered[this.currentTrackId];\n\n    if (!buffered) {\n      return;\n    } // Create/update a buffered array matching the interface used by BufferHelper.bufferedInfo\n    // so we can re-use the logic used to detect how much has been buffered\n\n\n    var timeRange;\n    var fragStart = frag.start;\n\n    for (var i = 0; i < buffered.length; i++) {\n      if (fragStart >= buffered[i].start && fragStart <= buffered[i].end) {\n        timeRange = buffered[i];\n        break;\n      }\n    }\n\n    var fragEnd = frag.start + frag.duration;\n\n    if (timeRange) {\n      timeRange.end = fragEnd;\n    } else {\n      timeRange = {\n        start: fragStart,\n        end: fragEnd\n      };\n      buffered.push(timeRange);\n    }\n\n    this.fragmentTracker.fragBuffered(frag);\n  };\n\n  _proto.onBufferFlushing = function onBufferFlushing(event, data) {\n    var startOffset = data.startOffset,\n        endOffset = data.endOffset;\n\n    if (startOffset === 0 && endOffset !== Number.POSITIVE_INFINITY) {\n      var currentTrackId = this.currentTrackId,\n          levels = this.levels;\n\n      if (!levels.length || !levels[currentTrackId] || !levels[currentTrackId].details) {\n        return;\n      }\n\n      var trackDetails = levels[currentTrackId].details;\n      var targetDuration = trackDetails.targetduration;\n      var endOffsetSubtitles = endOffset - targetDuration;\n\n      if (endOffsetSubtitles <= 0) {\n        return;\n      }\n\n      data.endOffsetSubtitles = Math.max(0, endOffsetSubtitles);\n      this.tracksBuffered.forEach(function (buffered) {\n        for (var i = 0; i < buffered.length;) {\n          if (buffered[i].end <= endOffsetSubtitles) {\n            buffered.shift();\n            continue;\n          } else if (buffered[i].start < endOffsetSubtitles) {\n            buffered[i].start = endOffsetSubtitles;\n          } else {\n            break;\n          }\n\n          i++;\n        }\n      });\n      this.fragmentTracker.removeFragmentsInRange(startOffset, endOffsetSubtitles, _types_loader__WEBPACK_IMPORTED_MODULE_7__[\"PlaylistLevelType\"].SUBTITLE);\n    }\n  } // If something goes wrong, proceed to next frag, if we were processing one.\n  ;\n\n  _proto.onError = function onError(event, data) {\n    var _this$fragCurrent;\n\n    var frag = data.frag; // don't handle error not related to subtitle fragment\n\n    if (!frag || frag.type !== _types_loader__WEBPACK_IMPORTED_MODULE_7__[\"PlaylistLevelType\"].SUBTITLE) {\n      return;\n    }\n\n    if ((_this$fragCurrent = this.fragCurrent) !== null && _this$fragCurrent !== void 0 && _this$fragCurrent.loader) {\n      this.fragCurrent.loader.abort();\n    }\n\n    this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__[\"State\"].IDLE;\n  } // Got all new subtitle levels.\n  ;\n\n  _proto.onSubtitleTracksUpdated = function onSubtitleTracksUpdated(event, _ref) {\n    var _this2 = this;\n\n    var subtitleTracks = _ref.subtitleTracks;\n    this.tracksBuffered = [];\n    this.levels = subtitleTracks.map(function (mediaPlaylist) {\n      return new _types_level__WEBPACK_IMPORTED_MODULE_8__[\"Level\"](mediaPlaylist);\n    });\n    this.fragmentTracker.removeAllFragments();\n    this.fragPrevious = null;\n    this.levels.forEach(function (level) {\n      _this2.tracksBuffered[level.id] = [];\n    });\n    this.mediaBuffer = null;\n  };\n\n  _proto.onSubtitleTrackSwitch = function onSubtitleTrackSwitch(event, data) {\n    this.currentTrackId = data.id;\n\n    if (!this.levels.length || this.currentTrackId === -1) {\n      this.clearInterval();\n      return;\n    } // Check if track has the necessary details to load fragments\n\n\n    var currentTrack = this.levels[this.currentTrackId];\n\n    if (currentTrack !== null && currentTrack !== void 0 && currentTrack.details) {\n      this.mediaBuffer = this.mediaBufferTimeRanges;\n    } else {\n      this.mediaBuffer = null;\n    }\n\n    if (currentTrack) {\n      this.setInterval(TICK_INTERVAL);\n    }\n  } // Got a new set of subtitle fragments.\n  ;\n\n  _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(event, data) {\n    var _track$details;\n\n    var newDetails = data.details,\n        trackId = data.id;\n    var currentTrackId = this.currentTrackId,\n        levels = this.levels;\n\n    if (!levels.length) {\n      return;\n    }\n\n    var track = levels[currentTrackId];\n\n    if (trackId >= levels.length || trackId !== currentTrackId || !track) {\n      return;\n    }\n\n    this.mediaBuffer = this.mediaBufferTimeRanges;\n\n    if (newDetails.live || (_track$details = track.details) !== null && _track$details !== void 0 && _track$details.live) {\n      var mainDetails = this.mainDetails;\n\n      if (newDetails.deltaUpdateFailed || !mainDetails) {\n        return;\n      }\n\n      var mainSlidingStartFragment = mainDetails.fragments[0];\n\n      if (!track.details) {\n        if (newDetails.hasProgramDateTime && mainDetails.hasProgramDateTime) {\n          Object(_utils_discontinuities__WEBPACK_IMPORTED_MODULE_3__[\"alignMediaPlaylistByPDT\"])(newDetails, mainDetails);\n        } else if (mainSlidingStartFragment) {\n          // line up live playlist with main so that fragments in range are loaded\n          Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__[\"addSliding\"])(newDetails, mainSlidingStartFragment.start);\n        }\n      } else {\n        var sliding = this.alignPlaylists(newDetails, track.details);\n\n        if (sliding === 0 && mainSlidingStartFragment) {\n          // realign with main when there is no overlap with last refresh\n          Object(_level_helper__WEBPACK_IMPORTED_MODULE_4__[\"addSliding\"])(newDetails, mainSlidingStartFragment.start);\n        }\n      }\n    }\n\n    track.details = newDetails;\n    this.levelLastLoaded = trackId; // trigger handler right now\n\n    this.tick(); // If playlist is misaligned because of bad PDT or drift, delete details to resync with main on reload\n\n    if (newDetails.live && !this.fragCurrent && this.media && this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__[\"State\"].IDLE) {\n      var foundFrag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_2__[\"findFragmentByPTS\"])(null, newDetails.fragments, this.media.currentTime, 0);\n\n      if (!foundFrag) {\n        this.warn('Subtitle playlist not aligned with playback');\n        track.details = undefined;\n      }\n    }\n  };\n\n  _proto._handleFragmentLoadComplete = function _handleFragmentLoadComplete(fragLoadedData) {\n    var frag = fragLoadedData.frag,\n        payload = fragLoadedData.payload;\n    var decryptData = frag.decryptdata;\n    var hls = this.hls;\n\n    if (this.fragContextChanged(frag)) {\n      return;\n    } // check to see if the payload needs to be decrypted\n\n\n    if (payload && payload.byteLength > 0 && decryptData && decryptData.key && decryptData.iv && decryptData.method === 'AES-128') {\n      var startTime = performance.now(); // decrypt the subtitles\n\n      this.decrypter.webCryptoDecrypt(new Uint8Array(payload), decryptData.key.buffer, decryptData.iv.buffer).then(function (decryptedData) {\n        var endTime = performance.now();\n        hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].FRAG_DECRYPTED, {\n          frag: frag,\n          payload: decryptedData,\n          stats: {\n            tstart: startTime,\n            tdecrypt: endTime\n          }\n        });\n      });\n    }\n  };\n\n  _proto.doTick = function doTick() {\n    if (!this.media) {\n      this.state = _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__[\"State\"].IDLE;\n      return;\n    }\n\n    if (this.state === _base_stream_controller__WEBPACK_IMPORTED_MODULE_6__[\"State\"].IDLE) {\n      var currentTrackId = this.currentTrackId,\n          levels = this.levels;\n\n      if (!levels.length || !levels[currentTrackId] || !levels[currentTrackId].details) {\n        return;\n      } // Expand range of subs loaded by one target-duration in either direction to make up for misaligned playlists\n\n\n      var trackDetails = levels[currentTrackId].details;\n      var targetDuration = trackDetails.targetduration;\n      var config = this.config,\n          media = this.media;\n      var bufferedInfo = _utils_buffer_helper__WEBPACK_IMPORTED_MODULE_1__[\"BufferHelper\"].bufferedInfo(this.tracksBuffered[this.currentTrackId] || [], media.currentTime - targetDuration, config.maxBufferHole);\n      var targetBufferTime = bufferedInfo.end,\n          bufferLen = bufferedInfo.len;\n      var maxBufLen = this.getMaxBufferLength() + targetDuration;\n\n      if (bufferLen > maxBufLen) {\n        return;\n      }\n\n      console.assert(trackDetails, 'Subtitle track details are defined on idle subtitle stream controller tick');\n      var fragments = trackDetails.fragments;\n      var fragLen = fragments.length;\n      var end = trackDetails.edge;\n      var foundFrag;\n      var fragPrevious = this.fragPrevious;\n\n      if (targetBufferTime < end) {\n        var maxFragLookUpTolerance = config.maxFragLookUpTolerance;\n        foundFrag = Object(_fragment_finders__WEBPACK_IMPORTED_MODULE_2__[\"findFragmentByPTS\"])(fragPrevious, fragments, Math.max(fragments[0].start, targetBufferTime), maxFragLookUpTolerance);\n\n        if (!foundFrag && fragPrevious && fragPrevious.start < fragments[0].start) {\n          foundFrag = fragments[0];\n        }\n      } else {\n        foundFrag = fragments[fragLen - 1];\n      }\n\n      foundFrag = this.mapToInitFragWhenRequired(foundFrag);\n\n      if (!foundFrag) {\n        return;\n      }\n\n      if (foundFrag.encrypted) {\n        this.loadKey(foundFrag, trackDetails);\n      } else if (this.fragmentTracker.getState(foundFrag) === _fragment_tracker__WEBPACK_IMPORTED_MODULE_5__[\"FragmentState\"].NOT_LOADED) {\n        // only load if fragment is not loaded\n        this.loadFragment(foundFrag, trackDetails, targetBufferTime);\n      }\n    }\n  };\n\n  _proto.loadFragment = function loadFragment(frag, levelDetails, targetBufferTime) {\n    this.fragCurrent = frag;\n\n    if (frag.sn === 'initSegment') {\n      this._loadInitSegment(frag);\n    } else {\n      _BaseStreamController.prototype.loadFragment.call(this, frag, levelDetails, targetBufferTime);\n    }\n  };\n\n  _createClass(SubtitleStreamController, [{\n    key: \"mediaBufferTimeRanges\",\n    get: function get() {\n      return new BufferableInstance(this.tracksBuffered[this.currentTrackId] || []);\n    }\n  }]);\n\n  return SubtitleStreamController;\n}(_base_stream_controller__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\n\nvar BufferableInstance = function BufferableInstance(timeranges) {\n  this.buffered = void 0;\n\n  var getRange = function getRange(name, index, length) {\n    index = index >>> 0;\n\n    if (index > length - 1) {\n      throw new DOMException(\"Failed to execute '\" + name + \"' on 'TimeRanges': The index provided (\" + index + \") is greater than the maximum bound (\" + length + \")\");\n    }\n\n    return timeranges[index][name];\n  };\n\n  this.buffered = {\n    get length() {\n      return timeranges.length;\n    },\n\n    end: function end(index) {\n      return getRange('end', index, timeranges.length);\n    },\n    start: function start(index) {\n      return getRange('start', index, timeranges.length);\n    }\n  };\n};\n\n/***/ }),\n\n/***/ \"./src/controller/subtitle-track-controller.ts\":\n/*!*****************************************************!*\\\n  !*** ./src/controller/subtitle-track-controller.ts ***!\n  \\*****************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_442181__) {\n\n\"use strict\";\n__nested_webpack_require_442181__.r(__webpack_exports__);\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_442181__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_442181__(/*! ../utils/texttrack-utils */ \"./src/utils/texttrack-utils.ts\");\n/* harmony import */ var _base_playlist_controller__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_442181__(/*! ./base-playlist-controller */ \"./src/controller/base-playlist-controller.ts\");\n/* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_442181__(/*! ../types/loader */ \"./src/types/loader.ts\");\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\nvar SubtitleTrackController = /*#__PURE__*/function (_BasePlaylistControll) {\n  _inheritsLoose(SubtitleTrackController, _BasePlaylistControll);\n\n  function SubtitleTrackController(hls) {\n    var _this;\n\n    _this = _BasePlaylistControll.call(this, hls, '[subtitle-track-controller]') || this;\n    _this.media = null;\n    _this.tracks = [];\n    _this.groupId = null;\n    _this.tracksInGroup = [];\n    _this.trackId = -1;\n    _this.selectDefaultTrack = true;\n    _this.queuedDefaultTrack = -1;\n\n    _this.trackChangeListener = function () {\n      return _this.onTextTracksChanged();\n    };\n\n    _this.asyncPollTrackChange = function () {\n      return _this.pollTrackChange(0);\n    };\n\n    _this.useTextTrackPolling = false;\n    _this.subtitlePollingInterval = -1;\n    _this._subtitleDisplay = true;\n\n    _this.registerListeners();\n\n    return _this;\n  }\n\n  var _proto = SubtitleTrackController.prototype;\n\n  _proto.destroy = function destroy() {\n    this.unregisterListeners();\n    this.tracks.length = 0;\n    this.tracksInGroup.length = 0;\n    this.trackChangeListener = this.asyncPollTrackChange = null;\n\n    _BasePlaylistControll.prototype.destroy.call(this);\n  };\n\n  _proto.registerListeners = function registerListeners() {\n    var hls = this.hls;\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].LEVEL_LOADING, this.onLevelLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].LEVEL_SWITCHING, this.onLevelSwitching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, this.onError, this);\n  };\n\n  _proto.unregisterListeners = function unregisterListeners() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].LEVEL_LOADING, this.onLevelLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].LEVEL_SWITCHING, this.onLevelSwitching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, this.onError, this);\n  } // Listen for subtitle track change, then extract the current track ID.\n  ;\n\n  _proto.onMediaAttached = function onMediaAttached(event, data) {\n    this.media = data.media;\n\n    if (!this.media) {\n      return;\n    }\n\n    if (this.queuedDefaultTrack > -1) {\n      this.subtitleTrack = this.queuedDefaultTrack;\n      this.queuedDefaultTrack = -1;\n    }\n\n    this.useTextTrackPolling = !(this.media.textTracks && 'onchange' in this.media.textTracks);\n\n    if (this.useTextTrackPolling) {\n      this.pollTrackChange(500);\n    } else {\n      this.media.textTracks.addEventListener('change', this.asyncPollTrackChange);\n    }\n  };\n\n  _proto.pollTrackChange = function pollTrackChange(timeout) {\n    self.clearInterval(this.subtitlePollingInterval);\n    this.subtitlePollingInterval = self.setInterval(this.trackChangeListener, timeout);\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    if (!this.media) {\n      return;\n    }\n\n    self.clearInterval(this.subtitlePollingInterval);\n\n    if (!this.useTextTrackPolling) {\n      this.media.textTracks.removeEventListener('change', this.asyncPollTrackChange);\n    }\n\n    if (this.trackId > -1) {\n      this.queuedDefaultTrack = this.trackId;\n    }\n\n    var textTracks = filterSubtitleTracks(this.media.textTracks); // Clear loaded cues on media detachment from tracks\n\n    textTracks.forEach(function (track) {\n      Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_1__[\"clearCurrentCues\"])(track);\n    }); // Disable all subtitle tracks before detachment so when reattached only tracks in that content are enabled.\n\n    this.subtitleTrack = -1;\n    this.media = null;\n  };\n\n  _proto.onManifestLoading = function onManifestLoading() {\n    this.tracks = [];\n    this.groupId = null;\n    this.tracksInGroup = [];\n    this.trackId = -1;\n    this.selectDefaultTrack = true;\n  } // Fired whenever a new manifest is loaded.\n  ;\n\n  _proto.onManifestParsed = function onManifestParsed(event, data) {\n    this.tracks = data.subtitleTracks;\n  };\n\n  _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(event, data) {\n    var id = data.id,\n        details = data.details;\n    var trackId = this.trackId;\n    var currentTrack = this.tracksInGroup[trackId];\n\n    if (!currentTrack) {\n      this.warn(\"Invalid subtitle track id \" + id);\n      return;\n    }\n\n    var curDetails = currentTrack.details;\n    currentTrack.details = data.details;\n    this.log(\"subtitle track \" + id + \" loaded [\" + details.startSN + \"-\" + details.endSN + \"]\");\n\n    if (id === this.trackId) {\n      this.retryCount = 0;\n      this.playlistLoaded(id, data, curDetails);\n    }\n  };\n\n  _proto.onLevelLoading = function onLevelLoading(event, data) {\n    this.switchLevel(data.level);\n  };\n\n  _proto.onLevelSwitching = function onLevelSwitching(event, data) {\n    this.switchLevel(data.level);\n  };\n\n  _proto.switchLevel = function switchLevel(levelIndex) {\n    var levelInfo = this.hls.levels[levelIndex];\n\n    if (!(levelInfo !== null && levelInfo !== void 0 && levelInfo.textGroupIds)) {\n      return;\n    }\n\n    var textGroupId = levelInfo.textGroupIds[levelInfo.urlId];\n\n    if (this.groupId !== textGroupId) {\n      var lastTrack = this.tracksInGroup ? this.tracksInGroup[this.trackId] : undefined;\n      var subtitleTracks = this.tracks.filter(function (track) {\n        return !textGroupId || track.groupId === textGroupId;\n      });\n      this.tracksInGroup = subtitleTracks;\n      var initialTrackId = this.findTrackId(lastTrack === null || lastTrack === void 0 ? void 0 : lastTrack.name) || this.findTrackId();\n      this.groupId = textGroupId;\n      var subtitleTracksUpdated = {\n        subtitleTracks: subtitleTracks\n      };\n      this.log(\"Updating subtitle tracks, \" + subtitleTracks.length + \" track(s) found in \\\"\" + textGroupId + \"\\\" group-id\");\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_TRACKS_UPDATED, subtitleTracksUpdated);\n\n      if (initialTrackId !== -1) {\n        this.setSubtitleTrack(initialTrackId, lastTrack);\n      }\n    }\n  };\n\n  _proto.findTrackId = function findTrackId(name) {\n    var textTracks = this.tracksInGroup;\n\n    for (var i = 0; i < textTracks.length; i++) {\n      var track = textTracks[i];\n\n      if (!this.selectDefaultTrack || track.default) {\n        if (!name || name === track.name) {\n          return track.id;\n        }\n      }\n    }\n\n    return -1;\n  };\n\n  _proto.onError = function onError(event, data) {\n    _BasePlaylistControll.prototype.onError.call(this, event, data);\n\n    if (data.fatal || !data.context) {\n      return;\n    }\n\n    if (data.context.type === _types_loader__WEBPACK_IMPORTED_MODULE_3__[\"PlaylistContextType\"].SUBTITLE_TRACK && data.context.id === this.trackId && data.context.groupId === this.groupId) {\n      this.retryLoadingOrFail(data);\n    }\n  }\n  /** get alternate subtitle tracks list from playlist **/\n  ;\n\n  _proto.loadPlaylist = function loadPlaylist(hlsUrlParameters) {\n    var currentTrack = this.tracksInGroup[this.trackId];\n\n    if (this.shouldLoadTrack(currentTrack)) {\n      var id = currentTrack.id;\n      var groupId = currentTrack.groupId;\n      var url = currentTrack.url;\n\n      if (hlsUrlParameters) {\n        try {\n          url = hlsUrlParameters.addDirectives(url);\n        } catch (error) {\n          this.warn(\"Could not construct new URL with HLS Delivery Directives: \" + error);\n        }\n      }\n\n      this.log(\"Loading subtitle playlist for id \" + id);\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_TRACK_LOADING, {\n        url: url,\n        id: id,\n        groupId: groupId,\n        deliveryDirectives: hlsUrlParameters || null\n      });\n    }\n  }\n  /**\n   * Disables the old subtitleTrack and sets current mode on the next subtitleTrack.\n   * This operates on the DOM textTracks.\n   * A value of -1 will disable all subtitle tracks.\n   */\n  ;\n\n  _proto.toggleTrackModes = function toggleTrackModes(newId) {\n    var _this2 = this;\n\n    var media = this.media,\n        trackId = this.trackId;\n\n    if (!media) {\n      return;\n    }\n\n    var textTracks = filterSubtitleTracks(media.textTracks);\n    var groupTracks = textTracks.filter(function (track) {\n      return track.groupId === _this2.groupId;\n    });\n\n    if (newId === -1) {\n      [].slice.call(textTracks).forEach(function (track) {\n        track.mode = 'disabled';\n      });\n    } else {\n      var oldTrack = groupTracks[trackId];\n\n      if (oldTrack) {\n        oldTrack.mode = 'disabled';\n      }\n    }\n\n    var nextTrack = groupTracks[newId];\n\n    if (nextTrack) {\n      nextTrack.mode = this.subtitleDisplay ? 'showing' : 'hidden';\n    }\n  }\n  /**\n   * This method is responsible for validating the subtitle index and periodically reloading if live.\n   * Dispatches the SUBTITLE_TRACK_SWITCH event, which instructs the subtitle-stream-controller to load the selected track.\n   */\n  ;\n\n  _proto.setSubtitleTrack = function setSubtitleTrack(newId, lastTrack) {\n    var _tracks$newId;\n\n    var tracks = this.tracksInGroup; // setting this.subtitleTrack will trigger internal logic\n    // if media has not been attached yet, it will fail\n    // we keep a reference to the default track id\n    // and we'll set subtitleTrack when onMediaAttached is triggered\n\n    if (!this.media) {\n      this.queuedDefaultTrack = newId;\n      return;\n    }\n\n    if (this.trackId !== newId) {\n      this.toggleTrackModes(newId);\n    } // exit if track id as already set or invalid\n\n\n    if (this.trackId === newId && (newId === -1 || (_tracks$newId = tracks[newId]) !== null && _tracks$newId !== void 0 && _tracks$newId.details) || newId < -1 || newId >= tracks.length) {\n      return;\n    } // stopping live reloading timer if any\n\n\n    this.clearTimer();\n    var track = tracks[newId];\n    this.log(\"Switching to subtitle track \" + newId);\n    this.trackId = newId;\n\n    if (track) {\n      var id = track.id,\n          _track$groupId = track.groupId,\n          groupId = _track$groupId === void 0 ? '' : _track$groupId,\n          name = track.name,\n          type = track.type,\n          url = track.url;\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_TRACK_SWITCH, {\n        id: id,\n        groupId: groupId,\n        name: name,\n        type: type,\n        url: url\n      });\n      var hlsUrlParameters = this.switchParams(track.url, lastTrack === null || lastTrack === void 0 ? void 0 : lastTrack.details);\n      this.loadPlaylist(hlsUrlParameters);\n    } else {\n      // switch to -1\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].SUBTITLE_TRACK_SWITCH, {\n        id: newId\n      });\n    }\n  };\n\n  _proto.onTextTracksChanged = function onTextTracksChanged() {\n    if (!this.useTextTrackPolling) {\n      self.clearInterval(this.subtitlePollingInterval);\n    } // Media is undefined when switching streams via loadSource()\n\n\n    if (!this.media || !this.hls.config.renderTextTracksNatively) {\n      return;\n    }\n\n    var trackId = -1;\n    var tracks = filterSubtitleTracks(this.media.textTracks);\n\n    for (var id = 0; id < tracks.length; id++) {\n      if (tracks[id].mode === 'hidden') {\n        // Do not break in case there is a following track with showing.\n        trackId = id;\n      } else if (tracks[id].mode === 'showing') {\n        trackId = id;\n        break;\n      }\n    } // Setting current subtitleTrack will invoke code.\n\n\n    if (this.subtitleTrack !== trackId) {\n      this.subtitleTrack = trackId;\n    }\n  };\n\n  _createClass(SubtitleTrackController, [{\n    key: \"subtitleDisplay\",\n    get: function get() {\n      return this._subtitleDisplay;\n    },\n    set: function set(value) {\n      this._subtitleDisplay = value;\n\n      if (this.trackId > -1) {\n        this.toggleTrackModes(this.trackId);\n      }\n    }\n  }, {\n    key: \"subtitleTracks\",\n    get: function get() {\n      return this.tracksInGroup;\n    }\n    /** get/set index of the selected subtitle track (based on index in subtitle track lists) **/\n\n  }, {\n    key: \"subtitleTrack\",\n    get: function get() {\n      return this.trackId;\n    },\n    set: function set(newId) {\n      this.selectDefaultTrack = false;\n      var lastTrack = this.tracksInGroup ? this.tracksInGroup[this.trackId] : undefined;\n      this.setSubtitleTrack(newId, lastTrack);\n    }\n  }]);\n\n  return SubtitleTrackController;\n}(_base_playlist_controller__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n\nfunction filterSubtitleTracks(textTrackList) {\n  var tracks = [];\n\n  for (var i = 0; i < textTrackList.length; i++) {\n    var track = textTrackList[i]; // Edge adds a track without a label; we don't want to use it\n\n    if (track.kind === 'subtitles' && track.label) {\n      tracks.push(textTrackList[i]);\n    }\n  }\n\n  return tracks;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (SubtitleTrackController);\n\n/***/ }),\n\n/***/ \"./src/controller/timeline-controller.ts\":\n/*!***********************************************!*\\\n  !*** ./src/controller/timeline-controller.ts ***!\n  \\***********************************************/\n/*! exports provided: TimelineController */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_457983__) {\n\n\"use strict\";\n__nested_webpack_require_457983__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_457983__.d(__webpack_exports__, \"TimelineController\", function() { return TimelineController; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_457983__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_457983__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _utils_cea_608_parser__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_457983__(/*! ../utils/cea-608-parser */ \"./src/utils/cea-608-parser.ts\");\n/* harmony import */ var _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_457983__(/*! ../utils/output-filter */ \"./src/utils/output-filter.ts\");\n/* harmony import */ var _utils_webvtt_parser__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_457983__(/*! ../utils/webvtt-parser */ \"./src/utils/webvtt-parser.ts\");\n/* harmony import */ var _utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_457983__(/*! ../utils/texttrack-utils */ \"./src/utils/texttrack-utils.ts\");\n/* harmony import */ var _utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_457983__(/*! ../utils/imsc1-ttml-parser */ \"./src/utils/imsc1-ttml-parser.ts\");\n/* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_457983__(/*! ../utils/mp4-tools */ \"./src/utils/mp4-tools.ts\");\n/* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_457983__(/*! ../types/loader */ \"./src/types/loader.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_457983__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n\n\n\n\n\n\n\n\n\n\n\nvar TimelineController = /*#__PURE__*/function () {\n  function TimelineController(hls) {\n    this.hls = void 0;\n    this.media = null;\n    this.config = void 0;\n    this.enabled = true;\n    this.Cues = void 0;\n    this.textTracks = [];\n    this.tracks = [];\n    this.initPTS = [];\n    this.timescale = [];\n    this.unparsedVttFrags = [];\n    this.captionsTracks = {};\n    this.nonNativeCaptionsTracks = {};\n    this.cea608Parser1 = void 0;\n    this.cea608Parser2 = void 0;\n    this.lastSn = -1;\n    this.lastPartIndex = -1;\n    this.prevCC = -1;\n    this.vttCCs = newVTTCCs();\n    this.captionsProperties = void 0;\n    this.hls = hls;\n    this.config = hls.config;\n    this.Cues = hls.config.cueHandler;\n    this.captionsProperties = {\n      textTrack1: {\n        label: this.config.captionsTextTrack1Label,\n        languageCode: this.config.captionsTextTrack1LanguageCode\n      },\n      textTrack2: {\n        label: this.config.captionsTextTrack2Label,\n        languageCode: this.config.captionsTextTrack2LanguageCode\n      },\n      textTrack3: {\n        label: this.config.captionsTextTrack3Label,\n        languageCode: this.config.captionsTextTrack3LanguageCode\n      },\n      textTrack4: {\n        label: this.config.captionsTextTrack4Label,\n        languageCode: this.config.captionsTextTrack4LanguageCode\n      }\n    };\n\n    if (this.config.enableCEA708Captions) {\n      var channel1 = new _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this, 'textTrack1');\n      var channel2 = new _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this, 'textTrack2');\n      var channel3 = new _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this, 'textTrack3');\n      var channel4 = new _utils_output_filter__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this, 'textTrack4');\n      this.cea608Parser1 = new _utils_cea_608_parser__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, channel1, channel2);\n      this.cea608Parser2 = new _utils_cea_608_parser__WEBPACK_IMPORTED_MODULE_2__[\"default\"](3, channel3, channel4);\n    }\n\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADED, this.onManifestLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_LOADING, this.onFragLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_LOADED, this.onFragLoaded, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_DECRYPTED, this.onFragDecrypted, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].INIT_PTS_FOUND, this.onInitPtsFound, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_FLUSHING, this.onBufferFlushing, this);\n  }\n\n  var _proto = TimelineController.prototype;\n\n  _proto.destroy = function destroy() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADED, this.onManifestLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_LOADING, this.onFragLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_LOADED, this.onFragLoaded, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_DECRYPTED, this.onFragDecrypted, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].INIT_PTS_FOUND, this.onInitPtsFound, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].BUFFER_FLUSHING, this.onBufferFlushing, this); // @ts-ignore\n\n    this.hls = this.config = this.cea608Parser1 = this.cea608Parser2 = null;\n  };\n\n  _proto.addCues = function addCues(trackName, startTime, endTime, screen, cueRanges) {\n    // skip cues which overlap more than 50% with previously parsed time ranges\n    var merged = false;\n\n    for (var i = cueRanges.length; i--;) {\n      var cueRange = cueRanges[i];\n      var overlap = intersection(cueRange[0], cueRange[1], startTime, endTime);\n\n      if (overlap >= 0) {\n        cueRange[0] = Math.min(cueRange[0], startTime);\n        cueRange[1] = Math.max(cueRange[1], endTime);\n        merged = true;\n\n        if (overlap / (endTime - startTime) > 0.5) {\n          return;\n        }\n      }\n    }\n\n    if (!merged) {\n      cueRanges.push([startTime, endTime]);\n    }\n\n    if (this.config.renderTextTracksNatively) {\n      var track = this.captionsTracks[trackName];\n      this.Cues.newCue(track, startTime, endTime, screen);\n    } else {\n      var cues = this.Cues.newCue(null, startTime, endTime, screen);\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].CUES_PARSED, {\n        type: 'captions',\n        cues: cues,\n        track: trackName\n      });\n    }\n  } // Triggered when an initial PTS is found; used for synchronisation of WebVTT.\n  ;\n\n  _proto.onInitPtsFound = function onInitPtsFound(event, _ref) {\n    var _this = this;\n\n    var frag = _ref.frag,\n        id = _ref.id,\n        initPTS = _ref.initPTS,\n        timescale = _ref.timescale;\n    var unparsedVttFrags = this.unparsedVttFrags;\n\n    if (id === 'main') {\n      this.initPTS[frag.cc] = initPTS;\n      this.timescale[frag.cc] = timescale;\n    } // Due to asynchronous processing, initial PTS may arrive later than the first VTT fragments are loaded.\n    // Parse any unparsed fragments upon receiving the initial PTS.\n\n\n    if (unparsedVttFrags.length) {\n      this.unparsedVttFrags = [];\n      unparsedVttFrags.forEach(function (frag) {\n        _this.onFragLoaded(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_LOADED, frag);\n      });\n    }\n  };\n\n  _proto.getExistingTrack = function getExistingTrack(trackName) {\n    var media = this.media;\n\n    if (media) {\n      for (var i = 0; i < media.textTracks.length; i++) {\n        var textTrack = media.textTracks[i];\n\n        if (textTrack[trackName]) {\n          return textTrack;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  _proto.createCaptionsTrack = function createCaptionsTrack(trackName) {\n    if (this.config.renderTextTracksNatively) {\n      this.createNativeTrack(trackName);\n    } else {\n      this.createNonNativeTrack(trackName);\n    }\n  };\n\n  _proto.createNativeTrack = function createNativeTrack(trackName) {\n    if (this.captionsTracks[trackName]) {\n      return;\n    }\n\n    var captionsProperties = this.captionsProperties,\n        captionsTracks = this.captionsTracks,\n        media = this.media;\n    var _captionsProperties$t = captionsProperties[trackName],\n        label = _captionsProperties$t.label,\n        languageCode = _captionsProperties$t.languageCode; // Enable reuse of existing text track.\n\n    var existingTrack = this.getExistingTrack(trackName);\n\n    if (!existingTrack) {\n      var textTrack = this.createTextTrack('captions', label, languageCode);\n\n      if (textTrack) {\n        // Set a special property on the track so we know it's managed by Hls.js\n        textTrack[trackName] = true;\n        captionsTracks[trackName] = textTrack;\n      }\n    } else {\n      captionsTracks[trackName] = existingTrack;\n      Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__[\"clearCurrentCues\"])(captionsTracks[trackName]);\n      Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__[\"sendAddTrackEvent\"])(captionsTracks[trackName], media);\n    }\n  };\n\n  _proto.createNonNativeTrack = function createNonNativeTrack(trackName) {\n    if (this.nonNativeCaptionsTracks[trackName]) {\n      return;\n    } // Create a list of a single track for the provider to consume\n\n\n    var trackProperties = this.captionsProperties[trackName];\n\n    if (!trackProperties) {\n      return;\n    }\n\n    var label = trackProperties.label;\n    var track = {\n      _id: trackName,\n      label: label,\n      kind: 'captions',\n      default: trackProperties.media ? !!trackProperties.media.default : false,\n      closedCaptions: trackProperties.media\n    };\n    this.nonNativeCaptionsTracks[trackName] = track;\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].NON_NATIVE_TEXT_TRACKS_FOUND, {\n      tracks: [track]\n    });\n  };\n\n  _proto.createTextTrack = function createTextTrack(kind, label, lang) {\n    var media = this.media;\n\n    if (!media) {\n      return;\n    }\n\n    return media.addTextTrack(kind, label, lang);\n  };\n\n  _proto.onMediaAttaching = function onMediaAttaching(event, data) {\n    this.media = data.media;\n\n    this._cleanTracks();\n  };\n\n  _proto.onMediaDetaching = function onMediaDetaching() {\n    var captionsTracks = this.captionsTracks;\n    Object.keys(captionsTracks).forEach(function (trackName) {\n      Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__[\"clearCurrentCues\"])(captionsTracks[trackName]);\n      delete captionsTracks[trackName];\n    });\n    this.nonNativeCaptionsTracks = {};\n  };\n\n  _proto.onManifestLoading = function onManifestLoading() {\n    this.lastSn = -1; // Detect discontinuity in fragment parsing\n\n    this.lastPartIndex = -1;\n    this.prevCC = -1;\n    this.vttCCs = newVTTCCs(); // Detect discontinuity in subtitle manifests\n\n    this._cleanTracks();\n\n    this.tracks = [];\n    this.captionsTracks = {};\n    this.nonNativeCaptionsTracks = {};\n    this.textTracks = [];\n    this.unparsedVttFrags = this.unparsedVttFrags || [];\n    this.initPTS = [];\n    this.timescale = [];\n\n    if (this.cea608Parser1 && this.cea608Parser2) {\n      this.cea608Parser1.reset();\n      this.cea608Parser2.reset();\n    }\n  };\n\n  _proto._cleanTracks = function _cleanTracks() {\n    // clear outdated subtitles\n    var media = this.media;\n\n    if (!media) {\n      return;\n    }\n\n    var textTracks = media.textTracks;\n\n    if (textTracks) {\n      for (var i = 0; i < textTracks.length; i++) {\n        Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__[\"clearCurrentCues\"])(textTracks[i]);\n      }\n    }\n  };\n\n  _proto.onSubtitleTracksUpdated = function onSubtitleTracksUpdated(event, data) {\n    var _this2 = this;\n\n    this.textTracks = [];\n    var tracks = data.subtitleTracks || [];\n    var hasIMSC1 = tracks.some(function (track) {\n      return track.textCodec === _utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__[\"IMSC1_CODEC\"];\n    });\n\n    if (this.config.enableWebVTT || hasIMSC1 && this.config.enableIMSC1) {\n      var sameTracks = this.tracks && tracks && this.tracks.length === tracks.length;\n      this.tracks = tracks || [];\n\n      if (this.config.renderTextTracksNatively) {\n        var inUseTracks = this.media ? this.media.textTracks : [];\n        this.tracks.forEach(function (track, index) {\n          var textTrack;\n\n          if (index < inUseTracks.length) {\n            var inUseTrack = null;\n\n            for (var i = 0; i < inUseTracks.length; i++) {\n              if (canReuseVttTextTrack(inUseTracks[i], track)) {\n                inUseTrack = inUseTracks[i];\n                break;\n              }\n            } // Reuse tracks with the same label, but do not reuse 608/708 tracks\n\n\n            if (inUseTrack) {\n              textTrack = inUseTrack;\n            }\n          }\n\n          if (textTrack) {\n            Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__[\"clearCurrentCues\"])(textTrack);\n          } else {\n            var textTrackKind = _this2._captionsOrSubtitlesFromCharacteristics(track);\n\n            textTrack = _this2.createTextTrack(textTrackKind, track.name, track.lang);\n\n            if (textTrack) {\n              textTrack.mode = 'disabled';\n            }\n          }\n\n          if (textTrack) {\n            textTrack.groupId = track.groupId;\n\n            _this2.textTracks.push(textTrack);\n          }\n        });\n      } else if (!sameTracks && this.tracks && this.tracks.length) {\n        // Create a list of tracks for the provider to consume\n        var tracksList = this.tracks.map(function (track) {\n          return {\n            label: track.name,\n            kind: track.type.toLowerCase(),\n            default: track.default,\n            subtitleTrack: track\n          };\n        });\n        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].NON_NATIVE_TEXT_TRACKS_FOUND, {\n          tracks: tracksList\n        });\n      }\n    }\n  };\n\n  _proto._captionsOrSubtitlesFromCharacteristics = function _captionsOrSubtitlesFromCharacteristics(track) {\n    var _track$attrs;\n\n    if ((_track$attrs = track.attrs) !== null && _track$attrs !== void 0 && _track$attrs.CHARACTERISTICS) {\n      var transcribesSpokenDialog = /transcribes-spoken-dialog/gi.test(track.attrs.CHARACTERISTICS);\n      var describesMusicAndSound = /describes-music-and-sound/gi.test(track.attrs.CHARACTERISTICS);\n\n      if (transcribesSpokenDialog && describesMusicAndSound) {\n        return 'captions';\n      }\n    }\n\n    return 'subtitles';\n  };\n\n  _proto.onManifestLoaded = function onManifestLoaded(event, data) {\n    var _this3 = this;\n\n    if (this.config.enableCEA708Captions && data.captions) {\n      data.captions.forEach(function (captionsTrack) {\n        var instreamIdMatch = /(?:CC|SERVICE)([1-4])/.exec(captionsTrack.instreamId);\n\n        if (!instreamIdMatch) {\n          return;\n        }\n\n        var trackName = \"textTrack\" + instreamIdMatch[1];\n        var trackProperties = _this3.captionsProperties[trackName];\n\n        if (!trackProperties) {\n          return;\n        }\n\n        trackProperties.label = captionsTrack.name;\n\n        if (captionsTrack.lang) {\n          // optional attribute\n          trackProperties.languageCode = captionsTrack.lang;\n        }\n\n        trackProperties.media = captionsTrack;\n      });\n    }\n  };\n\n  _proto.onFragLoading = function onFragLoading(event, data) {\n    var cea608Parser1 = this.cea608Parser1,\n        cea608Parser2 = this.cea608Parser2,\n        lastSn = this.lastSn,\n        lastPartIndex = this.lastPartIndex;\n\n    if (!this.enabled || !(cea608Parser1 && cea608Parser2)) {\n      return;\n    } // if this frag isn't contiguous, clear the parser so cues with bad start/end times aren't added to the textTrack\n\n\n    if (data.frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_8__[\"PlaylistLevelType\"].MAIN) {\n      var _data$part$index, _data$part;\n\n      var sn = data.frag.sn;\n      var partIndex = (_data$part$index = data === null || data === void 0 ? void 0 : (_data$part = data.part) === null || _data$part === void 0 ? void 0 : _data$part.index) != null ? _data$part$index : -1;\n\n      if (!(sn === lastSn + 1 || sn === lastSn && partIndex === lastPartIndex + 1)) {\n        cea608Parser1.reset();\n        cea608Parser2.reset();\n      }\n\n      this.lastSn = sn;\n      this.lastPartIndex = partIndex;\n    }\n  };\n\n  _proto.onFragLoaded = function onFragLoaded(event, data) {\n    var frag = data.frag,\n        payload = data.payload;\n    var initPTS = this.initPTS,\n        unparsedVttFrags = this.unparsedVttFrags;\n\n    if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_8__[\"PlaylistLevelType\"].SUBTITLE) {\n      // If fragment is subtitle type, parse as WebVTT.\n      if (payload.byteLength) {\n        // We need an initial synchronisation PTS. Store fragments as long as none has arrived.\n        if (!Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(initPTS[frag.cc])) {\n          unparsedVttFrags.push(data);\n\n          if (initPTS.length) {\n            // finish unsuccessfully, otherwise the subtitle-stream-controller could be blocked from loading new frags.\n            this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].SUBTITLE_FRAG_PROCESSED, {\n              success: false,\n              frag: frag,\n              error: new Error('Missing initial subtitle PTS')\n            });\n          }\n\n          return;\n        }\n\n        var decryptData = frag.decryptdata; // fragment after decryption has a stats object\n\n        var decrypted = ('stats' in data); // If the subtitles are not encrypted, parse VTTs now. Otherwise, we need to wait.\n\n        if (decryptData == null || decryptData.key == null || decryptData.method !== 'AES-128' || decrypted) {\n          var trackPlaylistMedia = this.tracks[frag.level];\n          var vttCCs = this.vttCCs;\n\n          if (!vttCCs[frag.cc]) {\n            vttCCs[frag.cc] = {\n              start: frag.start,\n              prevCC: this.prevCC,\n              new: true\n            };\n            this.prevCC = frag.cc;\n          }\n\n          if (trackPlaylistMedia && trackPlaylistMedia.textCodec === _utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__[\"IMSC1_CODEC\"]) {\n            this._parseIMSC1(frag, payload);\n          } else {\n            this._parseVTTs(frag, payload, vttCCs);\n          }\n        }\n      } else {\n        // In case there is no payload, finish unsuccessfully.\n        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].SUBTITLE_FRAG_PROCESSED, {\n          success: false,\n          frag: frag,\n          error: new Error('Empty subtitle payload')\n        });\n      }\n    }\n  };\n\n  _proto._parseIMSC1 = function _parseIMSC1(frag, payload) {\n    var _this4 = this;\n\n    var hls = this.hls;\n    Object(_utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__[\"parseIMSC1\"])(payload, this.initPTS[frag.cc], this.timescale[frag.cc], function (cues) {\n      _this4._appendCues(cues, frag.level);\n\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].SUBTITLE_FRAG_PROCESSED, {\n        success: true,\n        frag: frag\n      });\n    }, function (error) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log(\"Failed to parse IMSC1: \" + error);\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].SUBTITLE_FRAG_PROCESSED, {\n        success: false,\n        frag: frag,\n        error: error\n      });\n    });\n  };\n\n  _proto._parseVTTs = function _parseVTTs(frag, payload, vttCCs) {\n    var _frag$initSegment,\n        _this5 = this;\n\n    var hls = this.hls; // Parse the WebVTT file contents.\n\n    var payloadWebVTT = (_frag$initSegment = frag.initSegment) !== null && _frag$initSegment !== void 0 && _frag$initSegment.data ? Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_7__[\"appendUint8Array\"])(frag.initSegment.data, new Uint8Array(payload)) : payload;\n    Object(_utils_webvtt_parser__WEBPACK_IMPORTED_MODULE_4__[\"parseWebVTT\"])(payloadWebVTT, this.initPTS[frag.cc], this.timescale[frag.cc], vttCCs, frag.cc, frag.start, function (cues) {\n      _this5._appendCues(cues, frag.level);\n\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].SUBTITLE_FRAG_PROCESSED, {\n        success: true,\n        frag: frag\n      });\n    }, function (error) {\n      _this5._fallbackToIMSC1(frag, payload); // Something went wrong while parsing. Trigger event with success false.\n\n\n      _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log(\"Failed to parse VTT cue: \" + error);\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].SUBTITLE_FRAG_PROCESSED, {\n        success: false,\n        frag: frag,\n        error: error\n      });\n    });\n  };\n\n  _proto._fallbackToIMSC1 = function _fallbackToIMSC1(frag, payload) {\n    var _this6 = this;\n\n    // If textCodec is unknown, try parsing as IMSC1. Set textCodec based on the result\n    var trackPlaylistMedia = this.tracks[frag.level];\n\n    if (!trackPlaylistMedia.textCodec) {\n      Object(_utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__[\"parseIMSC1\"])(payload, this.initPTS[frag.cc], this.timescale[frag.cc], function () {\n        trackPlaylistMedia.textCodec = _utils_imsc1_ttml_parser__WEBPACK_IMPORTED_MODULE_6__[\"IMSC1_CODEC\"];\n\n        _this6._parseIMSC1(frag, payload);\n      }, function () {\n        trackPlaylistMedia.textCodec = 'wvtt';\n      });\n    }\n  };\n\n  _proto._appendCues = function _appendCues(cues, fragLevel) {\n    var hls = this.hls;\n\n    if (this.config.renderTextTracksNatively) {\n      var textTrack = this.textTracks[fragLevel]; // WebVTTParser.parse is an async method and if the currently selected text track mode is set to \"disabled\"\n      // before parsing is done then don't try to access currentTrack.cues.getCueById as cues will be null\n      // and trying to access getCueById method of cues will throw an exception\n      // Because we check if the mode is disabled, we can force check `cues` below. They can't be null.\n\n      if (!textTrack || textTrack.mode === 'disabled') {\n        return;\n      }\n\n      cues.forEach(function (cue) {\n        return Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__[\"addCueToTrack\"])(textTrack, cue);\n      });\n    } else {\n      var currentTrack = this.tracks[fragLevel];\n\n      if (!currentTrack) {\n        return;\n      }\n\n      var track = currentTrack.default ? 'default' : 'subtitles' + fragLevel;\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].CUES_PARSED, {\n        type: 'subtitles',\n        cues: cues,\n        track: track\n      });\n    }\n  };\n\n  _proto.onFragDecrypted = function onFragDecrypted(event, data) {\n    var frag = data.frag;\n\n    if (frag.type === _types_loader__WEBPACK_IMPORTED_MODULE_8__[\"PlaylistLevelType\"].SUBTITLE) {\n      if (!Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(this.initPTS[frag.cc])) {\n        this.unparsedVttFrags.push(data);\n        return;\n      }\n\n      this.onFragLoaded(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_LOADED, data);\n    }\n  };\n\n  _proto.onSubtitleTracksCleared = function onSubtitleTracksCleared() {\n    this.tracks = [];\n    this.captionsTracks = {};\n  };\n\n  _proto.onFragParsingUserdata = function onFragParsingUserdata(event, data) {\n    var cea608Parser1 = this.cea608Parser1,\n        cea608Parser2 = this.cea608Parser2;\n\n    if (!this.enabled || !(cea608Parser1 && cea608Parser2)) {\n      return;\n    } // If the event contains captions (found in the bytes property), push all bytes into the parser immediately\n    // It will create the proper timestamps based on the PTS value\n\n\n    for (var i = 0; i < data.samples.length; i++) {\n      var ccBytes = data.samples[i].bytes;\n\n      if (ccBytes) {\n        var ccdatas = this.extractCea608Data(ccBytes);\n        cea608Parser1.addData(data.samples[i].pts, ccdatas[0]);\n        cea608Parser2.addData(data.samples[i].pts, ccdatas[1]);\n      }\n    }\n  };\n\n  _proto.onBufferFlushing = function onBufferFlushing(event, _ref2) {\n    var startOffset = _ref2.startOffset,\n        endOffset = _ref2.endOffset,\n        endOffsetSubtitles = _ref2.endOffsetSubtitles,\n        type = _ref2.type;\n    var media = this.media;\n\n    if (!media || media.currentTime < endOffset) {\n      return;\n    } // Clear 608 caption cues from the captions TextTracks when the video back buffer is flushed\n    // Forward cues are never removed because we can loose streamed 608 content from recent fragments\n\n\n    if (!type || type === 'video') {\n      var captionsTracks = this.captionsTracks;\n      Object.keys(captionsTracks).forEach(function (trackName) {\n        return Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__[\"removeCuesInRange\"])(captionsTracks[trackName], startOffset, endOffset);\n      });\n    }\n\n    if (this.config.renderTextTracksNatively) {\n      // Clear VTT/IMSC1 subtitle cues from the subtitle TextTracks when the back buffer is flushed\n      if (startOffset === 0 && endOffsetSubtitles !== undefined) {\n        var textTracks = this.textTracks;\n        Object.keys(textTracks).forEach(function (trackName) {\n          return Object(_utils_texttrack_utils__WEBPACK_IMPORTED_MODULE_5__[\"removeCuesInRange\"])(textTracks[trackName], startOffset, endOffsetSubtitles);\n        });\n      }\n    }\n  };\n\n  _proto.extractCea608Data = function extractCea608Data(byteArray) {\n    var actualCCBytes = [[], []];\n    var count = byteArray[0] & 0x1f;\n    var position = 2;\n\n    for (var j = 0; j < count; j++) {\n      var tmpByte = byteArray[position++];\n      var ccbyte1 = 0x7f & byteArray[position++];\n      var ccbyte2 = 0x7f & byteArray[position++];\n\n      if (ccbyte1 === 0 && ccbyte2 === 0) {\n        continue;\n      }\n\n      var ccValid = (0x04 & tmpByte) !== 0; // Support all four channels\n\n      if (ccValid) {\n        var ccType = 0x03 & tmpByte;\n\n        if (0x00\n        /* CEA608 field1*/\n        === ccType || 0x01\n        /* CEA608 field2*/\n        === ccType) {\n          // Exclude CEA708 CC data.\n          actualCCBytes[ccType].push(ccbyte1);\n          actualCCBytes[ccType].push(ccbyte2);\n        }\n      }\n    }\n\n    return actualCCBytes;\n  };\n\n  return TimelineController;\n}();\n\nfunction canReuseVttTextTrack(inUseTrack, manifestTrack) {\n  return inUseTrack && inUseTrack.label === manifestTrack.name && !(inUseTrack.textTrack1 || inUseTrack.textTrack2);\n}\n\nfunction intersection(x1, x2, y1, y2) {\n  return Math.min(x2, y2) - Math.max(x1, y1);\n}\n\nfunction newVTTCCs() {\n  return {\n    ccOffset: 0,\n    presentationOffset: 0,\n    0: {\n      start: 0,\n      prevCC: -1,\n      new: false\n    }\n  };\n}\n\n/***/ }),\n\n/***/ \"./src/crypt/aes-crypto.ts\":\n/*!*********************************!*\\\n  !*** ./src/crypt/aes-crypto.ts ***!\n  \\*********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_485949__) {\n\n\"use strict\";\n__nested_webpack_require_485949__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_485949__.d(__webpack_exports__, \"default\", function() { return AESCrypto; });\nvar AESCrypto = /*#__PURE__*/function () {\n  function AESCrypto(subtle, iv) {\n    this.subtle = void 0;\n    this.aesIV = void 0;\n    this.subtle = subtle;\n    this.aesIV = iv;\n  }\n\n  var _proto = AESCrypto.prototype;\n\n  _proto.decrypt = function decrypt(data, key) {\n    return this.subtle.decrypt({\n      name: 'AES-CBC',\n      iv: this.aesIV\n    }, key, data);\n  };\n\n  return AESCrypto;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/crypt/aes-decryptor.ts\":\n/*!************************************!*\\\n  !*** ./src/crypt/aes-decryptor.ts ***!\n  \\************************************/\n/*! exports provided: removePadding, default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_486815__) {\n\n\"use strict\";\n__nested_webpack_require_486815__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_486815__.d(__webpack_exports__, \"removePadding\", function() { return removePadding; });\n/* harmony export (binding) */ __nested_webpack_require_486815__.d(__webpack_exports__, \"default\", function() { return AESDecryptor; });\n/* harmony import */ var _utils_typed_array__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_486815__(/*! ../utils/typed-array */ \"./src/utils/typed-array.ts\");\n // PKCS7\n\nfunction removePadding(array) {\n  var outputBytes = array.byteLength;\n  var paddingBytes = outputBytes && new DataView(array.buffer).getUint8(outputBytes - 1);\n\n  if (paddingBytes) {\n    return Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_0__[\"sliceUint8\"])(array, 0, outputBytes - paddingBytes);\n  }\n\n  return array;\n}\n\nvar AESDecryptor = /*#__PURE__*/function () {\n  function AESDecryptor() {\n    this.rcon = [0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n    this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];\n    this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];\n    this.sBox = new Uint32Array(256);\n    this.invSBox = new Uint32Array(256);\n    this.key = new Uint32Array(0);\n    this.ksRows = 0;\n    this.keySize = 0;\n    this.keySchedule = void 0;\n    this.invKeySchedule = void 0;\n    this.initTable();\n  } // Using view.getUint32() also swaps the byte order.\n\n\n  var _proto = AESDecryptor.prototype;\n\n  _proto.uint8ArrayToUint32Array_ = function uint8ArrayToUint32Array_(arrayBuffer) {\n    var view = new DataView(arrayBuffer);\n    var newArray = new Uint32Array(4);\n\n    for (var i = 0; i < 4; i++) {\n      newArray[i] = view.getUint32(i * 4);\n    }\n\n    return newArray;\n  };\n\n  _proto.initTable = function initTable() {\n    var sBox = this.sBox;\n    var invSBox = this.invSBox;\n    var subMix = this.subMix;\n    var subMix0 = subMix[0];\n    var subMix1 = subMix[1];\n    var subMix2 = subMix[2];\n    var subMix3 = subMix[3];\n    var invSubMix = this.invSubMix;\n    var invSubMix0 = invSubMix[0];\n    var invSubMix1 = invSubMix[1];\n    var invSubMix2 = invSubMix[2];\n    var invSubMix3 = invSubMix[3];\n    var d = new Uint32Array(256);\n    var x = 0;\n    var xi = 0;\n    var i = 0;\n\n    for (i = 0; i < 256; i++) {\n      if (i < 128) {\n        d[i] = i << 1;\n      } else {\n        d[i] = i << 1 ^ 0x11b;\n      }\n    }\n\n    for (i = 0; i < 256; i++) {\n      var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n      sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n      sBox[x] = sx;\n      invSBox[sx] = x; // Compute multiplication\n\n      var x2 = d[x];\n      var x4 = d[x2];\n      var x8 = d[x4]; // Compute sub/invSub bytes, mix columns tables\n\n      var t = d[sx] * 0x101 ^ sx * 0x1010100;\n      subMix0[x] = t << 24 | t >>> 8;\n      subMix1[x] = t << 16 | t >>> 16;\n      subMix2[x] = t << 8 | t >>> 24;\n      subMix3[x] = t; // Compute inv sub bytes, inv mix columns tables\n\n      t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n      invSubMix0[sx] = t << 24 | t >>> 8;\n      invSubMix1[sx] = t << 16 | t >>> 16;\n      invSubMix2[sx] = t << 8 | t >>> 24;\n      invSubMix3[sx] = t; // Compute next counter\n\n      if (!x) {\n        x = xi = 1;\n      } else {\n        x = x2 ^ d[d[d[x8 ^ x2]]];\n        xi ^= d[d[xi]];\n      }\n    }\n  };\n\n  _proto.expandKey = function expandKey(keyBuffer) {\n    // convert keyBuffer to Uint32Array\n    var key = this.uint8ArrayToUint32Array_(keyBuffer);\n    var sameKey = true;\n    var offset = 0;\n\n    while (offset < key.length && sameKey) {\n      sameKey = key[offset] === this.key[offset];\n      offset++;\n    }\n\n    if (sameKey) {\n      return;\n    }\n\n    this.key = key;\n    var keySize = this.keySize = key.length;\n\n    if (keySize !== 4 && keySize !== 6 && keySize !== 8) {\n      throw new Error('Invalid aes key size=' + keySize);\n    }\n\n    var ksRows = this.ksRows = (keySize + 6 + 1) * 4;\n    var ksRow;\n    var invKsRow;\n    var keySchedule = this.keySchedule = new Uint32Array(ksRows);\n    var invKeySchedule = this.invKeySchedule = new Uint32Array(ksRows);\n    var sbox = this.sBox;\n    var rcon = this.rcon;\n    var invSubMix = this.invSubMix;\n    var invSubMix0 = invSubMix[0];\n    var invSubMix1 = invSubMix[1];\n    var invSubMix2 = invSubMix[2];\n    var invSubMix3 = invSubMix[3];\n    var prev;\n    var t;\n\n    for (ksRow = 0; ksRow < ksRows; ksRow++) {\n      if (ksRow < keySize) {\n        prev = keySchedule[ksRow] = key[ksRow];\n        continue;\n      }\n\n      t = prev;\n\n      if (ksRow % keySize === 0) {\n        // Rot word\n        t = t << 8 | t >>> 24; // Sub word\n\n        t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff]; // Mix Rcon\n\n        t ^= rcon[ksRow / keySize | 0] << 24;\n      } else if (keySize > 6 && ksRow % keySize === 4) {\n        // Sub word\n        t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff];\n      }\n\n      keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;\n    }\n\n    for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n      ksRow = ksRows - invKsRow;\n\n      if (invKsRow & 3) {\n        t = keySchedule[ksRow];\n      } else {\n        t = keySchedule[ksRow - 4];\n      }\n\n      if (invKsRow < 4 || ksRow <= 4) {\n        invKeySchedule[invKsRow] = t;\n      } else {\n        invKeySchedule[invKsRow] = invSubMix0[sbox[t >>> 24]] ^ invSubMix1[sbox[t >>> 16 & 0xff]] ^ invSubMix2[sbox[t >>> 8 & 0xff]] ^ invSubMix3[sbox[t & 0xff]];\n      }\n\n      invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;\n    }\n  } // Adding this as a method greatly improves performance.\n  ;\n\n  _proto.networkToHostOrderSwap = function networkToHostOrderSwap(word) {\n    return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n  };\n\n  _proto.decrypt = function decrypt(inputArrayBuffer, offset, aesIV) {\n    var nRounds = this.keySize + 6;\n    var invKeySchedule = this.invKeySchedule;\n    var invSBOX = this.invSBox;\n    var invSubMix = this.invSubMix;\n    var invSubMix0 = invSubMix[0];\n    var invSubMix1 = invSubMix[1];\n    var invSubMix2 = invSubMix[2];\n    var invSubMix3 = invSubMix[3];\n    var initVector = this.uint8ArrayToUint32Array_(aesIV);\n    var initVector0 = initVector[0];\n    var initVector1 = initVector[1];\n    var initVector2 = initVector[2];\n    var initVector3 = initVector[3];\n    var inputInt32 = new Int32Array(inputArrayBuffer);\n    var outputInt32 = new Int32Array(inputInt32.length);\n    var t0, t1, t2, t3;\n    var s0, s1, s2, s3;\n    var inputWords0, inputWords1, inputWords2, inputWords3;\n    var ksRow, i;\n    var swapWord = this.networkToHostOrderSwap;\n\n    while (offset < inputInt32.length) {\n      inputWords0 = swapWord(inputInt32[offset]);\n      inputWords1 = swapWord(inputInt32[offset + 1]);\n      inputWords2 = swapWord(inputInt32[offset + 2]);\n      inputWords3 = swapWord(inputInt32[offset + 3]);\n      s0 = inputWords0 ^ invKeySchedule[0];\n      s1 = inputWords3 ^ invKeySchedule[1];\n      s2 = inputWords2 ^ invKeySchedule[2];\n      s3 = inputWords1 ^ invKeySchedule[3];\n      ksRow = 4; // Iterate through the rounds of decryption\n\n      for (i = 1; i < nRounds; i++) {\n        t0 = invSubMix0[s0 >>> 24] ^ invSubMix1[s1 >> 16 & 0xff] ^ invSubMix2[s2 >> 8 & 0xff] ^ invSubMix3[s3 & 0xff] ^ invKeySchedule[ksRow];\n        t1 = invSubMix0[s1 >>> 24] ^ invSubMix1[s2 >> 16 & 0xff] ^ invSubMix2[s3 >> 8 & 0xff] ^ invSubMix3[s0 & 0xff] ^ invKeySchedule[ksRow + 1];\n        t2 = invSubMix0[s2 >>> 24] ^ invSubMix1[s3 >> 16 & 0xff] ^ invSubMix2[s0 >> 8 & 0xff] ^ invSubMix3[s1 & 0xff] ^ invKeySchedule[ksRow + 2];\n        t3 = invSubMix0[s3 >>> 24] ^ invSubMix1[s0 >> 16 & 0xff] ^ invSubMix2[s1 >> 8 & 0xff] ^ invSubMix3[s2 & 0xff] ^ invKeySchedule[ksRow + 3]; // Update state\n\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n        ksRow = ksRow + 4;\n      } // Shift rows, sub bytes, add round key\n\n\n      t0 = invSBOX[s0 >>> 24] << 24 ^ invSBOX[s1 >> 16 & 0xff] << 16 ^ invSBOX[s2 >> 8 & 0xff] << 8 ^ invSBOX[s3 & 0xff] ^ invKeySchedule[ksRow];\n      t1 = invSBOX[s1 >>> 24] << 24 ^ invSBOX[s2 >> 16 & 0xff] << 16 ^ invSBOX[s3 >> 8 & 0xff] << 8 ^ invSBOX[s0 & 0xff] ^ invKeySchedule[ksRow + 1];\n      t2 = invSBOX[s2 >>> 24] << 24 ^ invSBOX[s3 >> 16 & 0xff] << 16 ^ invSBOX[s0 >> 8 & 0xff] << 8 ^ invSBOX[s1 & 0xff] ^ invKeySchedule[ksRow + 2];\n      t3 = invSBOX[s3 >>> 24] << 24 ^ invSBOX[s0 >> 16 & 0xff] << 16 ^ invSBOX[s1 >> 8 & 0xff] << 8 ^ invSBOX[s2 & 0xff] ^ invKeySchedule[ksRow + 3]; // Write\n\n      outputInt32[offset] = swapWord(t0 ^ initVector0);\n      outputInt32[offset + 1] = swapWord(t3 ^ initVector1);\n      outputInt32[offset + 2] = swapWord(t2 ^ initVector2);\n      outputInt32[offset + 3] = swapWord(t1 ^ initVector3); // reset initVector to last 4 unsigned int\n\n      initVector0 = inputWords0;\n      initVector1 = inputWords1;\n      initVector2 = inputWords2;\n      initVector3 = inputWords3;\n      offset = offset + 4;\n    }\n\n    return outputInt32.buffer;\n  };\n\n  return AESDecryptor;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/crypt/decrypter.ts\":\n/*!********************************!*\\\n  !*** ./src/crypt/decrypter.ts ***!\n  \\********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_496198__) {\n\n\"use strict\";\n__nested_webpack_require_496198__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_496198__.d(__webpack_exports__, \"default\", function() { return Decrypter; });\n/* harmony import */ var _aes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_496198__(/*! ./aes-crypto */ \"./src/crypt/aes-crypto.ts\");\n/* harmony import */ var _fast_aes_key__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_496198__(/*! ./fast-aes-key */ \"./src/crypt/fast-aes-key.ts\");\n/* harmony import */ var _aes_decryptor__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_496198__(/*! ./aes-decryptor */ \"./src/crypt/aes-decryptor.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_496198__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_496198__(/*! ../utils/mp4-tools */ \"./src/utils/mp4-tools.ts\");\n/* harmony import */ var _utils_typed_array__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_496198__(/*! ../utils/typed-array */ \"./src/utils/typed-array.ts\");\n\n\n\n\n\n\nvar CHUNK_SIZE = 16; // 16 bytes, 128 bits\n\nvar Decrypter = /*#__PURE__*/function () {\n  function Decrypter(observer, config, _temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$removePKCS7Paddi = _ref.removePKCS7Padding,\n        removePKCS7Padding = _ref$removePKCS7Paddi === void 0 ? true : _ref$removePKCS7Paddi;\n\n    this.logEnabled = true;\n    this.observer = void 0;\n    this.config = void 0;\n    this.removePKCS7Padding = void 0;\n    this.subtle = null;\n    this.softwareDecrypter = null;\n    this.key = null;\n    this.fastAesKey = null;\n    this.remainderData = null;\n    this.currentIV = null;\n    this.currentResult = null;\n    this.observer = observer;\n    this.config = config;\n    this.removePKCS7Padding = removePKCS7Padding; // built in decryptor expects PKCS7 padding\n\n    if (removePKCS7Padding) {\n      try {\n        var browserCrypto = self.crypto;\n\n        if (browserCrypto) {\n          this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;\n        }\n      } catch (e) {\n        /* no-op */\n      }\n    }\n\n    if (this.subtle === null) {\n      this.config.enableSoftwareAES = true;\n    }\n  }\n\n  var _proto = Decrypter.prototype;\n\n  _proto.destroy = function destroy() {\n    // @ts-ignore\n    this.observer = null;\n  };\n\n  _proto.isSync = function isSync() {\n    return this.config.enableSoftwareAES;\n  };\n\n  _proto.flush = function flush() {\n    var currentResult = this.currentResult;\n\n    if (!currentResult) {\n      this.reset();\n      return;\n    }\n\n    var data = new Uint8Array(currentResult);\n    this.reset();\n\n    if (this.removePKCS7Padding) {\n      return Object(_aes_decryptor__WEBPACK_IMPORTED_MODULE_2__[\"removePadding\"])(data);\n    }\n\n    return data;\n  };\n\n  _proto.reset = function reset() {\n    this.currentResult = null;\n    this.currentIV = null;\n    this.remainderData = null;\n\n    if (this.softwareDecrypter) {\n      this.softwareDecrypter = null;\n    }\n  };\n\n  _proto.decrypt = function decrypt(data, key, iv, callback) {\n    if (this.config.enableSoftwareAES) {\n      this.softwareDecrypt(new Uint8Array(data), key, iv);\n      var decryptResult = this.flush();\n\n      if (decryptResult) {\n        callback(decryptResult.buffer);\n      }\n    } else {\n      this.webCryptoDecrypt(new Uint8Array(data), key, iv).then(callback);\n    }\n  };\n\n  _proto.softwareDecrypt = function softwareDecrypt(data, key, iv) {\n    var currentIV = this.currentIV,\n        currentResult = this.currentResult,\n        remainderData = this.remainderData;\n    this.logOnce('JS AES decrypt'); // The output is staggered during progressive parsing - the current result is cached, and emitted on the next call\n    // This is done in order to strip PKCS7 padding, which is found at the end of each segment. We only know we've reached\n    // the end on flush(), but by that time we have already received all bytes for the segment.\n    // Progressive decryption does not work with WebCrypto\n\n    if (remainderData) {\n      data = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__[\"appendUint8Array\"])(remainderData, data);\n      this.remainderData = null;\n    } // Byte length must be a multiple of 16 (AES-128 = 128 bit blocks = 16 bytes)\n\n\n    var currentChunk = this.getValidChunk(data);\n\n    if (!currentChunk.length) {\n      return null;\n    }\n\n    if (currentIV) {\n      iv = currentIV;\n    }\n\n    var softwareDecrypter = this.softwareDecrypter;\n\n    if (!softwareDecrypter) {\n      softwareDecrypter = this.softwareDecrypter = new _aes_decryptor__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n    }\n\n    softwareDecrypter.expandKey(key);\n    var result = currentResult;\n    this.currentResult = softwareDecrypter.decrypt(currentChunk.buffer, 0, iv);\n    this.currentIV = Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_5__[\"sliceUint8\"])(currentChunk, -16).buffer;\n\n    if (!result) {\n      return null;\n    }\n\n    return result;\n  };\n\n  _proto.webCryptoDecrypt = function webCryptoDecrypt(data, key, iv) {\n    var _this = this;\n\n    var subtle = this.subtle;\n\n    if (this.key !== key || !this.fastAesKey) {\n      this.key = key;\n      this.fastAesKey = new _fast_aes_key__WEBPACK_IMPORTED_MODULE_1__[\"default\"](subtle, key);\n    }\n\n    return this.fastAesKey.expandKey().then(function (aesKey) {\n      // decrypt using web crypto\n      if (!subtle) {\n        return Promise.reject(new Error('web crypto not initialized'));\n      }\n\n      var crypto = new _aes_crypto__WEBPACK_IMPORTED_MODULE_0__[\"default\"](subtle, iv);\n      return crypto.decrypt(data.buffer, aesKey);\n    }).catch(function (err) {\n      return _this.onWebCryptoError(err, data, key, iv);\n    });\n  };\n\n  _proto.onWebCryptoError = function onWebCryptoError(err, data, key, iv) {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn('[decrypter.ts]: WebCrypto Error, disable WebCrypto API:', err);\n    this.config.enableSoftwareAES = true;\n    this.logEnabled = true;\n    return this.softwareDecrypt(data, key, iv);\n  };\n\n  _proto.getValidChunk = function getValidChunk(data) {\n    var currentChunk = data;\n    var splitPoint = data.length - data.length % CHUNK_SIZE;\n\n    if (splitPoint !== data.length) {\n      currentChunk = Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_5__[\"sliceUint8\"])(data, 0, splitPoint);\n      this.remainderData = Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_5__[\"sliceUint8\"])(data, splitPoint);\n    }\n\n    return currentChunk;\n  };\n\n  _proto.logOnce = function logOnce(msg) {\n    if (!this.logEnabled) {\n      return;\n    }\n\n    _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].log(\"[decrypter.ts]: \" + msg);\n    this.logEnabled = false;\n  };\n\n  return Decrypter;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/crypt/fast-aes-key.ts\":\n/*!***********************************!*\\\n  !*** ./src/crypt/fast-aes-key.ts ***!\n  \\***********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_503169__) {\n\n\"use strict\";\n__nested_webpack_require_503169__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_503169__.d(__webpack_exports__, \"default\", function() { return FastAESKey; });\nvar FastAESKey = /*#__PURE__*/function () {\n  function FastAESKey(subtle, key) {\n    this.subtle = void 0;\n    this.key = void 0;\n    this.subtle = subtle;\n    this.key = key;\n  }\n\n  var _proto = FastAESKey.prototype;\n\n  _proto.expandKey = function expandKey() {\n    return this.subtle.importKey('raw', this.key, {\n      name: 'AES-CBC'\n    }, false, ['encrypt', 'decrypt']);\n  };\n\n  return FastAESKey;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/demux/aacdemuxer.ts\":\n/*!*********************************!*\\\n  !*** ./src/demux/aacdemuxer.ts ***!\n  \\*********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_504023__) {\n\n\"use strict\";\n__nested_webpack_require_504023__.r(__webpack_exports__);\n/* harmony import */ var _base_audio_demuxer__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_504023__(/*! ./base-audio-demuxer */ \"./src/demux/base-audio-demuxer.ts\");\n/* harmony import */ var _adts__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_504023__(/*! ./adts */ \"./src/demux/adts.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_504023__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _demux_id3__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_504023__(/*! ../demux/id3 */ \"./src/demux/id3.ts\");\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * AAC demuxer\n */\n\n\n\n\n\nvar AACDemuxer = /*#__PURE__*/function (_BaseAudioDemuxer) {\n  _inheritsLoose(AACDemuxer, _BaseAudioDemuxer);\n\n  function AACDemuxer(observer, config) {\n    var _this;\n\n    _this = _BaseAudioDemuxer.call(this) || this;\n    _this.observer = void 0;\n    _this.config = void 0;\n    _this.observer = observer;\n    _this.config = config;\n    return _this;\n  }\n\n  var _proto = AACDemuxer.prototype;\n\n  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {\n    _BaseAudioDemuxer.prototype.resetInitSegment.call(this, initSegment, audioCodec, videoCodec, trackDuration);\n\n    this._audioTrack = {\n      container: 'audio/adts',\n      type: 'audio',\n      id: 2,\n      pid: -1,\n      sequenceNumber: 0,\n      segmentCodec: 'aac',\n      samples: [],\n      manifestCodec: audioCodec,\n      duration: trackDuration,\n      inputTimeScale: 90000,\n      dropped: 0\n    };\n  } // Source for probe info - https://wiki.multimedia.cx/index.php?title=ADTS\n  ;\n\n  AACDemuxer.probe = function probe(data) {\n    if (!data) {\n      return false;\n    } // Check for the ADTS sync word\n    // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n    // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n    // More info https://wiki.multimedia.cx/index.php?title=ADTS\n\n\n    var id3Data = _demux_id3__WEBPACK_IMPORTED_MODULE_3__[\"getID3Data\"](data, 0) || [];\n    var offset = id3Data.length;\n\n    for (var length = data.length; offset < length; offset++) {\n      if (_adts__WEBPACK_IMPORTED_MODULE_1__[\"probe\"](data, offset)) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log('ADTS sync word found !');\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  _proto.canParse = function canParse(data, offset) {\n    return _adts__WEBPACK_IMPORTED_MODULE_1__[\"canParse\"](data, offset);\n  };\n\n  _proto.appendFrame = function appendFrame(track, data, offset) {\n    _adts__WEBPACK_IMPORTED_MODULE_1__[\"initTrackConfig\"](track, this.observer, data, offset, track.manifestCodec);\n    var frame = _adts__WEBPACK_IMPORTED_MODULE_1__[\"appendFrame\"](track, data, offset, this.basePTS, this.frameIndex);\n\n    if (frame && frame.missing === 0) {\n      return frame;\n    }\n  };\n\n  return AACDemuxer;\n}(_base_audio_demuxer__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AACDemuxer);\n\n/***/ }),\n\n/***/ \"./src/demux/adts.ts\":\n/*!***************************!*\\\n  !*** ./src/demux/adts.ts ***!\n  \\***************************/\n/*! exports provided: getAudioConfig, isHeaderPattern, getHeaderLength, getFullFrameLength, canGetFrameLength, isHeader, canParse, probe, initTrackConfig, getFrameDuration, parseFrameHeader, appendFrame */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_507885__) {\n\n\"use strict\";\n__nested_webpack_require_507885__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_507885__.d(__webpack_exports__, \"getAudioConfig\", function() { return getAudioConfig; });\n/* harmony export (binding) */ __nested_webpack_require_507885__.d(__webpack_exports__, \"isHeaderPattern\", function() { return isHeaderPattern; });\n/* harmony export (binding) */ __nested_webpack_require_507885__.d(__webpack_exports__, \"getHeaderLength\", function() { return getHeaderLength; });\n/* harmony export (binding) */ __nested_webpack_require_507885__.d(__webpack_exports__, \"getFullFrameLength\", function() { return getFullFrameLength; });\n/* harmony export (binding) */ __nested_webpack_require_507885__.d(__webpack_exports__, \"canGetFrameLength\", function() { return canGetFrameLength; });\n/* harmony export (binding) */ __nested_webpack_require_507885__.d(__webpack_exports__, \"isHeader\", function() { return isHeader; });\n/* harmony export (binding) */ __nested_webpack_require_507885__.d(__webpack_exports__, \"canParse\", function() { return canParse; });\n/* harmony export (binding) */ __nested_webpack_require_507885__.d(__webpack_exports__, \"probe\", function() { return probe; });\n/* harmony export (binding) */ __nested_webpack_require_507885__.d(__webpack_exports__, \"initTrackConfig\", function() { return initTrackConfig; });\n/* harmony export (binding) */ __nested_webpack_require_507885__.d(__webpack_exports__, \"getFrameDuration\", function() { return getFrameDuration; });\n/* harmony export (binding) */ __nested_webpack_require_507885__.d(__webpack_exports__, \"parseFrameHeader\", function() { return parseFrameHeader; });\n/* harmony export (binding) */ __nested_webpack_require_507885__.d(__webpack_exports__, \"appendFrame\", function() { return appendFrame; });\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_507885__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_507885__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_507885__(/*! ../events */ \"./src/events.ts\");\n/**\n * ADTS parser helper\n * @link https://wiki.multimedia.cx/index.php?title=ADTS\n */\n\n\n\nfunction getAudioConfig(observer, data, offset, audioCodec) {\n  var adtsObjectType;\n  var adtsExtensionSamplingIndex;\n  var adtsChanelConfig;\n  var config;\n  var userAgent = navigator.userAgent.toLowerCase();\n  var manifestCodec = audioCodec;\n  var adtsSampleingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350]; // byte 2\n\n  adtsObjectType = ((data[offset + 2] & 0xc0) >>> 6) + 1;\n  var adtsSamplingIndex = (data[offset + 2] & 0x3c) >>> 2;\n\n  if (adtsSamplingIndex > adtsSampleingRates.length - 1) {\n    observer.trigger(_events__WEBPACK_IMPORTED_MODULE_2__[\"Events\"].ERROR, {\n      type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].MEDIA_ERROR,\n      details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].FRAG_PARSING_ERROR,\n      fatal: true,\n      reason: \"invalid ADTS sampling index:\" + adtsSamplingIndex\n    });\n    return;\n  }\n\n  adtsChanelConfig = (data[offset + 2] & 0x01) << 2; // byte 3\n\n  adtsChanelConfig |= (data[offset + 3] & 0xc0) >>> 6;\n  _utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].log(\"manifest codec:\" + audioCodec + \", ADTS type:\" + adtsObjectType + \", samplingIndex:\" + adtsSamplingIndex); // firefox: freq less than 24kHz = AAC SBR (HE-AAC)\n\n  if (/firefox/i.test(userAgent)) {\n    if (adtsSamplingIndex >= 6) {\n      adtsObjectType = 5;\n      config = new Array(4); // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n      // there is a factor 2 between frame sample rate and output sample rate\n      // multiply frequency by 2 (see table below, equivalent to substract 3)\n\n      adtsExtensionSamplingIndex = adtsSamplingIndex - 3;\n    } else {\n      adtsObjectType = 2;\n      config = new Array(2);\n      adtsExtensionSamplingIndex = adtsSamplingIndex;\n    } // Android : always use AAC\n\n  } else if (userAgent.indexOf('android') !== -1) {\n    adtsObjectType = 2;\n    config = new Array(2);\n    adtsExtensionSamplingIndex = adtsSamplingIndex;\n  } else {\n    /*  for other browsers (Chrome/Vivaldi/Opera ...)\n        always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)\n    */\n    adtsObjectType = 5;\n    config = new Array(4); // if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)\n\n    if (audioCodec && (audioCodec.indexOf('mp4a.40.29') !== -1 || audioCodec.indexOf('mp4a.40.5') !== -1) || !audioCodec && adtsSamplingIndex >= 6) {\n      // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n      // there is a factor 2 between frame sample rate and output sample rate\n      // multiply frequency by 2 (see table below, equivalent to substract 3)\n      adtsExtensionSamplingIndex = adtsSamplingIndex - 3;\n    } else {\n      // if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)\n      // Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.\n      if (audioCodec && audioCodec.indexOf('mp4a.40.2') !== -1 && (adtsSamplingIndex >= 6 && adtsChanelConfig === 1 || /vivaldi/i.test(userAgent)) || !audioCodec && adtsChanelConfig === 1) {\n        adtsObjectType = 2;\n        config = new Array(2);\n      }\n\n      adtsExtensionSamplingIndex = adtsSamplingIndex;\n    }\n  }\n  /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config\n      ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()\n    Audio Profile / Audio Object Type\n    0: Null\n    1: AAC Main\n    2: AAC LC (Low Complexity)\n    3: AAC SSR (Scalable Sample Rate)\n    4: AAC LTP (Long Term Prediction)\n    5: SBR (Spectral Band Replication)\n    6: AAC Scalable\n   sampling freq\n    0: 96000 Hz\n    1: 88200 Hz\n    2: 64000 Hz\n    3: 48000 Hz\n    4: 44100 Hz\n    5: 32000 Hz\n    6: 24000 Hz\n    7: 22050 Hz\n    8: 16000 Hz\n    9: 12000 Hz\n    10: 11025 Hz\n    11: 8000 Hz\n    12: 7350 Hz\n    13: Reserved\n    14: Reserved\n    15: frequency is written explictly\n    Channel Configurations\n    These are the channel configurations:\n    0: Defined in AOT Specifc Config\n    1: 1 channel: front-center\n    2: 2 channels: front-left, front-right\n  */\n  // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1\n\n\n  config[0] = adtsObjectType << 3; // samplingFrequencyIndex\n\n  config[0] |= (adtsSamplingIndex & 0x0e) >> 1;\n  config[1] |= (adtsSamplingIndex & 0x01) << 7; // channelConfiguration\n\n  config[1] |= adtsChanelConfig << 3;\n\n  if (adtsObjectType === 5) {\n    // adtsExtensionSampleingIndex\n    config[1] |= (adtsExtensionSamplingIndex & 0x0e) >> 1;\n    config[2] = (adtsExtensionSamplingIndex & 0x01) << 7; // adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???\n    //    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc\n\n    config[2] |= 2 << 2;\n    config[3] = 0;\n  }\n\n  return {\n    config: config,\n    samplerate: adtsSampleingRates[adtsSamplingIndex],\n    channelCount: adtsChanelConfig,\n    codec: 'mp4a.40.' + adtsObjectType,\n    manifestCodec: manifestCodec\n  };\n}\nfunction isHeaderPattern(data, offset) {\n  return data[offset] === 0xff && (data[offset + 1] & 0xf6) === 0xf0;\n}\nfunction getHeaderLength(data, offset) {\n  return data[offset + 1] & 0x01 ? 7 : 9;\n}\nfunction getFullFrameLength(data, offset) {\n  return (data[offset + 3] & 0x03) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 0xe0) >>> 5;\n}\nfunction canGetFrameLength(data, offset) {\n  return offset + 5 < data.length;\n}\nfunction isHeader(data, offset) {\n  // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n  // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n  // More info https://wiki.multimedia.cx/index.php?title=ADTS\n  return offset + 1 < data.length && isHeaderPattern(data, offset);\n}\nfunction canParse(data, offset) {\n  return canGetFrameLength(data, offset) && isHeaderPattern(data, offset) && getFullFrameLength(data, offset) <= data.length - offset;\n}\nfunction probe(data, offset) {\n  // same as isHeader but we also check that ADTS frame follows last ADTS frame\n  // or end of data is reached\n  if (isHeader(data, offset)) {\n    // ADTS header Length\n    var headerLength = getHeaderLength(data, offset);\n\n    if (offset + headerLength >= data.length) {\n      return false;\n    } // ADTS frame Length\n\n\n    var frameLength = getFullFrameLength(data, offset);\n\n    if (frameLength <= headerLength) {\n      return false;\n    }\n\n    var newOffset = offset + frameLength;\n    return newOffset === data.length || isHeader(data, newOffset);\n  }\n\n  return false;\n}\nfunction initTrackConfig(track, observer, data, offset, audioCodec) {\n  if (!track.samplerate) {\n    var config = getAudioConfig(observer, data, offset, audioCodec);\n\n    if (!config) {\n      return;\n    }\n\n    track.config = config.config;\n    track.samplerate = config.samplerate;\n    track.channelCount = config.channelCount;\n    track.codec = config.codec;\n    track.manifestCodec = config.manifestCodec;\n    _utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].log(\"parsed codec:\" + track.codec + \", rate:\" + config.samplerate + \", channels:\" + config.channelCount);\n  }\n}\nfunction getFrameDuration(samplerate) {\n  return 1024 * 90000 / samplerate;\n}\nfunction parseFrameHeader(data, offset) {\n  // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header\n  var headerLength = getHeaderLength(data, offset);\n\n  if (offset + headerLength <= data.length) {\n    // retrieve frame size\n    var frameLength = getFullFrameLength(data, offset) - headerLength;\n\n    if (frameLength > 0) {\n      // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}`);\n      return {\n        headerLength: headerLength,\n        frameLength: frameLength\n      };\n    }\n  }\n}\nfunction appendFrame(track, data, offset, pts, frameIndex) {\n  var frameDuration = getFrameDuration(track.samplerate);\n  var stamp = pts + frameIndex * frameDuration;\n  var header = parseFrameHeader(data, offset);\n  var unit;\n\n  if (header) {\n    var frameLength = header.frameLength,\n        headerLength = header.headerLength;\n\n    var _length = headerLength + frameLength;\n\n    var missing = Math.max(0, offset + _length - data.length); // logger.log(`AAC frame ${frameIndex}, pts:${stamp} length@offset/total: ${frameLength}@${offset+headerLength}/${data.byteLength} missing: ${missing}`);\n\n    if (missing) {\n      unit = new Uint8Array(_length - headerLength);\n      unit.set(data.subarray(offset + headerLength, data.length), 0);\n    } else {\n      unit = data.subarray(offset + headerLength, offset + _length);\n    }\n\n    var _sample = {\n      unit: unit,\n      pts: stamp\n    };\n\n    if (!missing) {\n      track.samples.push(_sample);\n    }\n\n    return {\n      sample: _sample,\n      length: _length,\n      missing: missing\n    };\n  } // overflow incomplete header\n\n\n  var length = data.length - offset;\n  unit = new Uint8Array(length);\n  unit.set(data.subarray(offset, data.length), 0);\n  var sample = {\n    unit: unit,\n    pts: stamp\n  };\n  return {\n    sample: sample,\n    length: length,\n    missing: -1\n  };\n}\n\n/***/ }),\n\n/***/ \"./src/demux/base-audio-demuxer.ts\":\n/*!*****************************************!*\\\n  !*** ./src/demux/base-audio-demuxer.ts ***!\n  \\*****************************************/\n/*! exports provided: initPTSFn, default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_519611__) {\n\n\"use strict\";\n__nested_webpack_require_519611__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_519611__.d(__webpack_exports__, \"initPTSFn\", function() { return initPTSFn; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_519611__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _demux_id3__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_519611__(/*! ../demux/id3 */ \"./src/demux/id3.ts\");\n/* harmony import */ var _types_demuxer__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_519611__(/*! ../types/demuxer */ \"./src/types/demuxer.ts\");\n/* harmony import */ var _dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_519611__(/*! ./dummy-demuxed-track */ \"./src/demux/dummy-demuxed-track.ts\");\n/* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_519611__(/*! ../utils/mp4-tools */ \"./src/utils/mp4-tools.ts\");\n/* harmony import */ var _utils_typed_array__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_519611__(/*! ../utils/typed-array */ \"./src/utils/typed-array.ts\");\n\n\n\n\n\n\n\n\nvar BaseAudioDemuxer = /*#__PURE__*/function () {\n  function BaseAudioDemuxer() {\n    this._audioTrack = void 0;\n    this._id3Track = void 0;\n    this.frameIndex = 0;\n    this.cachedData = null;\n    this.basePTS = null;\n    this.initPTS = null;\n  }\n\n  var _proto = BaseAudioDemuxer.prototype;\n\n  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {\n    this._id3Track = {\n      type: 'id3',\n      id: 3,\n      pid: -1,\n      inputTimeScale: 90000,\n      sequenceNumber: 0,\n      samples: [],\n      dropped: 0\n    };\n  };\n\n  _proto.resetTimeStamp = function resetTimeStamp(deaultTimestamp) {\n    this.initPTS = deaultTimestamp;\n    this.resetContiguity();\n  };\n\n  _proto.resetContiguity = function resetContiguity() {\n    this.basePTS = null;\n    this.frameIndex = 0;\n  };\n\n  _proto.canParse = function canParse(data, offset) {\n    return false;\n  };\n\n  _proto.appendFrame = function appendFrame(track, data, offset) {} // feed incoming data to the front of the parsing pipeline\n  ;\n\n  _proto.demux = function demux(data, timeOffset) {\n    if (this.cachedData) {\n      data = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__[\"appendUint8Array\"])(this.cachedData, data);\n      this.cachedData = null;\n    }\n\n    var id3Data = _demux_id3__WEBPACK_IMPORTED_MODULE_1__[\"getID3Data\"](data, 0);\n    var offset = id3Data ? id3Data.length : 0;\n    var lastDataIndex;\n    var pts;\n    var track = this._audioTrack;\n    var id3Track = this._id3Track;\n    var timestamp = id3Data ? _demux_id3__WEBPACK_IMPORTED_MODULE_1__[\"getTimeStamp\"](id3Data) : undefined;\n    var length = data.length;\n\n    if (this.basePTS === null || this.frameIndex === 0 && Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(timestamp)) {\n      this.basePTS = initPTSFn(timestamp, timeOffset, this.initPTS);\n    } // more expressive than alternative: id3Data?.length\n\n\n    if (id3Data && id3Data.length > 0) {\n      id3Track.samples.push({\n        pts: this.basePTS,\n        dts: this.basePTS,\n        data: id3Data,\n        type: _types_demuxer__WEBPACK_IMPORTED_MODULE_2__[\"MetadataSchema\"].audioId3\n      });\n    }\n\n    pts = this.basePTS;\n\n    while (offset < length) {\n      if (this.canParse(data, offset)) {\n        var frame = this.appendFrame(track, data, offset);\n\n        if (frame) {\n          this.frameIndex++;\n          pts = frame.sample.pts;\n          offset += frame.length;\n          lastDataIndex = offset;\n        } else {\n          offset = length;\n        }\n      } else if (_demux_id3__WEBPACK_IMPORTED_MODULE_1__[\"canParse\"](data, offset)) {\n        // after a ID3.canParse, a call to ID3.getID3Data *should* always returns some data\n        id3Data = _demux_id3__WEBPACK_IMPORTED_MODULE_1__[\"getID3Data\"](data, offset);\n        id3Track.samples.push({\n          pts: pts,\n          dts: pts,\n          data: id3Data,\n          type: _types_demuxer__WEBPACK_IMPORTED_MODULE_2__[\"MetadataSchema\"].audioId3\n        });\n        offset += id3Data.length;\n        lastDataIndex = offset;\n      } else {\n        offset++;\n      }\n\n      if (offset === length && lastDataIndex !== length) {\n        var partialData = Object(_utils_typed_array__WEBPACK_IMPORTED_MODULE_5__[\"sliceUint8\"])(data, lastDataIndex);\n\n        if (this.cachedData) {\n          this.cachedData = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__[\"appendUint8Array\"])(this.cachedData, partialData);\n        } else {\n          this.cachedData = partialData;\n        }\n      }\n    }\n\n    return {\n      audioTrack: track,\n      videoTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_3__[\"dummyTrack\"])(),\n      id3Track: id3Track,\n      textTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_3__[\"dummyTrack\"])()\n    };\n  };\n\n  _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {\n    return Promise.reject(new Error(\"[\" + this + \"] This demuxer does not support Sample-AES decryption\"));\n  };\n\n  _proto.flush = function flush(timeOffset) {\n    // Parse cache in case of remaining frames.\n    var cachedData = this.cachedData;\n\n    if (cachedData) {\n      this.cachedData = null;\n      this.demux(cachedData, 0);\n    }\n\n    return {\n      audioTrack: this._audioTrack,\n      videoTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_3__[\"dummyTrack\"])(),\n      id3Track: this._id3Track,\n      textTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_3__[\"dummyTrack\"])()\n    };\n  };\n\n  _proto.destroy = function destroy() {};\n\n  return BaseAudioDemuxer;\n}();\n/**\n * Initialize PTS\n * <p>\n *    use timestamp unless it is undefined, NaN or Infinity\n * </p>\n */\n\n\nvar initPTSFn = function initPTSFn(timestamp, timeOffset, initPTS) {\n  if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(timestamp)) {\n    return timestamp * 90;\n  }\n\n  return timeOffset * 90000 + (initPTS || 0);\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (BaseAudioDemuxer);\n\n/***/ }),\n\n/***/ \"./src/demux/chunk-cache.ts\":\n/*!**********************************!*\\\n  !*** ./src/demux/chunk-cache.ts ***!\n  \\**********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_526022__) {\n\n\"use strict\";\n__nested_webpack_require_526022__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_526022__.d(__webpack_exports__, \"default\", function() { return ChunkCache; });\nvar ChunkCache = /*#__PURE__*/function () {\n  function ChunkCache() {\n    this.chunks = [];\n    this.dataLength = 0;\n  }\n\n  var _proto = ChunkCache.prototype;\n\n  _proto.push = function push(chunk) {\n    this.chunks.push(chunk);\n    this.dataLength += chunk.length;\n  };\n\n  _proto.flush = function flush() {\n    var chunks = this.chunks,\n        dataLength = this.dataLength;\n    var result;\n\n    if (!chunks.length) {\n      return new Uint8Array(0);\n    } else if (chunks.length === 1) {\n      result = chunks[0];\n    } else {\n      result = concatUint8Arrays(chunks, dataLength);\n    }\n\n    this.reset();\n    return result;\n  };\n\n  _proto.reset = function reset() {\n    this.chunks.length = 0;\n    this.dataLength = 0;\n  };\n\n  return ChunkCache;\n}();\n\n\n\nfunction concatUint8Arrays(chunks, dataLength) {\n  var result = new Uint8Array(dataLength);\n  var offset = 0;\n\n  for (var i = 0; i < chunks.length; i++) {\n    var chunk = chunks[i];\n    result.set(chunk, offset);\n    offset += chunk.length;\n  }\n\n  return result;\n}\n\n/***/ }),\n\n/***/ \"./src/demux/dummy-demuxed-track.ts\":\n/*!******************************************!*\\\n  !*** ./src/demux/dummy-demuxed-track.ts ***!\n  \\******************************************/\n/*! exports provided: dummyTrack */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_527525__) {\n\n\"use strict\";\n__nested_webpack_require_527525__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_527525__.d(__webpack_exports__, \"dummyTrack\", function() { return dummyTrack; });\nfunction dummyTrack(type, inputTimeScale) {\n  if (type === void 0) {\n    type = '';\n  }\n\n  if (inputTimeScale === void 0) {\n    inputTimeScale = 90000;\n  }\n\n  return {\n    type: type,\n    id: -1,\n    pid: -1,\n    inputTimeScale: inputTimeScale,\n    sequenceNumber: -1,\n    samples: [],\n    dropped: 0\n  };\n}\n\n/***/ }),\n\n/***/ \"./src/demux/exp-golomb.ts\":\n/*!*********************************!*\\\n  !*** ./src/demux/exp-golomb.ts ***!\n  \\*********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_528280__) {\n\n\"use strict\";\n__nested_webpack_require_528280__.r(__webpack_exports__);\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_528280__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.\n */\n\n\nvar ExpGolomb = /*#__PURE__*/function () {\n  function ExpGolomb(data) {\n    this.data = void 0;\n    this.bytesAvailable = void 0;\n    this.word = void 0;\n    this.bitsAvailable = void 0;\n    this.data = data; // the number of bytes left to examine in this.data\n\n    this.bytesAvailable = data.byteLength; // the current word being examined\n\n    this.word = 0; // :uint\n    // the number of bits left to examine in the current word\n\n    this.bitsAvailable = 0; // :uint\n  } // ():void\n\n\n  var _proto = ExpGolomb.prototype;\n\n  _proto.loadWord = function loadWord() {\n    var data = this.data;\n    var bytesAvailable = this.bytesAvailable;\n    var position = data.byteLength - bytesAvailable;\n    var workingBytes = new Uint8Array(4);\n    var availableBytes = Math.min(4, bytesAvailable);\n\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(data.subarray(position, position + availableBytes));\n    this.word = new DataView(workingBytes.buffer).getUint32(0); // track the amount of this.data that has been processed\n\n    this.bitsAvailable = availableBytes * 8;\n    this.bytesAvailable -= availableBytes;\n  } // (count:int):void\n  ;\n\n  _proto.skipBits = function skipBits(count) {\n    var skipBytes; // :int\n\n    if (this.bitsAvailable > count) {\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    } else {\n      count -= this.bitsAvailable;\n      skipBytes = count >> 3;\n      count -= skipBytes >> 3;\n      this.bytesAvailable -= skipBytes;\n      this.loadWord();\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    }\n  } // (size:int):uint\n  ;\n\n  _proto.readBits = function readBits(size) {\n    var bits = Math.min(this.bitsAvailable, size); // :uint\n\n    var valu = this.word >>> 32 - bits; // :uint\n\n    if (size > 32) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].error('Cannot read more than 32 bits at a time');\n    }\n\n    this.bitsAvailable -= bits;\n\n    if (this.bitsAvailable > 0) {\n      this.word <<= bits;\n    } else if (this.bytesAvailable > 0) {\n      this.loadWord();\n    }\n\n    bits = size - bits;\n\n    if (bits > 0 && this.bitsAvailable) {\n      return valu << bits | this.readBits(bits);\n    } else {\n      return valu;\n    }\n  } // ():uint\n  ;\n\n  _proto.skipLZ = function skipLZ() {\n    var leadingZeroCount; // :uint\n\n    for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {\n      if ((this.word & 0x80000000 >>> leadingZeroCount) !== 0) {\n        // the first bit of working word is 1\n        this.word <<= leadingZeroCount;\n        this.bitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    } // we exhausted word and still have not found a 1\n\n\n    this.loadWord();\n    return leadingZeroCount + this.skipLZ();\n  } // ():void\n  ;\n\n  _proto.skipUEG = function skipUEG() {\n    this.skipBits(1 + this.skipLZ());\n  } // ():void\n  ;\n\n  _proto.skipEG = function skipEG() {\n    this.skipBits(1 + this.skipLZ());\n  } // ():uint\n  ;\n\n  _proto.readUEG = function readUEG() {\n    var clz = this.skipLZ(); // :uint\n\n    return this.readBits(clz + 1) - 1;\n  } // ():int\n  ;\n\n  _proto.readEG = function readEG() {\n    var valu = this.readUEG(); // :int\n\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\n    } else {\n      return -1 * (valu >>> 1); // divide by two then make it negative\n    }\n  } // Some convenience functions\n  // :Boolean\n  ;\n\n  _proto.readBoolean = function readBoolean() {\n    return this.readBits(1) === 1;\n  } // ():int\n  ;\n\n  _proto.readUByte = function readUByte() {\n    return this.readBits(8);\n  } // ():int\n  ;\n\n  _proto.readUShort = function readUShort() {\n    return this.readBits(16);\n  } // ():int\n  ;\n\n  _proto.readUInt = function readUInt() {\n    return this.readBits(32);\n  }\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count the number of entries in this scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  ;\n\n  _proto.skipScalingList = function skipScalingList(count) {\n    var lastScale = 8;\n    var nextScale = 8;\n    var deltaScale;\n\n    for (var j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = this.readEG();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = nextScale === 0 ? lastScale : nextScale;\n    }\n  }\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  ;\n\n  _proto.readSPS = function readSPS() {\n    var frameCropLeftOffset = 0;\n    var frameCropRightOffset = 0;\n    var frameCropTopOffset = 0;\n    var frameCropBottomOffset = 0;\n    var numRefFramesInPicOrderCntCycle;\n    var scalingListCount;\n    var i;\n    var readUByte = this.readUByte.bind(this);\n    var readBits = this.readBits.bind(this);\n    var readUEG = this.readUEG.bind(this);\n    var readBoolean = this.readBoolean.bind(this);\n    var skipBits = this.skipBits.bind(this);\n    var skipEG = this.skipEG.bind(this);\n    var skipUEG = this.skipUEG.bind(this);\n    var skipScalingList = this.skipScalingList.bind(this);\n    readUByte();\n    var profileIdc = readUByte(); // profile_idc\n\n    readBits(5); // profileCompat constraint_set[0-4]_flag, u(5)\n\n    skipBits(3); // reserved_zero_3bits u(3),\n\n    readUByte(); // level_idc u(8)\n\n    skipUEG(); // seq_parameter_set_id\n    // some profiles have more optional data we don't need\n\n    if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 || profileIdc === 244 || profileIdc === 44 || profileIdc === 83 || profileIdc === 86 || profileIdc === 118 || profileIdc === 128) {\n      var chromaFormatIdc = readUEG();\n\n      if (chromaFormatIdc === 3) {\n        skipBits(1);\n      } // separate_colour_plane_flag\n\n\n      skipUEG(); // bit_depth_luma_minus8\n\n      skipUEG(); // bit_depth_chroma_minus8\n\n      skipBits(1); // qpprime_y_zero_transform_bypass_flag\n\n      if (readBoolean()) {\n        // seq_scaling_matrix_present_flag\n        scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n\n        for (i = 0; i < scalingListCount; i++) {\n          if (readBoolean()) {\n            // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16);\n            } else {\n              skipScalingList(64);\n            }\n          }\n        }\n      }\n    }\n\n    skipUEG(); // log2_max_frame_num_minus4\n\n    var picOrderCntType = readUEG();\n\n    if (picOrderCntType === 0) {\n      readUEG(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      skipBits(1); // delta_pic_order_always_zero_flag\n\n      skipEG(); // offset_for_non_ref_pic\n\n      skipEG(); // offset_for_top_to_bottom_field\n\n      numRefFramesInPicOrderCntCycle = readUEG();\n\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        skipEG();\n      } // offset_for_ref_frame[ i ]\n\n    }\n\n    skipUEG(); // max_num_ref_frames\n\n    skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    var picWidthInMbsMinus1 = readUEG();\n    var picHeightInMapUnitsMinus1 = readUEG();\n    var frameMbsOnlyFlag = readBits(1);\n\n    if (frameMbsOnlyFlag === 0) {\n      skipBits(1);\n    } // mb_adaptive_frame_field_flag\n\n\n    skipBits(1); // direct_8x8_inference_flag\n\n    if (readBoolean()) {\n      // frame_cropping_flag\n      frameCropLeftOffset = readUEG();\n      frameCropRightOffset = readUEG();\n      frameCropTopOffset = readUEG();\n      frameCropBottomOffset = readUEG();\n    }\n\n    var pixelRatio = [1, 1];\n\n    if (readBoolean()) {\n      // vui_parameters_present_flag\n      if (readBoolean()) {\n        // aspect_ratio_info_present_flag\n        var aspectRatioIdc = readUByte();\n\n        switch (aspectRatioIdc) {\n          case 1:\n            pixelRatio = [1, 1];\n            break;\n\n          case 2:\n            pixelRatio = [12, 11];\n            break;\n\n          case 3:\n            pixelRatio = [10, 11];\n            break;\n\n          case 4:\n            pixelRatio = [16, 11];\n            break;\n\n          case 5:\n            pixelRatio = [40, 33];\n            break;\n\n          case 6:\n            pixelRatio = [24, 11];\n            break;\n\n          case 7:\n            pixelRatio = [20, 11];\n            break;\n\n          case 8:\n            pixelRatio = [32, 11];\n            break;\n\n          case 9:\n            pixelRatio = [80, 33];\n            break;\n\n          case 10:\n            pixelRatio = [18, 11];\n            break;\n\n          case 11:\n            pixelRatio = [15, 11];\n            break;\n\n          case 12:\n            pixelRatio = [64, 33];\n            break;\n\n          case 13:\n            pixelRatio = [160, 99];\n            break;\n\n          case 14:\n            pixelRatio = [4, 3];\n            break;\n\n          case 15:\n            pixelRatio = [3, 2];\n            break;\n\n          case 16:\n            pixelRatio = [2, 1];\n            break;\n\n          case 255:\n            {\n              pixelRatio = [readUByte() << 8 | readUByte(), readUByte() << 8 | readUByte()];\n              break;\n            }\n        }\n      }\n    }\n\n    return {\n      width: Math.ceil((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2),\n      height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),\n      pixelRatio: pixelRatio\n    };\n  };\n\n  _proto.readSliceType = function readSliceType() {\n    // skip NALu type\n    this.readUByte(); // discard first_mb_in_slice\n\n    this.readUEG(); // return slice_type\n\n    return this.readUEG();\n  };\n\n  return ExpGolomb;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ExpGolomb);\n\n/***/ }),\n\n/***/ \"./src/demux/id3.ts\":\n/*!**************************!*\\\n  !*** ./src/demux/id3.ts ***!\n  \\**************************/\n/*! exports provided: isHeader, isFooter, getID3Data, canParse, getTimeStamp, isTimeStampFrame, getID3Frames, decodeFrame, utf8ArrayToStr, testables */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_539121__) {\n\n\"use strict\";\n__nested_webpack_require_539121__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_539121__.d(__webpack_exports__, \"isHeader\", function() { return isHeader; });\n/* harmony export (binding) */ __nested_webpack_require_539121__.d(__webpack_exports__, \"isFooter\", function() { return isFooter; });\n/* harmony export (binding) */ __nested_webpack_require_539121__.d(__webpack_exports__, \"getID3Data\", function() { return getID3Data; });\n/* harmony export (binding) */ __nested_webpack_require_539121__.d(__webpack_exports__, \"canParse\", function() { return canParse; });\n/* harmony export (binding) */ __nested_webpack_require_539121__.d(__webpack_exports__, \"getTimeStamp\", function() { return getTimeStamp; });\n/* harmony export (binding) */ __nested_webpack_require_539121__.d(__webpack_exports__, \"isTimeStampFrame\", function() { return isTimeStampFrame; });\n/* harmony export (binding) */ __nested_webpack_require_539121__.d(__webpack_exports__, \"getID3Frames\", function() { return getID3Frames; });\n/* harmony export (binding) */ __nested_webpack_require_539121__.d(__webpack_exports__, \"decodeFrame\", function() { return decodeFrame; });\n/* harmony export (binding) */ __nested_webpack_require_539121__.d(__webpack_exports__, \"utf8ArrayToStr\", function() { return utf8ArrayToStr; });\n/* harmony export (binding) */ __nested_webpack_require_539121__.d(__webpack_exports__, \"testables\", function() { return testables; });\n// breaking up those two types in order to clarify what is happening in the decoding path.\n\n/**\n * Returns true if an ID3 header can be found at offset in data\n * @param {Uint8Array} data - The data to search in\n * @param {number} offset - The offset at which to start searching\n * @return {boolean} - True if an ID3 header is found\n */\nvar isHeader = function isHeader(data, offset) {\n  /*\n   * http://id3.org/id3v2.3.0\n   * [0]     = 'I'\n   * [1]     = 'D'\n   * [2]     = '3'\n   * [3,4]   = {Version}\n   * [5]     = {Flags}\n   * [6-9]   = {ID3 Size}\n   *\n   * An ID3v2 tag can be detected with the following pattern:\n   *  $49 44 33 yy yy xx zz zz zz zz\n   * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80\n   */\n  if (offset + 10 <= data.length) {\n    // look for 'ID3' identifier\n    if (data[offset] === 0x49 && data[offset + 1] === 0x44 && data[offset + 2] === 0x33) {\n      // check version is within range\n      if (data[offset + 3] < 0xff && data[offset + 4] < 0xff) {\n        // check size is within range\n        if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n/**\n * Returns true if an ID3 footer can be found at offset in data\n * @param {Uint8Array} data - The data to search in\n * @param {number} offset - The offset at which to start searching\n * @return {boolean} - True if an ID3 footer is found\n */\n\nvar isFooter = function isFooter(data, offset) {\n  /*\n   * The footer is a copy of the header, but with a different identifier\n   */\n  if (offset + 10 <= data.length) {\n    // look for '3DI' identifier\n    if (data[offset] === 0x33 && data[offset + 1] === 0x44 && data[offset + 2] === 0x49) {\n      // check version is within range\n      if (data[offset + 3] < 0xff && data[offset + 4] < 0xff) {\n        // check size is within range\n        if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n/**\n * Returns any adjacent ID3 tags found in data starting at offset, as one block of data\n * @param {Uint8Array} data - The data to search in\n * @param {number} offset - The offset at which to start searching\n * @return {Uint8Array | undefined} - The block of data containing any ID3 tags found\n * or *undefined* if no header is found at the starting offset\n */\n\nvar getID3Data = function getID3Data(data, offset) {\n  var front = offset;\n  var length = 0;\n\n  while (isHeader(data, offset)) {\n    // ID3 header is 10 bytes\n    length += 10;\n    var size = readSize(data, offset + 6);\n    length += size;\n\n    if (isFooter(data, offset + 10)) {\n      // ID3 footer is 10 bytes\n      length += 10;\n    }\n\n    offset += length;\n  }\n\n  if (length > 0) {\n    return data.subarray(front, front + length);\n  }\n\n  return undefined;\n};\n\nvar readSize = function readSize(data, offset) {\n  var size = 0;\n  size = (data[offset] & 0x7f) << 21;\n  size |= (data[offset + 1] & 0x7f) << 14;\n  size |= (data[offset + 2] & 0x7f) << 7;\n  size |= data[offset + 3] & 0x7f;\n  return size;\n};\n\nvar canParse = function canParse(data, offset) {\n  return isHeader(data, offset) && readSize(data, offset + 6) + 10 <= data.length - offset;\n};\n/**\n * Searches for the Elementary Stream timestamp found in the ID3 data chunk\n * @param {Uint8Array} data - Block of data containing one or more ID3 tags\n * @return {number | undefined} - The timestamp\n */\n\nvar getTimeStamp = function getTimeStamp(data) {\n  var frames = getID3Frames(data);\n\n  for (var i = 0; i < frames.length; i++) {\n    var frame = frames[i];\n\n    if (isTimeStampFrame(frame)) {\n      return readTimeStamp(frame);\n    }\n  }\n\n  return undefined;\n};\n/**\n * Returns true if the ID3 frame is an Elementary Stream timestamp frame\n * @param {ID3 frame} frame\n */\n\nvar isTimeStampFrame = function isTimeStampFrame(frame) {\n  return frame && frame.key === 'PRIV' && frame.info === 'com.apple.streaming.transportStreamTimestamp';\n};\n\nvar getFrameData = function getFrameData(data) {\n  /*\n  Frame ID       $xx xx xx xx (four characters)\n  Size           $xx xx xx xx\n  Flags          $xx xx\n  */\n  var type = String.fromCharCode(data[0], data[1], data[2], data[3]);\n  var size = readSize(data, 4); // skip frame id, size, and flags\n\n  var offset = 10;\n  return {\n    type: type,\n    size: size,\n    data: data.subarray(offset, offset + size)\n  };\n};\n/**\n * Returns an array of ID3 frames found in all the ID3 tags in the id3Data\n * @param {Uint8Array} id3Data - The ID3 data containing one or more ID3 tags\n * @return {ID3.Frame[]} - Array of ID3 frame objects\n */\n\n\nvar getID3Frames = function getID3Frames(id3Data) {\n  var offset = 0;\n  var frames = [];\n\n  while (isHeader(id3Data, offset)) {\n    var size = readSize(id3Data, offset + 6); // skip past ID3 header\n\n    offset += 10;\n    var end = offset + size; // loop through frames in the ID3 tag\n\n    while (offset + 8 < end) {\n      var frameData = getFrameData(id3Data.subarray(offset));\n      var frame = decodeFrame(frameData);\n\n      if (frame) {\n        frames.push(frame);\n      } // skip frame header and frame data\n\n\n      offset += frameData.size + 10;\n    }\n\n    if (isFooter(id3Data, offset)) {\n      offset += 10;\n    }\n  }\n\n  return frames;\n};\nvar decodeFrame = function decodeFrame(frame) {\n  if (frame.type === 'PRIV') {\n    return decodePrivFrame(frame);\n  } else if (frame.type[0] === 'W') {\n    return decodeURLFrame(frame);\n  }\n\n  return decodeTextFrame(frame);\n};\n\nvar decodePrivFrame = function decodePrivFrame(frame) {\n  /*\n  Format: <text string>\\0<binary data>\n  */\n  if (frame.size < 2) {\n    return undefined;\n  }\n\n  var owner = utf8ArrayToStr(frame.data, true);\n  var privateData = new Uint8Array(frame.data.subarray(owner.length + 1));\n  return {\n    key: frame.type,\n    info: owner,\n    data: privateData.buffer\n  };\n};\n\nvar decodeTextFrame = function decodeTextFrame(frame) {\n  if (frame.size < 2) {\n    return undefined;\n  }\n\n  if (frame.type === 'TXXX') {\n    /*\n    Format:\n    [0]   = {Text Encoding}\n    [1-?] = {Description}\\0{Value}\n    */\n    var index = 1;\n    var description = utf8ArrayToStr(frame.data.subarray(index), true);\n    index += description.length + 1;\n    var value = utf8ArrayToStr(frame.data.subarray(index));\n    return {\n      key: frame.type,\n      info: description,\n      data: value\n    };\n  }\n  /*\n  Format:\n  [0]   = {Text Encoding}\n  [1-?] = {Value}\n  */\n\n\n  var text = utf8ArrayToStr(frame.data.subarray(1));\n  return {\n    key: frame.type,\n    data: text\n  };\n};\n\nvar decodeURLFrame = function decodeURLFrame(frame) {\n  if (frame.type === 'WXXX') {\n    /*\n    Format:\n    [0]   = {Text Encoding}\n    [1-?] = {Description}\\0{URL}\n    */\n    if (frame.size < 2) {\n      return undefined;\n    }\n\n    var index = 1;\n    var description = utf8ArrayToStr(frame.data.subarray(index), true);\n    index += description.length + 1;\n    var value = utf8ArrayToStr(frame.data.subarray(index));\n    return {\n      key: frame.type,\n      info: description,\n      data: value\n    };\n  }\n  /*\n  Format:\n  [0-?] = {URL}\n  */\n\n\n  var url = utf8ArrayToStr(frame.data);\n  return {\n    key: frame.type,\n    data: url\n  };\n};\n\nvar readTimeStamp = function readTimeStamp(timeStampFrame) {\n  if (timeStampFrame.data.byteLength === 8) {\n    var data = new Uint8Array(timeStampFrame.data); // timestamp is 33 bit expressed as a big-endian eight-octet number,\n    // with the upper 31 bits set to zero.\n\n    var pts33Bit = data[3] & 0x1;\n    var timestamp = (data[4] << 23) + (data[5] << 15) + (data[6] << 7) + data[7];\n    timestamp /= 45;\n\n    if (pts33Bit) {\n      timestamp += 47721858.84;\n    } // 2^32 / 90\n\n\n    return Math.round(timestamp);\n  }\n\n  return undefined;\n}; // http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197\n// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\n\n/* utf.js - UTF-8 <=> UTF-16 convertion\n *\n * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n * Version: 1.0\n * LastModified: Dec 25 1999\n * This library is free.  You can redistribute it and/or modify it.\n */\n\n\nvar utf8ArrayToStr = function utf8ArrayToStr(array, exitOnNull) {\n  if (exitOnNull === void 0) {\n    exitOnNull = false;\n  }\n\n  var decoder = getTextDecoder();\n\n  if (decoder) {\n    var decoded = decoder.decode(array);\n\n    if (exitOnNull) {\n      // grab up to the first null\n      var idx = decoded.indexOf('\\0');\n      return idx !== -1 ? decoded.substring(0, idx) : decoded;\n    } // remove any null characters\n\n\n    return decoded.replace(/\\0/g, '');\n  }\n\n  var len = array.length;\n  var c;\n  var char2;\n  var char3;\n  var out = '';\n  var i = 0;\n\n  while (i < len) {\n    c = array[i++];\n\n    if (c === 0x00 && exitOnNull) {\n      return out;\n    } else if (c === 0x00 || c === 0x03) {\n      // If the character is 3 (END_OF_TEXT) or 0 (NULL) then skip it\n      continue;\n    }\n\n    switch (c >> 4) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n\n      case 12:\n      case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode((c & 0x1f) << 6 | char2 & 0x3f);\n        break;\n\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode((c & 0x0f) << 12 | (char2 & 0x3f) << 6 | (char3 & 0x3f) << 0);\n        break;\n\n      default:\n    }\n  }\n\n  return out;\n};\nvar testables = {\n  decodeTextFrame: decodeTextFrame\n};\nvar decoder;\n\nfunction getTextDecoder() {\n  if (!decoder && typeof self.TextDecoder !== 'undefined') {\n    decoder = new self.TextDecoder('utf-8');\n  }\n\n  return decoder;\n}\n\n/***/ }),\n\n/***/ \"./src/demux/mp3demuxer.ts\":\n/*!*********************************!*\\\n  !*** ./src/demux/mp3demuxer.ts ***!\n  \\*********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_550543__) {\n\n\"use strict\";\n__nested_webpack_require_550543__.r(__webpack_exports__);\n/* harmony import */ var _base_audio_demuxer__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_550543__(/*! ./base-audio-demuxer */ \"./src/demux/base-audio-demuxer.ts\");\n/* harmony import */ var _demux_id3__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_550543__(/*! ../demux/id3 */ \"./src/demux/id3.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_550543__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _mpegaudio__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_550543__(/*! ./mpegaudio */ \"./src/demux/mpegaudio.ts\");\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * MP3 demuxer\n */\n\n\n\n\n\nvar MP3Demuxer = /*#__PURE__*/function (_BaseAudioDemuxer) {\n  _inheritsLoose(MP3Demuxer, _BaseAudioDemuxer);\n\n  function MP3Demuxer() {\n    return _BaseAudioDemuxer.apply(this, arguments) || this;\n  }\n\n  var _proto = MP3Demuxer.prototype;\n\n  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {\n    _BaseAudioDemuxer.prototype.resetInitSegment.call(this, initSegment, audioCodec, videoCodec, trackDuration);\n\n    this._audioTrack = {\n      container: 'audio/mpeg',\n      type: 'audio',\n      id: 2,\n      pid: -1,\n      sequenceNumber: 0,\n      segmentCodec: 'mp3',\n      samples: [],\n      manifestCodec: audioCodec,\n      duration: trackDuration,\n      inputTimeScale: 90000,\n      dropped: 0\n    };\n  };\n\n  MP3Demuxer.probe = function probe(data) {\n    if (!data) {\n      return false;\n    } // check if data contains ID3 timestamp and MPEG sync word\n    // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n    // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n    // More info http://www.mp3-tech.org/programmer/frame_header.html\n\n\n    var id3Data = _demux_id3__WEBPACK_IMPORTED_MODULE_1__[\"getID3Data\"](data, 0) || [];\n    var offset = id3Data.length;\n\n    for (var length = data.length; offset < length; offset++) {\n      if (_mpegaudio__WEBPACK_IMPORTED_MODULE_3__[\"probe\"](data, offset)) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].log('MPEG Audio sync word found !');\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  _proto.canParse = function canParse(data, offset) {\n    return _mpegaudio__WEBPACK_IMPORTED_MODULE_3__[\"canParse\"](data, offset);\n  };\n\n  _proto.appendFrame = function appendFrame(track, data, offset) {\n    if (this.basePTS === null) {\n      return;\n    }\n\n    return _mpegaudio__WEBPACK_IMPORTED_MODULE_3__[\"appendFrame\"](track, data, offset, this.basePTS, this.frameIndex);\n  };\n\n  return MP3Demuxer;\n}(_base_audio_demuxer__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (MP3Demuxer);\n\n/***/ }),\n\n/***/ \"./src/demux/mp4demuxer.ts\":\n/*!*********************************!*\\\n  !*** ./src/demux/mp4demuxer.ts ***!\n  \\*********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_554023__) {\n\n\"use strict\";\n__nested_webpack_require_554023__.r(__webpack_exports__);\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_554023__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _types_demuxer__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_554023__(/*! ../types/demuxer */ \"./src/types/demuxer.ts\");\n/* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_554023__(/*! ../utils/mp4-tools */ \"./src/utils/mp4-tools.ts\");\n/* harmony import */ var _dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_554023__(/*! ./dummy-demuxed-track */ \"./src/demux/dummy-demuxed-track.ts\");\n\n\n/**\n * MP4 demuxer\n */\n\n\n\nvar emsgSchemePattern = /\\/emsg[-/]ID3/i;\n\nvar MP4Demuxer = /*#__PURE__*/function () {\n  function MP4Demuxer(observer, config) {\n    this.remainderData = null;\n    this.timeOffset = 0;\n    this.config = void 0;\n    this.videoTrack = void 0;\n    this.audioTrack = void 0;\n    this.id3Track = void 0;\n    this.txtTrack = void 0;\n    this.config = config;\n  }\n\n  var _proto = MP4Demuxer.prototype;\n\n  _proto.resetTimeStamp = function resetTimeStamp() {};\n\n  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {\n    var initData = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__[\"parseInitSegment\"])(initSegment);\n    var videoTrack = this.videoTrack = Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_3__[\"dummyTrack\"])('video', 1);\n    var audioTrack = this.audioTrack = Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_3__[\"dummyTrack\"])('audio', 1);\n    var captionTrack = this.txtTrack = Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_3__[\"dummyTrack\"])('text', 1);\n    this.id3Track = Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_3__[\"dummyTrack\"])('id3', 1);\n    this.timeOffset = 0;\n\n    if (initData.video) {\n      var _initData$video = initData.video,\n          id = _initData$video.id,\n          timescale = _initData$video.timescale,\n          codec = _initData$video.codec;\n      videoTrack.id = id;\n      videoTrack.timescale = captionTrack.timescale = timescale;\n      videoTrack.codec = codec;\n    }\n\n    if (initData.audio) {\n      var _initData$audio = initData.audio,\n          _id = _initData$audio.id,\n          _timescale = _initData$audio.timescale,\n          _codec = _initData$audio.codec;\n      audioTrack.id = _id;\n      audioTrack.timescale = _timescale;\n      audioTrack.codec = _codec;\n    }\n\n    captionTrack.id = _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__[\"RemuxerTrackIdConfig\"].text;\n    videoTrack.sampleDuration = 0;\n    videoTrack.duration = audioTrack.duration = trackDuration;\n  };\n\n  _proto.resetContiguity = function resetContiguity() {};\n\n  MP4Demuxer.probe = function probe(data) {\n    // ensure we find a moof box in the first 16 kB\n    data = data.length > 16384 ? data.subarray(0, 16384) : data;\n    return Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__[\"findBox\"])(data, ['moof']).length > 0;\n  };\n\n  _proto.demux = function demux(data, timeOffset) {\n    this.timeOffset = timeOffset; // Load all data into the avc track. The CMAF remuxer will look for the data in the samples object; the rest of the fields do not matter\n\n    var videoSamples = data;\n    var videoTrack = this.videoTrack;\n    var textTrack = this.txtTrack;\n\n    if (this.config.progressive) {\n      // Split the bytestream into two ranges: one encompassing all data up until the start of the last moof, and everything else.\n      // This is done to guarantee that we're sending valid data to MSE - when demuxing progressively, we have no guarantee\n      // that the fetch loader gives us flush moof+mdat pairs. If we push jagged data to MSE, it will throw an exception.\n      if (this.remainderData) {\n        videoSamples = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__[\"appendUint8Array\"])(this.remainderData, data);\n      }\n\n      var segmentedData = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__[\"segmentValidRange\"])(videoSamples);\n      this.remainderData = segmentedData.remainder;\n      videoTrack.samples = segmentedData.valid || new Uint8Array();\n    } else {\n      videoTrack.samples = videoSamples;\n    }\n\n    var id3Track = this.extractID3Track(videoTrack, timeOffset);\n    textTrack.samples = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__[\"parseSamples\"])(timeOffset, videoTrack);\n    return {\n      videoTrack: videoTrack,\n      audioTrack: this.audioTrack,\n      id3Track: id3Track,\n      textTrack: this.txtTrack\n    };\n  };\n\n  _proto.flush = function flush() {\n    var timeOffset = this.timeOffset;\n    var videoTrack = this.videoTrack;\n    var textTrack = this.txtTrack;\n    videoTrack.samples = this.remainderData || new Uint8Array();\n    this.remainderData = null;\n    var id3Track = this.extractID3Track(videoTrack, this.timeOffset);\n    textTrack.samples = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__[\"parseSamples\"])(timeOffset, videoTrack);\n    return {\n      videoTrack: videoTrack,\n      audioTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_3__[\"dummyTrack\"])(),\n      id3Track: id3Track,\n      textTrack: Object(_dummy_demuxed_track__WEBPACK_IMPORTED_MODULE_3__[\"dummyTrack\"])()\n    };\n  };\n\n  _proto.extractID3Track = function extractID3Track(videoTrack, timeOffset) {\n    var id3Track = this.id3Track;\n\n    if (videoTrack.samples.length) {\n      var emsgs = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__[\"findBox\"])(videoTrack.samples, ['emsg']);\n\n      if (emsgs) {\n        emsgs.forEach(function (data) {\n          var emsgInfo = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__[\"parseEmsg\"])(data);\n\n          if (emsgSchemePattern.test(emsgInfo.schemeIdUri)) {\n            var pts = Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(emsgInfo.presentationTime) ? emsgInfo.presentationTime / emsgInfo.timeScale : timeOffset + emsgInfo.presentationTimeDelta / emsgInfo.timeScale;\n            var payload = emsgInfo.payload;\n            id3Track.samples.push({\n              data: payload,\n              len: payload.byteLength,\n              dts: pts,\n              pts: pts,\n              type: _types_demuxer__WEBPACK_IMPORTED_MODULE_1__[\"MetadataSchema\"].emsg\n            });\n          }\n        });\n      }\n    }\n\n    return id3Track;\n  };\n\n  _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {\n    return Promise.reject(new Error('The MP4 demuxer does not support SAMPLE-AES decryption'));\n  };\n\n  _proto.destroy = function destroy() {};\n\n  return MP4Demuxer;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (MP4Demuxer);\n\n/***/ }),\n\n/***/ \"./src/demux/mpegaudio.ts\":\n/*!********************************!*\\\n  !*** ./src/demux/mpegaudio.ts ***!\n  \\********************************/\n/*! exports provided: appendFrame, parseHeader, isHeaderPattern, isHeader, canParse, probe */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_561075__) {\n\n\"use strict\";\n__nested_webpack_require_561075__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_561075__.d(__webpack_exports__, \"appendFrame\", function() { return appendFrame; });\n/* harmony export (binding) */ __nested_webpack_require_561075__.d(__webpack_exports__, \"parseHeader\", function() { return parseHeader; });\n/* harmony export (binding) */ __nested_webpack_require_561075__.d(__webpack_exports__, \"isHeaderPattern\", function() { return isHeaderPattern; });\n/* harmony export (binding) */ __nested_webpack_require_561075__.d(__webpack_exports__, \"isHeader\", function() { return isHeader; });\n/* harmony export (binding) */ __nested_webpack_require_561075__.d(__webpack_exports__, \"canParse\", function() { return canParse; });\n/* harmony export (binding) */ __nested_webpack_require_561075__.d(__webpack_exports__, \"probe\", function() { return probe; });\n/**\n *  MPEG parser helper\n */\nvar chromeVersion = null;\nvar BitratesMap = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160];\nvar SamplingRateMap = [44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000];\nvar SamplesCoefficients = [// MPEG 2.5\n[0, // Reserved\n72, // Layer3\n144, // Layer2\n12 // Layer1\n], // Reserved\n[0, // Reserved\n0, // Layer3\n0, // Layer2\n0 // Layer1\n], // MPEG 2\n[0, // Reserved\n72, // Layer3\n144, // Layer2\n12 // Layer1\n], // MPEG 1\n[0, // Reserved\n144, // Layer3\n144, // Layer2\n12 // Layer1\n]];\nvar BytesInSlot = [0, // Reserved\n1, // Layer3\n1, // Layer2\n4 // Layer1\n];\nfunction appendFrame(track, data, offset, pts, frameIndex) {\n  // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference\n  if (offset + 24 > data.length) {\n    return;\n  }\n\n  var header = parseHeader(data, offset);\n\n  if (header && offset + header.frameLength <= data.length) {\n    var frameDuration = header.samplesPerFrame * 90000 / header.sampleRate;\n    var stamp = pts + frameIndex * frameDuration;\n    var sample = {\n      unit: data.subarray(offset, offset + header.frameLength),\n      pts: stamp,\n      dts: stamp\n    };\n    track.config = [];\n    track.channelCount = header.channelCount;\n    track.samplerate = header.sampleRate;\n    track.samples.push(sample);\n    return {\n      sample: sample,\n      length: header.frameLength,\n      missing: 0\n    };\n  }\n}\nfunction parseHeader(data, offset) {\n  var mpegVersion = data[offset + 1] >> 3 & 3;\n  var mpegLayer = data[offset + 1] >> 1 & 3;\n  var bitRateIndex = data[offset + 2] >> 4 & 15;\n  var sampleRateIndex = data[offset + 2] >> 2 & 3;\n\n  if (mpegVersion !== 1 && bitRateIndex !== 0 && bitRateIndex !== 15 && sampleRateIndex !== 3) {\n    var paddingBit = data[offset + 2] >> 1 & 1;\n    var channelMode = data[offset + 3] >> 6;\n    var columnInBitrates = mpegVersion === 3 ? 3 - mpegLayer : mpegLayer === 3 ? 3 : 4;\n    var bitRate = BitratesMap[columnInBitrates * 14 + bitRateIndex - 1] * 1000;\n    var columnInSampleRates = mpegVersion === 3 ? 0 : mpegVersion === 2 ? 1 : 2;\n    var sampleRate = SamplingRateMap[columnInSampleRates * 3 + sampleRateIndex];\n    var channelCount = channelMode === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)\n\n    var sampleCoefficient = SamplesCoefficients[mpegVersion][mpegLayer];\n    var bytesInSlot = BytesInSlot[mpegLayer];\n    var samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;\n    var frameLength = Math.floor(sampleCoefficient * bitRate / sampleRate + paddingBit) * bytesInSlot;\n\n    if (chromeVersion === null) {\n      var userAgent = navigator.userAgent || '';\n      var result = userAgent.match(/Chrome\\/(\\d+)/i);\n      chromeVersion = result ? parseInt(result[1]) : 0;\n    }\n\n    var needChromeFix = !!chromeVersion && chromeVersion <= 87;\n\n    if (needChromeFix && mpegLayer === 2 && bitRate >= 224000 && channelMode === 0) {\n      // Work around bug in Chromium by setting channelMode to dual-channel (01) instead of stereo (00)\n      data[offset + 3] = data[offset + 3] | 0x80;\n    }\n\n    return {\n      sampleRate: sampleRate,\n      channelCount: channelCount,\n      frameLength: frameLength,\n      samplesPerFrame: samplesPerFrame\n    };\n  }\n}\nfunction isHeaderPattern(data, offset) {\n  return data[offset] === 0xff && (data[offset + 1] & 0xe0) === 0xe0 && (data[offset + 1] & 0x06) !== 0x00;\n}\nfunction isHeader(data, offset) {\n  // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n  // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n  // More info http://www.mp3-tech.org/programmer/frame_header.html\n  return offset + 1 < data.length && isHeaderPattern(data, offset);\n}\nfunction canParse(data, offset) {\n  var headerSize = 4;\n  return isHeaderPattern(data, offset) && headerSize <= data.length - offset;\n}\nfunction probe(data, offset) {\n  // same as isHeader but we also check that MPEG frame follows last MPEG frame\n  // or end of data is reached\n  if (offset + 1 < data.length && isHeaderPattern(data, offset)) {\n    // MPEG header Length\n    var headerLength = 4; // MPEG frame Length\n\n    var header = parseHeader(data, offset);\n    var frameLength = headerLength;\n\n    if (header !== null && header !== void 0 && header.frameLength) {\n      frameLength = header.frameLength;\n    }\n\n    var newOffset = offset + frameLength;\n    return newOffset === data.length || isHeader(data, newOffset);\n  }\n\n  return false;\n}\n\n/***/ }),\n\n/***/ \"./src/demux/sample-aes.ts\":\n/*!*********************************!*\\\n  !*** ./src/demux/sample-aes.ts ***!\n  \\*********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_566914__) {\n\n\"use strict\";\n__nested_webpack_require_566914__.r(__webpack_exports__);\n/* harmony import */ var _crypt_decrypter__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_566914__(/*! ../crypt/decrypter */ \"./src/crypt/decrypter.ts\");\n/* harmony import */ var _tsdemuxer__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_566914__(/*! ./tsdemuxer */ \"./src/demux/tsdemuxer.ts\");\n/**\n * SAMPLE-AES decrypter\n */\n\n\n\nvar SampleAesDecrypter = /*#__PURE__*/function () {\n  function SampleAesDecrypter(observer, config, keyData) {\n    this.keyData = void 0;\n    this.decrypter = void 0;\n    this.keyData = keyData;\n    this.decrypter = new _crypt_decrypter__WEBPACK_IMPORTED_MODULE_0__[\"default\"](observer, config, {\n      removePKCS7Padding: false\n    });\n  }\n\n  var _proto = SampleAesDecrypter.prototype;\n\n  _proto.decryptBuffer = function decryptBuffer(encryptedData, callback) {\n    this.decrypter.decrypt(encryptedData, this.keyData.key.buffer, this.keyData.iv.buffer, callback);\n  } // AAC - encrypt all full 16 bytes blocks starting from offset 16\n  ;\n\n  _proto.decryptAacSample = function decryptAacSample(samples, sampleIndex, callback, sync) {\n    var curUnit = samples[sampleIndex].unit;\n\n    if (curUnit.length <= 16) {\n      // No encrypted portion in this sample (first 16 bytes is not\n      // encrypted, see https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/HLS_Sample_Encryption/Encryption/Encryption.html),\n      return;\n    }\n\n    var encryptedData = curUnit.subarray(16, curUnit.length - curUnit.length % 16);\n    var encryptedBuffer = encryptedData.buffer.slice(encryptedData.byteOffset, encryptedData.byteOffset + encryptedData.length);\n    var localthis = this;\n    this.decryptBuffer(encryptedBuffer, function (decryptedBuffer) {\n      var decryptedData = new Uint8Array(decryptedBuffer);\n      curUnit.set(decryptedData, 16);\n\n      if (!sync) {\n        localthis.decryptAacSamples(samples, sampleIndex + 1, callback);\n      }\n    });\n  };\n\n  _proto.decryptAacSamples = function decryptAacSamples(samples, sampleIndex, callback) {\n    for (;; sampleIndex++) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      if (samples[sampleIndex].unit.length < 32) {\n        continue;\n      }\n\n      var sync = this.decrypter.isSync();\n      this.decryptAacSample(samples, sampleIndex, callback, sync);\n\n      if (!sync) {\n        return;\n      }\n    }\n  } // AVC - encrypt one 16 bytes block out of ten, starting from offset 32\n  ;\n\n  _proto.getAvcEncryptedData = function getAvcEncryptedData(decodedData) {\n    var encryptedDataLen = Math.floor((decodedData.length - 48) / 160) * 16 + 16;\n    var encryptedData = new Int8Array(encryptedDataLen);\n    var outputPos = 0;\n\n    for (var inputPos = 32; inputPos < decodedData.length - 16; inputPos += 160, outputPos += 16) {\n      encryptedData.set(decodedData.subarray(inputPos, inputPos + 16), outputPos);\n    }\n\n    return encryptedData;\n  };\n\n  _proto.getAvcDecryptedUnit = function getAvcDecryptedUnit(decodedData, decryptedData) {\n    var uint8DecryptedData = new Uint8Array(decryptedData);\n    var inputPos = 0;\n\n    for (var outputPos = 32; outputPos < decodedData.length - 16; outputPos += 160, inputPos += 16) {\n      decodedData.set(uint8DecryptedData.subarray(inputPos, inputPos + 16), outputPos);\n    }\n\n    return decodedData;\n  };\n\n  _proto.decryptAvcSample = function decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync) {\n    var decodedData = Object(_tsdemuxer__WEBPACK_IMPORTED_MODULE_1__[\"discardEPB\"])(curUnit.data);\n    var encryptedData = this.getAvcEncryptedData(decodedData);\n    var localthis = this;\n    this.decryptBuffer(encryptedData.buffer, function (decryptedBuffer) {\n      curUnit.data = localthis.getAvcDecryptedUnit(decodedData, decryptedBuffer);\n\n      if (!sync) {\n        localthis.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);\n      }\n    });\n  };\n\n  _proto.decryptAvcSamples = function decryptAvcSamples(samples, sampleIndex, unitIndex, callback) {\n    if (samples instanceof Uint8Array) {\n      throw new Error('Cannot decrypt samples of type Uint8Array');\n    }\n\n    for (;; sampleIndex++, unitIndex = 0) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      var curUnits = samples[sampleIndex].units;\n\n      for (;; unitIndex++) {\n        if (unitIndex >= curUnits.length) {\n          break;\n        }\n\n        var curUnit = curUnits[unitIndex];\n\n        if (curUnit.data.length <= 48 || curUnit.type !== 1 && curUnit.type !== 5) {\n          continue;\n        }\n\n        var sync = this.decrypter.isSync();\n        this.decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync);\n\n        if (!sync) {\n          return;\n        }\n      }\n    }\n  };\n\n  return SampleAesDecrypter;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (SampleAesDecrypter);\n\n/***/ }),\n\n/***/ \"./src/demux/transmuxer-interface.ts\":\n/*!*******************************************!*\\\n  !*** ./src/demux/transmuxer-interface.ts ***!\n  \\*******************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_572122__) {\n\n\"use strict\";\n__nested_webpack_require_572122__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_572122__.d(__webpack_exports__, \"default\", function() { return TransmuxerInterface; });\n/* harmony import */ var webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_572122__(/*! webworkify-webpack */ \"./node_modules/webworkify-webpack/index.js\");\n/* harmony import */ var webworkify_webpack__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nested_webpack_require_572122__.n(webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_572122__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_572122__(/*! ../demux/transmuxer */ \"./src/demux/transmuxer.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_572122__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_572122__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_572122__(/*! ../utils/mediasource-helper */ \"./src/utils/mediasource-helper.ts\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_572122__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__nested_webpack_require_572122__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\nvar MediaSource = Object(_utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_5__[\"getMediaSource\"])() || {\n  isTypeSupported: function isTypeSupported() {\n    return false;\n  }\n};\n\nvar TransmuxerInterface = /*#__PURE__*/function () {\n  function TransmuxerInterface(hls, id, onTransmuxComplete, onFlush) {\n    var _this = this;\n\n    this.hls = void 0;\n    this.id = void 0;\n    this.observer = void 0;\n    this.frag = null;\n    this.part = null;\n    this.worker = void 0;\n    this.onwmsg = void 0;\n    this.transmuxer = null;\n    this.onTransmuxComplete = void 0;\n    this.onFlush = void 0;\n    this.hls = hls;\n    this.id = id;\n    this.onTransmuxComplete = onTransmuxComplete;\n    this.onFlush = onFlush;\n    var config = hls.config;\n\n    var forwardMessage = function forwardMessage(ev, data) {\n      data = data || {};\n      data.frag = _this.frag;\n      data.id = _this.id;\n      hls.trigger(ev, data);\n    }; // forward events to main thread\n\n\n    this.observer = new eventemitter3__WEBPACK_IMPORTED_MODULE_6__[\"EventEmitter\"]();\n    this.observer.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_DECRYPTED, forwardMessage);\n    this.observer.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, forwardMessage);\n    var typeSupported = {\n      mp4: MediaSource.isTypeSupported('video/mp4'),\n      mpeg: MediaSource.isTypeSupported('audio/mpeg'),\n      mp3: MediaSource.isTypeSupported('audio/mp4; codecs=\"mp3\"')\n    }; // navigator.vendor is not always available in Web Worker\n    // refer to https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator\n\n    var vendor = navigator.vendor;\n\n    if (config.enableWorker && typeof Worker !== 'undefined') {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].log('demuxing in webworker');\n      var worker;\n\n      try {\n        worker = this.worker = webworkify_webpack__WEBPACK_IMPORTED_MODULE_0__(/*require.resolve*/(/*! ../demux/transmuxer-worker.ts */ \"./src/demux/transmuxer-worker.ts\"));\n        this.onwmsg = this.onWorkerMessage.bind(this);\n        worker.addEventListener('message', this.onwmsg);\n\n        worker.onerror = function (event) {\n          hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, {\n            type: _errors__WEBPACK_IMPORTED_MODULE_4__[\"ErrorTypes\"].OTHER_ERROR,\n            details: _errors__WEBPACK_IMPORTED_MODULE_4__[\"ErrorDetails\"].INTERNAL_EXCEPTION,\n            fatal: true,\n            event: 'demuxerWorker',\n            error: new Error(event.message + \"  (\" + event.filename + \":\" + event.lineno + \")\")\n          });\n        };\n\n        worker.postMessage({\n          cmd: 'init',\n          typeSupported: typeSupported,\n          vendor: vendor,\n          id: id,\n          config: JSON.stringify(config)\n        });\n      } catch (err) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn('Error in worker:', err);\n        _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].error('Error while initializing DemuxerWorker, fallback to inline');\n\n        if (worker) {\n          // revoke the Object URL that was used to create transmuxer worker, so as not to leak it\n          self.URL.revokeObjectURL(worker.objectURL);\n        }\n\n        this.transmuxer = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.observer, typeSupported, config, vendor, id);\n        this.worker = null;\n      }\n    } else {\n      this.transmuxer = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.observer, typeSupported, config, vendor, id);\n    }\n  }\n\n  var _proto = TransmuxerInterface.prototype;\n\n  _proto.destroy = function destroy() {\n    var w = this.worker;\n\n    if (w) {\n      w.removeEventListener('message', this.onwmsg);\n      w.terminate();\n      this.worker = null;\n      this.onwmsg = undefined;\n    } else {\n      var transmuxer = this.transmuxer;\n\n      if (transmuxer) {\n        transmuxer.destroy();\n        this.transmuxer = null;\n      }\n    }\n\n    var observer = this.observer;\n\n    if (observer) {\n      observer.removeAllListeners();\n    }\n\n    this.frag = null; // @ts-ignore\n\n    this.observer = null; // @ts-ignore\n\n    this.hls = null;\n  };\n\n  _proto.push = function push(data, initSegmentData, audioCodec, videoCodec, frag, part, duration, accurateTimeOffset, chunkMeta, defaultInitPTS) {\n    var _frag$initSegment,\n        _lastFrag$initSegment,\n        _this2 = this;\n\n    chunkMeta.transmuxing.start = self.performance.now();\n    var transmuxer = this.transmuxer,\n        worker = this.worker;\n    var timeOffset = part ? part.start : frag.start;\n    var decryptdata = frag.decryptdata;\n    var lastFrag = this.frag;\n    var discontinuity = !(lastFrag && frag.cc === lastFrag.cc);\n    var trackSwitch = !(lastFrag && chunkMeta.level === lastFrag.level);\n    var snDiff = lastFrag ? chunkMeta.sn - lastFrag.sn : -1;\n    var partDiff = this.part ? chunkMeta.part - this.part.index : -1;\n    var progressive = snDiff === 0 && chunkMeta.id > 1 && chunkMeta.id === (lastFrag === null || lastFrag === void 0 ? void 0 : lastFrag.stats.chunkCount);\n    var contiguous = !trackSwitch && (snDiff === 1 || snDiff === 0 && (partDiff === 1 || progressive && partDiff <= 0));\n    var now = self.performance.now();\n\n    if (trackSwitch || snDiff || frag.stats.parsing.start === 0) {\n      frag.stats.parsing.start = now;\n    }\n\n    if (part && (partDiff || !contiguous)) {\n      part.stats.parsing.start = now;\n    }\n\n    var initSegmentChange = !(lastFrag && ((_frag$initSegment = frag.initSegment) === null || _frag$initSegment === void 0 ? void 0 : _frag$initSegment.url) === ((_lastFrag$initSegment = lastFrag.initSegment) === null || _lastFrag$initSegment === void 0 ? void 0 : _lastFrag$initSegment.url));\n    var state = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__[\"TransmuxState\"](discontinuity, contiguous, accurateTimeOffset, trackSwitch, timeOffset, initSegmentChange);\n\n    if (!contiguous || discontinuity || initSegmentChange) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].log(\"[transmuxer-interface, \" + frag.type + \"]: Starting new transmux session for sn: \" + chunkMeta.sn + \" p: \" + chunkMeta.part + \" level: \" + chunkMeta.level + \" id: \" + chunkMeta.id + \"\\n        discontinuity: \" + discontinuity + \"\\n        trackSwitch: \" + trackSwitch + \"\\n        contiguous: \" + contiguous + \"\\n        accurateTimeOffset: \" + accurateTimeOffset + \"\\n        timeOffset: \" + timeOffset + \"\\n        initSegmentChange: \" + initSegmentChange);\n      var config = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__[\"TransmuxConfig\"](audioCodec, videoCodec, initSegmentData, duration, defaultInitPTS);\n      this.configureTransmuxer(config);\n    }\n\n    this.frag = frag;\n    this.part = part; // Frags with sn of 'initSegment' are not transmuxed\n\n    if (worker) {\n      // post fragment payload as transferable objects for ArrayBuffer (no copy)\n      worker.postMessage({\n        cmd: 'demux',\n        data: data,\n        decryptdata: decryptdata,\n        chunkMeta: chunkMeta,\n        state: state\n      }, data instanceof ArrayBuffer ? [data] : []);\n    } else if (transmuxer) {\n      var _transmuxResult = transmuxer.push(data, decryptdata, chunkMeta, state);\n\n      if (Object(_demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__[\"isPromise\"])(_transmuxResult)) {\n        _transmuxResult.then(function (data) {\n          _this2.handleTransmuxComplete(data);\n        });\n      } else {\n        this.handleTransmuxComplete(_transmuxResult);\n      }\n    }\n  };\n\n  _proto.flush = function flush(chunkMeta) {\n    var _this3 = this;\n\n    chunkMeta.transmuxing.start = self.performance.now();\n    var transmuxer = this.transmuxer,\n        worker = this.worker;\n\n    if (worker) {\n      worker.postMessage({\n        cmd: 'flush',\n        chunkMeta: chunkMeta\n      });\n    } else if (transmuxer) {\n      var _transmuxResult2 = transmuxer.flush(chunkMeta);\n\n      if (Object(_demux_transmuxer__WEBPACK_IMPORTED_MODULE_2__[\"isPromise\"])(_transmuxResult2)) {\n        _transmuxResult2.then(function (data) {\n          _this3.handleFlushResult(data, chunkMeta);\n        });\n      } else {\n        this.handleFlushResult(_transmuxResult2, chunkMeta);\n      }\n    }\n  };\n\n  _proto.handleFlushResult = function handleFlushResult(results, chunkMeta) {\n    var _this4 = this;\n\n    results.forEach(function (result) {\n      _this4.handleTransmuxComplete(result);\n    });\n    this.onFlush(chunkMeta);\n  };\n\n  _proto.onWorkerMessage = function onWorkerMessage(ev) {\n    var data = ev.data;\n    var hls = this.hls;\n\n    switch (data.event) {\n      case 'init':\n        {\n          // revoke the Object URL that was used to create transmuxer worker, so as not to leak it\n          self.URL.revokeObjectURL(this.worker.objectURL);\n          break;\n        }\n\n      case 'transmuxComplete':\n        {\n          this.handleTransmuxComplete(data.data);\n          break;\n        }\n\n      case 'flush':\n        {\n          this.onFlush(data.data);\n          break;\n        }\n      // pass logs from the worker thread to the main logger\n\n      case 'workerLog':\n        if (_utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"][data.data.logType]) {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"][data.data.logType](data.data.message);\n        }\n\n        break;\n\n      /* falls through */\n\n      default:\n        {\n          data.data = data.data || {};\n          data.data.frag = this.frag;\n          data.data.id = this.id;\n          hls.trigger(data.event, data.data);\n          break;\n        }\n    }\n  };\n\n  _proto.configureTransmuxer = function configureTransmuxer(config) {\n    var worker = this.worker,\n        transmuxer = this.transmuxer;\n\n    if (worker) {\n      worker.postMessage({\n        cmd: 'configure',\n        config: config\n      });\n    } else if (transmuxer) {\n      transmuxer.configure(config);\n    }\n  };\n\n  _proto.handleTransmuxComplete = function handleTransmuxComplete(result) {\n    result.chunkMeta.transmuxing.end = self.performance.now();\n    this.onTransmuxComplete(result);\n  };\n\n  return TransmuxerInterface;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/demux/transmuxer-worker.ts\":\n/*!****************************************!*\\\n  !*** ./src/demux/transmuxer-worker.ts ***!\n  \\****************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_584019__) {\n\n\"use strict\";\n__nested_webpack_require_584019__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_584019__.d(__webpack_exports__, \"default\", function() { return TransmuxerWorker; });\n/* harmony import */ var _demux_transmuxer__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_584019__(/*! ../demux/transmuxer */ \"./src/demux/transmuxer.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_584019__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_584019__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_584019__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__nested_webpack_require_584019__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction TransmuxerWorker(self) {\n  var observer = new eventemitter3__WEBPACK_IMPORTED_MODULE_3__[\"EventEmitter\"]();\n\n  var forwardMessage = function forwardMessage(ev, data) {\n    self.postMessage({\n      event: ev,\n      data: data\n    });\n  }; // forward events to main thread\n\n\n  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].FRAG_DECRYPTED, forwardMessage);\n  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, forwardMessage); // forward logger events to main thread\n\n  var forwardWorkerLogs = function forwardWorkerLogs() {\n    var _loop = function _loop(logFn) {\n      var func = function func(message) {\n        forwardMessage('workerLog', {\n          logType: logFn,\n          message: message\n        });\n      };\n\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"][logFn] = func;\n    };\n\n    for (var logFn in _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"]) {\n      _loop(logFn);\n    }\n  };\n\n  self.addEventListener('message', function (ev) {\n    var data = ev.data;\n\n    switch (data.cmd) {\n      case 'init':\n        {\n          var config = JSON.parse(data.config);\n          self.transmuxer = new _demux_transmuxer__WEBPACK_IMPORTED_MODULE_0__[\"default\"](observer, data.typeSupported, config, data.vendor, data.id);\n          Object(_utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"enableLogs\"])(config.debug);\n          forwardWorkerLogs();\n          forwardMessage('init', null);\n          break;\n        }\n\n      case 'configure':\n        {\n          self.transmuxer.configure(data.config);\n          break;\n        }\n\n      case 'demux':\n        {\n          var transmuxResult = self.transmuxer.push(data.data, data.decryptdata, data.chunkMeta, data.state);\n\n          if (Object(_demux_transmuxer__WEBPACK_IMPORTED_MODULE_0__[\"isPromise\"])(transmuxResult)) {\n            transmuxResult.then(function (data) {\n              emitTransmuxComplete(self, data);\n            });\n          } else {\n            emitTransmuxComplete(self, transmuxResult);\n          }\n\n          break;\n        }\n\n      case 'flush':\n        {\n          var id = data.chunkMeta;\n\n          var _transmuxResult = self.transmuxer.flush(id);\n\n          if (Object(_demux_transmuxer__WEBPACK_IMPORTED_MODULE_0__[\"isPromise\"])(_transmuxResult)) {\n            _transmuxResult.then(function (results) {\n              handleFlushResult(self, results, id);\n            });\n          } else {\n            handleFlushResult(self, _transmuxResult, id);\n          }\n\n          break;\n        }\n\n      default:\n        break;\n    }\n  });\n}\n\nfunction emitTransmuxComplete(self, transmuxResult) {\n  if (isEmptyResult(transmuxResult.remuxResult)) {\n    return false;\n  }\n\n  var transferable = [];\n  var _transmuxResult$remux = transmuxResult.remuxResult,\n      audio = _transmuxResult$remux.audio,\n      video = _transmuxResult$remux.video;\n\n  if (audio) {\n    addToTransferable(transferable, audio);\n  }\n\n  if (video) {\n    addToTransferable(transferable, video);\n  }\n\n  self.postMessage({\n    event: 'transmuxComplete',\n    data: transmuxResult\n  }, transferable);\n  return true;\n} // Converts data to a transferable object https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast)\n// in order to minimize message passing overhead\n\n\nfunction addToTransferable(transferable, track) {\n  if (track.data1) {\n    transferable.push(track.data1.buffer);\n  }\n\n  if (track.data2) {\n    transferable.push(track.data2.buffer);\n  }\n}\n\nfunction handleFlushResult(self, results, chunkMeta) {\n  var parsed = results.reduce(function (parsed, result) {\n    return emitTransmuxComplete(self, result) || parsed;\n  }, false);\n\n  if (!parsed) {\n    // Emit at least one \"transmuxComplete\" message even if media is not found to update stream-controller state to PARSING\n    self.postMessage({\n      event: 'transmuxComplete',\n      data: results[0]\n    });\n  }\n\n  self.postMessage({\n    event: 'flush',\n    data: chunkMeta\n  });\n}\n\nfunction isEmptyResult(remuxResult) {\n  return !remuxResult.audio && !remuxResult.video && !remuxResult.text && !remuxResult.id3 && !remuxResult.initSegment;\n}\n\n/***/ }),\n\n/***/ \"./src/demux/transmuxer.ts\":\n/*!*********************************!*\\\n  !*** ./src/demux/transmuxer.ts ***!\n  \\*********************************/\n/*! exports provided: default, isPromise, TransmuxConfig, TransmuxState */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_589354__) {\n\n\"use strict\";\n__nested_webpack_require_589354__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_589354__.d(__webpack_exports__, \"default\", function() { return Transmuxer; });\n/* harmony export (binding) */ __nested_webpack_require_589354__.d(__webpack_exports__, \"isPromise\", function() { return isPromise; });\n/* harmony export (binding) */ __nested_webpack_require_589354__.d(__webpack_exports__, \"TransmuxConfig\", function() { return TransmuxConfig; });\n/* harmony export (binding) */ __nested_webpack_require_589354__.d(__webpack_exports__, \"TransmuxState\", function() { return TransmuxState; });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_589354__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_589354__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _crypt_decrypter__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_589354__(/*! ../crypt/decrypter */ \"./src/crypt/decrypter.ts\");\n/* harmony import */ var _demux_aacdemuxer__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_589354__(/*! ../demux/aacdemuxer */ \"./src/demux/aacdemuxer.ts\");\n/* harmony import */ var _demux_mp4demuxer__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_589354__(/*! ../demux/mp4demuxer */ \"./src/demux/mp4demuxer.ts\");\n/* harmony import */ var _demux_tsdemuxer__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_589354__(/*! ../demux/tsdemuxer */ \"./src/demux/tsdemuxer.ts\");\n/* harmony import */ var _demux_mp3demuxer__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_589354__(/*! ../demux/mp3demuxer */ \"./src/demux/mp3demuxer.ts\");\n/* harmony import */ var _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_589354__(/*! ../remux/mp4-remuxer */ \"./src/remux/mp4-remuxer.ts\");\n/* harmony import */ var _remux_passthrough_remuxer__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_589354__(/*! ../remux/passthrough-remuxer */ \"./src/remux/passthrough-remuxer.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_589354__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n\n\n\n\n\n\n\n\n\n\nvar now; // performance.now() not available on WebWorker, at least on Safari Desktop\n\ntry {\n  now = self.performance.now.bind(self.performance);\n} catch (err) {\n  _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].debug('Unable to use Performance API on this environment');\n  now = self.Date.now;\n}\n\nvar muxConfig = [{\n  demux: _demux_tsdemuxer__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n  remux: _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n}, {\n  demux: _demux_mp4demuxer__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n  remux: _remux_passthrough_remuxer__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n}, {\n  demux: _demux_aacdemuxer__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n  remux: _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n}, {\n  demux: _demux_mp3demuxer__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n  remux: _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n}];\n\nvar Transmuxer = /*#__PURE__*/function () {\n  function Transmuxer(observer, typeSupported, config, vendor, id) {\n    this.observer = void 0;\n    this.typeSupported = void 0;\n    this.config = void 0;\n    this.vendor = void 0;\n    this.id = void 0;\n    this.demuxer = void 0;\n    this.remuxer = void 0;\n    this.decrypter = void 0;\n    this.probe = void 0;\n    this.decryptionPromise = null;\n    this.transmuxConfig = void 0;\n    this.currentTransmuxState = void 0;\n    this.observer = observer;\n    this.typeSupported = typeSupported;\n    this.config = config;\n    this.vendor = vendor;\n    this.id = id;\n  }\n\n  var _proto = Transmuxer.prototype;\n\n  _proto.configure = function configure(transmuxConfig) {\n    this.transmuxConfig = transmuxConfig;\n\n    if (this.decrypter) {\n      this.decrypter.reset();\n    }\n  };\n\n  _proto.push = function push(data, decryptdata, chunkMeta, state) {\n    var _this = this;\n\n    var stats = chunkMeta.transmuxing;\n    stats.executeStart = now();\n    var uintData = new Uint8Array(data);\n    var config = this.config,\n        currentTransmuxState = this.currentTransmuxState,\n        transmuxConfig = this.transmuxConfig;\n\n    if (state) {\n      this.currentTransmuxState = state;\n    }\n\n    var _ref = state || currentTransmuxState,\n        contiguous = _ref.contiguous,\n        discontinuity = _ref.discontinuity,\n        trackSwitch = _ref.trackSwitch,\n        accurateTimeOffset = _ref.accurateTimeOffset,\n        timeOffset = _ref.timeOffset,\n        initSegmentChange = _ref.initSegmentChange;\n\n    var audioCodec = transmuxConfig.audioCodec,\n        videoCodec = transmuxConfig.videoCodec,\n        defaultInitPts = transmuxConfig.defaultInitPts,\n        duration = transmuxConfig.duration,\n        initSegmentData = transmuxConfig.initSegmentData; // Reset muxers before probing to ensure that their state is clean, even if flushing occurs before a successful probe\n\n    if (discontinuity || trackSwitch || initSegmentChange) {\n      this.resetInitSegment(initSegmentData, audioCodec, videoCodec, duration);\n    }\n\n    if (discontinuity || initSegmentChange) {\n      this.resetInitialTimestamp(defaultInitPts);\n    }\n\n    if (!contiguous) {\n      this.resetContiguity();\n    }\n\n    var keyData = getEncryptionType(uintData, decryptdata);\n\n    if (keyData && keyData.method === 'AES-128') {\n      var decrypter = this.getDecrypter(); // Software decryption is synchronous; webCrypto is not\n\n      if (config.enableSoftwareAES) {\n        // Software decryption is progressive. Progressive decryption may not return a result on each call. Any cached\n        // data is handled in the flush() call\n        var decryptedData = decrypter.softwareDecrypt(uintData, keyData.key.buffer, keyData.iv.buffer);\n\n        if (!decryptedData) {\n          stats.executeEnd = now();\n          return emptyResult(chunkMeta);\n        }\n\n        uintData = new Uint8Array(decryptedData);\n      } else {\n        this.decryptionPromise = decrypter.webCryptoDecrypt(uintData, keyData.key.buffer, keyData.iv.buffer).then(function (decryptedData) {\n          // Calling push here is important; if flush() is called while this is still resolving, this ensures that\n          // the decrypted data has been transmuxed\n          var result = _this.push(decryptedData, null, chunkMeta);\n\n          _this.decryptionPromise = null;\n          return result;\n        });\n        return this.decryptionPromise;\n      }\n    }\n\n    if (this.needsProbing(uintData, discontinuity, trackSwitch)) {\n      this.configureTransmuxer(uintData, transmuxConfig);\n    }\n\n    var result = this.transmux(uintData, keyData, timeOffset, accurateTimeOffset, chunkMeta);\n    var currentState = this.currentTransmuxState;\n    currentState.contiguous = true;\n    currentState.discontinuity = false;\n    currentState.trackSwitch = false;\n    stats.executeEnd = now();\n    return result;\n  } // Due to data caching, flush calls can produce more than one TransmuxerResult (hence the Array type)\n  ;\n\n  _proto.flush = function flush(chunkMeta) {\n    var _this2 = this;\n\n    var stats = chunkMeta.transmuxing;\n    stats.executeStart = now();\n    var decrypter = this.decrypter,\n        currentTransmuxState = this.currentTransmuxState,\n        decryptionPromise = this.decryptionPromise;\n\n    if (decryptionPromise) {\n      // Upon resolution, the decryption promise calls push() and returns its TransmuxerResult up the stack. Therefore\n      // only flushing is required for async decryption\n      return decryptionPromise.then(function () {\n        return _this2.flush(chunkMeta);\n      });\n    }\n\n    var transmuxResults = [];\n    var timeOffset = currentTransmuxState.timeOffset;\n\n    if (decrypter) {\n      // The decrypter may have data cached, which needs to be demuxed. In this case we'll have two TransmuxResults\n      // This happens in the case that we receive only 1 push call for a segment (either for non-progressive downloads,\n      // or for progressive downloads with small segments)\n      var decryptedData = decrypter.flush();\n\n      if (decryptedData) {\n        // Push always returns a TransmuxerResult if decryptdata is null\n        transmuxResults.push(this.push(decryptedData, null, chunkMeta));\n      }\n    }\n\n    var demuxer = this.demuxer,\n        remuxer = this.remuxer;\n\n    if (!demuxer || !remuxer) {\n      // If probing failed, then Hls.js has been given content its not able to handle\n      this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, _events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].MEDIA_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].FRAG_PARSING_ERROR,\n        fatal: true,\n        reason: 'no demux matching with content found'\n      });\n      stats.executeEnd = now();\n      return [emptyResult(chunkMeta)];\n    }\n\n    var demuxResultOrPromise = demuxer.flush(timeOffset);\n\n    if (isPromise(demuxResultOrPromise)) {\n      // Decrypt final SAMPLE-AES samples\n      return demuxResultOrPromise.then(function (demuxResult) {\n        _this2.flushRemux(transmuxResults, demuxResult, chunkMeta);\n\n        return transmuxResults;\n      });\n    }\n\n    this.flushRemux(transmuxResults, demuxResultOrPromise, chunkMeta);\n    return transmuxResults;\n  };\n\n  _proto.flushRemux = function flushRemux(transmuxResults, demuxResult, chunkMeta) {\n    var audioTrack = demuxResult.audioTrack,\n        videoTrack = demuxResult.videoTrack,\n        id3Track = demuxResult.id3Track,\n        textTrack = demuxResult.textTrack;\n    var _this$currentTransmux = this.currentTransmuxState,\n        accurateTimeOffset = _this$currentTransmux.accurateTimeOffset,\n        timeOffset = _this$currentTransmux.timeOffset;\n    _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log(\"[transmuxer.ts]: Flushed fragment \" + chunkMeta.sn + (chunkMeta.part > -1 ? ' p: ' + chunkMeta.part : '') + \" of level \" + chunkMeta.level);\n    var remuxResult = this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, true, this.id);\n    transmuxResults.push({\n      remuxResult: remuxResult,\n      chunkMeta: chunkMeta\n    });\n    chunkMeta.transmuxing.executeEnd = now();\n  };\n\n  _proto.resetInitialTimestamp = function resetInitialTimestamp(defaultInitPts) {\n    var demuxer = this.demuxer,\n        remuxer = this.remuxer;\n\n    if (!demuxer || !remuxer) {\n      return;\n    }\n\n    demuxer.resetTimeStamp(defaultInitPts);\n    remuxer.resetTimeStamp(defaultInitPts);\n  };\n\n  _proto.resetContiguity = function resetContiguity() {\n    var demuxer = this.demuxer,\n        remuxer = this.remuxer;\n\n    if (!demuxer || !remuxer) {\n      return;\n    }\n\n    demuxer.resetContiguity();\n    remuxer.resetNextTimestamp();\n  };\n\n  _proto.resetInitSegment = function resetInitSegment(initSegmentData, audioCodec, videoCodec, trackDuration) {\n    var demuxer = this.demuxer,\n        remuxer = this.remuxer;\n\n    if (!demuxer || !remuxer) {\n      return;\n    }\n\n    demuxer.resetInitSegment(initSegmentData, audioCodec, videoCodec, trackDuration);\n    remuxer.resetInitSegment(initSegmentData, audioCodec, videoCodec);\n  };\n\n  _proto.destroy = function destroy() {\n    if (this.demuxer) {\n      this.demuxer.destroy();\n      this.demuxer = undefined;\n    }\n\n    if (this.remuxer) {\n      this.remuxer.destroy();\n      this.remuxer = undefined;\n    }\n  };\n\n  _proto.transmux = function transmux(data, keyData, timeOffset, accurateTimeOffset, chunkMeta) {\n    var result;\n\n    if (keyData && keyData.method === 'SAMPLE-AES') {\n      result = this.transmuxSampleAes(data, keyData, timeOffset, accurateTimeOffset, chunkMeta);\n    } else {\n      result = this.transmuxUnencrypted(data, timeOffset, accurateTimeOffset, chunkMeta);\n    }\n\n    return result;\n  };\n\n  _proto.transmuxUnencrypted = function transmuxUnencrypted(data, timeOffset, accurateTimeOffset, chunkMeta) {\n    var _demux = this.demuxer.demux(data, timeOffset, false, !this.config.progressive),\n        audioTrack = _demux.audioTrack,\n        videoTrack = _demux.videoTrack,\n        id3Track = _demux.id3Track,\n        textTrack = _demux.textTrack;\n\n    var remuxResult = this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, false, this.id);\n    return {\n      remuxResult: remuxResult,\n      chunkMeta: chunkMeta\n    };\n  };\n\n  _proto.transmuxSampleAes = function transmuxSampleAes(data, decryptData, timeOffset, accurateTimeOffset, chunkMeta) {\n    var _this3 = this;\n\n    return this.demuxer.demuxSampleAes(data, decryptData, timeOffset).then(function (demuxResult) {\n      var remuxResult = _this3.remuxer.remux(demuxResult.audioTrack, demuxResult.videoTrack, demuxResult.id3Track, demuxResult.textTrack, timeOffset, accurateTimeOffset, false, _this3.id);\n\n      return {\n        remuxResult: remuxResult,\n        chunkMeta: chunkMeta\n      };\n    });\n  };\n\n  _proto.configureTransmuxer = function configureTransmuxer(data, transmuxConfig) {\n    var config = this.config,\n        observer = this.observer,\n        typeSupported = this.typeSupported,\n        vendor = this.vendor;\n    var audioCodec = transmuxConfig.audioCodec,\n        defaultInitPts = transmuxConfig.defaultInitPts,\n        duration = transmuxConfig.duration,\n        initSegmentData = transmuxConfig.initSegmentData,\n        videoCodec = transmuxConfig.videoCodec; // probe for content type\n\n    var mux;\n\n    for (var i = 0, len = muxConfig.length; i < len; i++) {\n      if (muxConfig[i].demux.probe(data)) {\n        mux = muxConfig[i];\n        break;\n      }\n    }\n\n    if (!mux) {\n      // If probing previous configs fail, use mp4 passthrough\n      _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].warn('Failed to find demuxer by probing frag, treating as mp4 passthrough');\n      mux = {\n        demux: _demux_mp4demuxer__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n        remux: _remux_passthrough_remuxer__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n      };\n    } // so let's check that current remuxer and demuxer are still valid\n\n\n    var demuxer = this.demuxer;\n    var remuxer = this.remuxer;\n    var Remuxer = mux.remux;\n    var Demuxer = mux.demux;\n\n    if (!remuxer || !(remuxer instanceof Remuxer)) {\n      this.remuxer = new Remuxer(observer, config, typeSupported, vendor);\n    }\n\n    if (!demuxer || !(demuxer instanceof Demuxer)) {\n      this.demuxer = new Demuxer(observer, config, typeSupported);\n      this.probe = Demuxer.probe;\n    } // Ensure that muxers are always initialized with an initSegment\n\n\n    this.resetInitSegment(initSegmentData, audioCodec, videoCodec, duration);\n    this.resetInitialTimestamp(defaultInitPts);\n  };\n\n  _proto.needsProbing = function needsProbing(data, discontinuity, trackSwitch) {\n    // in case of continuity change, or track switch\n    // we might switch from content type (AAC container to TS container, or TS to fmp4 for example)\n    return !this.demuxer || !this.remuxer || discontinuity || trackSwitch;\n  };\n\n  _proto.getDecrypter = function getDecrypter() {\n    var decrypter = this.decrypter;\n\n    if (!decrypter) {\n      decrypter = this.decrypter = new _crypt_decrypter__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.observer, this.config);\n    }\n\n    return decrypter;\n  };\n\n  return Transmuxer;\n}();\n\n\n\nfunction getEncryptionType(data, decryptData) {\n  var encryptionType = null;\n\n  if (data.byteLength > 0 && decryptData != null && decryptData.key != null && decryptData.iv !== null && decryptData.method != null) {\n    encryptionType = decryptData;\n  }\n\n  return encryptionType;\n}\n\nvar emptyResult = function emptyResult(chunkMeta) {\n  return {\n    remuxResult: {},\n    chunkMeta: chunkMeta\n  };\n};\n\nfunction isPromise(p) {\n  return 'then' in p && p.then instanceof Function;\n}\nvar TransmuxConfig = function TransmuxConfig(audioCodec, videoCodec, initSegmentData, duration, defaultInitPts) {\n  this.audioCodec = void 0;\n  this.videoCodec = void 0;\n  this.initSegmentData = void 0;\n  this.duration = void 0;\n  this.defaultInitPts = void 0;\n  this.audioCodec = audioCodec;\n  this.videoCodec = videoCodec;\n  this.initSegmentData = initSegmentData;\n  this.duration = duration;\n  this.defaultInitPts = defaultInitPts;\n};\nvar TransmuxState = function TransmuxState(discontinuity, contiguous, accurateTimeOffset, trackSwitch, timeOffset, initSegmentChange) {\n  this.discontinuity = void 0;\n  this.contiguous = void 0;\n  this.accurateTimeOffset = void 0;\n  this.trackSwitch = void 0;\n  this.timeOffset = void 0;\n  this.initSegmentChange = void 0;\n  this.discontinuity = discontinuity;\n  this.contiguous = contiguous;\n  this.accurateTimeOffset = accurateTimeOffset;\n  this.trackSwitch = trackSwitch;\n  this.timeOffset = timeOffset;\n  this.initSegmentChange = initSegmentChange;\n};\n\n/***/ }),\n\n/***/ \"./src/demux/tsdemuxer.ts\":\n/*!********************************!*\\\n  !*** ./src/demux/tsdemuxer.ts ***!\n  \\********************************/\n/*! exports provided: discardEPB, default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_606299__) {\n\n\"use strict\";\n__nested_webpack_require_606299__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_606299__.d(__webpack_exports__, \"discardEPB\", function() { return discardEPB; });\n/* harmony import */ var _adts__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_606299__(/*! ./adts */ \"./src/demux/adts.ts\");\n/* harmony import */ var _mpegaudio__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_606299__(/*! ./mpegaudio */ \"./src/demux/mpegaudio.ts\");\n/* harmony import */ var _exp_golomb__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_606299__(/*! ./exp-golomb */ \"./src/demux/exp-golomb.ts\");\n/* harmony import */ var _sample_aes__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_606299__(/*! ./sample-aes */ \"./src/demux/sample-aes.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_606299__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_606299__(/*! ../utils/mp4-tools */ \"./src/utils/mp4-tools.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_606299__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_606299__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _types_demuxer__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_606299__(/*! ../types/demuxer */ \"./src/types/demuxer.ts\");\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/**\n * highly optimized TS demuxer:\n * parse PAT, PMT\n * extract PES packet from audio and video PIDs\n * extract AVC/H264 NAL units and AAC/ADTS samples from PES packet\n * trigger the remuxer upon parsing completion\n * it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.\n * it also controls the remuxing process :\n * upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.\n */\n\n\n\n\n\n\n\n\n\n\nvar TSDemuxer = /*#__PURE__*/function () {\n  function TSDemuxer(observer, config, typeSupported) {\n    this.observer = void 0;\n    this.config = void 0;\n    this.typeSupported = void 0;\n    this.sampleAes = null;\n    this.pmtParsed = false;\n    this.audioCodec = void 0;\n    this.videoCodec = void 0;\n    this._duration = 0;\n    this._pmtId = -1;\n    this._avcTrack = void 0;\n    this._audioTrack = void 0;\n    this._id3Track = void 0;\n    this._txtTrack = void 0;\n    this.aacOverFlow = null;\n    this.avcSample = null;\n    this.remainderData = null;\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n  }\n\n  TSDemuxer.probe = function probe(data) {\n    // a TS init segment should contain at least 2 TS packets: PAT and PMT, each starting with 0x47\n    return data[0] === 0x47 && data[188] === 0x47;\n  }\n  /**\n   * Creates a track model internal to demuxer used to drive remuxing input\n   *\n   * @param type 'audio' | 'video' | 'id3' | 'text'\n   * @param duration\n   * @return TSDemuxer's internal track model\n   */\n  ;\n\n  TSDemuxer.createTrack = function createTrack(type, duration) {\n    return {\n      container: type === 'video' || type === 'audio' ? 'video/mp2t' : undefined,\n      type: type,\n      id: _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_5__[\"RemuxerTrackIdConfig\"][type],\n      pid: -1,\n      inputTimeScale: 90000,\n      sequenceNumber: 0,\n      samples: [],\n      dropped: 0,\n      duration: type === 'audio' ? duration : undefined\n    };\n  }\n  /**\n   * Initializes a new init segment on the demuxer/remuxer interface. Needed for discontinuities/track-switches (or at stream start)\n   * Resets all internal track instances of the demuxer.\n   */\n  ;\n\n  var _proto = TSDemuxer.prototype;\n\n  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration) {\n    this.pmtParsed = false;\n    this._pmtId = -1;\n    this._avcTrack = TSDemuxer.createTrack('video');\n    this._audioTrack = TSDemuxer.createTrack('audio', trackDuration);\n    this._id3Track = TSDemuxer.createTrack('id3');\n    this._txtTrack = TSDemuxer.createTrack('text');\n    this._audioTrack.segmentCodec = 'aac'; // flush any partial content\n\n    this.aacOverFlow = null;\n    this.avcSample = null;\n    this.remainderData = null;\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this._duration = trackDuration;\n  };\n\n  _proto.resetTimeStamp = function resetTimeStamp() {};\n\n  _proto.resetContiguity = function resetContiguity() {\n    var _audioTrack = this._audioTrack,\n        _avcTrack = this._avcTrack,\n        _id3Track = this._id3Track;\n\n    if (_audioTrack) {\n      _audioTrack.pesData = null;\n    }\n\n    if (_avcTrack) {\n      _avcTrack.pesData = null;\n    }\n\n    if (_id3Track) {\n      _id3Track.pesData = null;\n    }\n\n    this.aacOverFlow = null;\n  };\n\n  _proto.demux = function demux(data, timeOffset, isSampleAes, flush) {\n    if (isSampleAes === void 0) {\n      isSampleAes = false;\n    }\n\n    if (flush === void 0) {\n      flush = false;\n    }\n\n    if (!isSampleAes) {\n      this.sampleAes = null;\n    }\n\n    var pes;\n    var videoTrack = this._avcTrack;\n    var audioTrack = this._audioTrack;\n    var id3Track = this._id3Track;\n    var textTrack = this._txtTrack;\n    var avcId = videoTrack.pid;\n    var avcData = videoTrack.pesData;\n    var audioId = audioTrack.pid;\n    var id3Id = id3Track.pid;\n    var audioData = audioTrack.pesData;\n    var id3Data = id3Track.pesData;\n    var unknownPID = null;\n    var pmtParsed = this.pmtParsed;\n    var pmtId = this._pmtId;\n    var len = data.length;\n\n    if (this.remainderData) {\n      data = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_5__[\"appendUint8Array\"])(this.remainderData, data);\n      len = data.length;\n      this.remainderData = null;\n    }\n\n    if (len < 188 && !flush) {\n      this.remainderData = data;\n      return {\n        audioTrack: audioTrack,\n        videoTrack: videoTrack,\n        id3Track: id3Track,\n        textTrack: textTrack\n      };\n    }\n\n    len -= len % 188;\n\n    if (len < data.byteLength && !flush) {\n      this.remainderData = new Uint8Array(data.buffer, len, data.buffer.byteLength - len);\n    } // loop through TS packets\n\n\n    var tsPacketErrors = 0;\n\n    for (var start = 0; start < len; start += 188) {\n      if (data[start] === 0x47) {\n        var stt = !!(data[start + 1] & 0x40); // pid is a 13-bit field starting at the last bit of TS[1]\n\n        var pid = ((data[start + 1] & 0x1f) << 8) + data[start + 2];\n        var atf = (data[start + 3] & 0x30) >> 4; // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.\n\n        var offset = void 0;\n\n        if (atf > 1) {\n          offset = start + 5 + data[start + 4]; // continue if there is only adaptation field\n\n          if (offset === start + 188) {\n            continue;\n          }\n        } else {\n          offset = start + 4;\n        }\n\n        switch (pid) {\n          case avcId:\n            if (stt) {\n              if (avcData && (pes = parsePES(avcData))) {\n                this.parseAVCPES(videoTrack, textTrack, pes, false);\n              }\n\n              avcData = {\n                data: [],\n                size: 0\n              };\n            }\n\n            if (avcData) {\n              avcData.data.push(data.subarray(offset, start + 188));\n              avcData.size += start + 188 - offset;\n            }\n\n            break;\n\n          case audioId:\n            if (stt) {\n              if (audioData && (pes = parsePES(audioData))) {\n                switch (audioTrack.segmentCodec) {\n                  case 'aac':\n                    this.parseAACPES(audioTrack, pes);\n                    break;\n\n                  case 'mp3':\n                    this.parseMPEGPES(audioTrack, pes);\n                    break;\n                }\n              }\n\n              audioData = {\n                data: [],\n                size: 0\n              };\n            }\n\n            if (audioData) {\n              audioData.data.push(data.subarray(offset, start + 188));\n              audioData.size += start + 188 - offset;\n            }\n\n            break;\n\n          case id3Id:\n            if (stt) {\n              if (id3Data && (pes = parsePES(id3Data))) {\n                this.parseID3PES(id3Track, pes);\n              }\n\n              id3Data = {\n                data: [],\n                size: 0\n              };\n            }\n\n            if (id3Data) {\n              id3Data.data.push(data.subarray(offset, start + 188));\n              id3Data.size += start + 188 - offset;\n            }\n\n            break;\n\n          case 0:\n            if (stt) {\n              offset += data[offset] + 1;\n            }\n\n            pmtId = this._pmtId = parsePAT(data, offset);\n            break;\n\n          case pmtId:\n            {\n              if (stt) {\n                offset += data[offset] + 1;\n              }\n\n              var parsedPIDs = parsePMT(data, offset, this.typeSupported, isSampleAes); // only update track id if track PID found while parsing PMT\n              // this is to avoid resetting the PID to -1 in case\n              // track PID transiently disappears from the stream\n              // this could happen in case of transient missing audio samples for example\n              // NOTE this is only the PID of the track as found in TS,\n              // but we are not using this for MP4 track IDs.\n\n              avcId = parsedPIDs.avc;\n\n              if (avcId > 0) {\n                videoTrack.pid = avcId;\n              }\n\n              audioId = parsedPIDs.audio;\n\n              if (audioId > 0) {\n                audioTrack.pid = audioId;\n                audioTrack.segmentCodec = parsedPIDs.segmentCodec;\n              }\n\n              id3Id = parsedPIDs.id3;\n\n              if (id3Id > 0) {\n                id3Track.pid = id3Id;\n              }\n\n              if (unknownPID !== null && !pmtParsed) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].log(\"unknown PID '\" + unknownPID + \"' in TS found\");\n                unknownPID = null;\n              }\n\n              pmtParsed = this.pmtParsed = true;\n              break;\n            }\n\n          case 17:\n          case 0x1fff:\n            break;\n\n          default:\n            unknownPID = pid;\n            break;\n        }\n      } else {\n        tsPacketErrors++;\n      }\n    }\n\n    if (tsPacketErrors > 0) {\n      this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_4__[\"Events\"].ERROR, _events__WEBPACK_IMPORTED_MODULE_4__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_7__[\"ErrorTypes\"].MEDIA_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_7__[\"ErrorDetails\"].FRAG_PARSING_ERROR,\n        fatal: false,\n        reason: \"Found \" + tsPacketErrors + \" TS packet/s that do not start with 0x47\"\n      });\n    }\n\n    videoTrack.pesData = avcData;\n    audioTrack.pesData = audioData;\n    id3Track.pesData = id3Data;\n    var demuxResult = {\n      audioTrack: audioTrack,\n      videoTrack: videoTrack,\n      id3Track: id3Track,\n      textTrack: textTrack\n    };\n\n    if (flush) {\n      this.extractRemainingSamples(demuxResult);\n    }\n\n    return demuxResult;\n  };\n\n  _proto.flush = function flush() {\n    var remainderData = this.remainderData;\n    this.remainderData = null;\n    var result;\n\n    if (remainderData) {\n      result = this.demux(remainderData, -1, false, true);\n    } else {\n      result = {\n        videoTrack: this._avcTrack,\n        audioTrack: this._audioTrack,\n        id3Track: this._id3Track,\n        textTrack: this._txtTrack\n      };\n    }\n\n    this.extractRemainingSamples(result);\n\n    if (this.sampleAes) {\n      return this.decrypt(result, this.sampleAes);\n    }\n\n    return result;\n  };\n\n  _proto.extractRemainingSamples = function extractRemainingSamples(demuxResult) {\n    var audioTrack = demuxResult.audioTrack,\n        videoTrack = demuxResult.videoTrack,\n        id3Track = demuxResult.id3Track,\n        textTrack = demuxResult.textTrack;\n    var avcData = videoTrack.pesData;\n    var audioData = audioTrack.pesData;\n    var id3Data = id3Track.pesData; // try to parse last PES packets\n\n    var pes;\n\n    if (avcData && (pes = parsePES(avcData))) {\n      this.parseAVCPES(videoTrack, textTrack, pes, true);\n      videoTrack.pesData = null;\n    } else {\n      // either avcData null or PES truncated, keep it for next frag parsing\n      videoTrack.pesData = avcData;\n    }\n\n    if (audioData && (pes = parsePES(audioData))) {\n      switch (audioTrack.segmentCodec) {\n        case 'aac':\n          this.parseAACPES(audioTrack, pes);\n          break;\n\n        case 'mp3':\n          this.parseMPEGPES(audioTrack, pes);\n          break;\n      }\n\n      audioTrack.pesData = null;\n    } else {\n      if (audioData !== null && audioData !== void 0 && audioData.size) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].log('last AAC PES packet truncated,might overlap between fragments');\n      } // either audioData null or PES truncated, keep it for next frag parsing\n\n\n      audioTrack.pesData = audioData;\n    }\n\n    if (id3Data && (pes = parsePES(id3Data))) {\n      this.parseID3PES(id3Track, pes);\n      id3Track.pesData = null;\n    } else {\n      // either id3Data null or PES truncated, keep it for next frag parsing\n      id3Track.pesData = id3Data;\n    }\n  };\n\n  _proto.demuxSampleAes = function demuxSampleAes(data, keyData, timeOffset) {\n    var demuxResult = this.demux(data, timeOffset, true, !this.config.progressive);\n    var sampleAes = this.sampleAes = new _sample_aes__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.observer, this.config, keyData);\n    return this.decrypt(demuxResult, sampleAes);\n  };\n\n  _proto.decrypt = function decrypt(demuxResult, sampleAes) {\n    return new Promise(function (resolve) {\n      var audioTrack = demuxResult.audioTrack,\n          videoTrack = demuxResult.videoTrack;\n\n      if (audioTrack.samples && audioTrack.segmentCodec === 'aac') {\n        sampleAes.decryptAacSamples(audioTrack.samples, 0, function () {\n          if (videoTrack.samples) {\n            sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, function () {\n              resolve(demuxResult);\n            });\n          } else {\n            resolve(demuxResult);\n          }\n        });\n      } else if (videoTrack.samples) {\n        sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, function () {\n          resolve(demuxResult);\n        });\n      }\n    });\n  };\n\n  _proto.destroy = function destroy() {\n    this._duration = 0;\n  };\n\n  _proto.parseAVCPES = function parseAVCPES(track, textTrack, pes, last) {\n    var _this = this;\n\n    var units = this.parseAVCNALu(track, pes.data);\n    var debug = false;\n    var avcSample = this.avcSample;\n    var push;\n    var spsfound = false; // free pes.data to save up some memory\n\n    pes.data = null; // if new NAL units found and last sample still there, let's push ...\n    // this helps parsing streams with missing AUD (only do this if AUD never found)\n\n    if (avcSample && units.length && !track.audFound) {\n      pushAccessUnit(avcSample, track);\n      avcSample = this.avcSample = createAVCSample(false, pes.pts, pes.dts, '');\n    }\n\n    units.forEach(function (unit) {\n      switch (unit.type) {\n        // NDR\n        case 1:\n          {\n            push = true;\n\n            if (!avcSample) {\n              avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');\n            }\n\n            if (debug) {\n              avcSample.debug += 'NDR ';\n            }\n\n            avcSample.frame = true;\n            var data = unit.data; // only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)\n\n            if (spsfound && data.length > 4) {\n              // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR\n              var sliceType = new _exp_golomb__WEBPACK_IMPORTED_MODULE_2__[\"default\"](data).readSliceType(); // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice\n              // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.\n              // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.\n              // I slice: A slice that is not an SI slice that is decoded using intra prediction only.\n              // if (sliceType === 2 || sliceType === 7) {\n\n              if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) {\n                avcSample.key = true;\n              }\n            }\n\n            break; // IDR\n          }\n\n        case 5:\n          push = true; // handle PES not starting with AUD\n\n          if (!avcSample) {\n            avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');\n          }\n\n          if (debug) {\n            avcSample.debug += 'IDR ';\n          }\n\n          avcSample.key = true;\n          avcSample.frame = true;\n          break;\n        // SEI\n\n        case 6:\n          {\n            push = true;\n\n            if (debug && avcSample) {\n              avcSample.debug += 'SEI ';\n            }\n\n            Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_5__[\"parseSEIMessageFromNALu\"])(discardEPB(unit.data), pes.pts, textTrack.samples);\n            break; // SPS\n          }\n\n        case 7:\n          push = true;\n          spsfound = true;\n\n          if (debug && avcSample) {\n            avcSample.debug += 'SPS ';\n          }\n\n          if (!track.sps) {\n            var expGolombDecoder = new _exp_golomb__WEBPACK_IMPORTED_MODULE_2__[\"default\"](unit.data);\n            var config = expGolombDecoder.readSPS();\n            track.width = config.width;\n            track.height = config.height;\n            track.pixelRatio = config.pixelRatio; // TODO: `track.sps` is defined as a `number[]`, but we're setting it to a `Uint8Array[]`.\n\n            track.sps = [unit.data];\n            track.duration = _this._duration;\n            var codecarray = unit.data.subarray(1, 4);\n            var codecstring = 'avc1.';\n\n            for (var i = 0; i < 3; i++) {\n              var h = codecarray[i].toString(16);\n\n              if (h.length < 2) {\n                h = '0' + h;\n              }\n\n              codecstring += h;\n            }\n\n            track.codec = codecstring;\n          }\n\n          break;\n        // PPS\n\n        case 8:\n          push = true;\n\n          if (debug && avcSample) {\n            avcSample.debug += 'PPS ';\n          }\n\n          if (!track.pps) {\n            // TODO: `track.pss` is defined as a `number[]`, but we're setting it to a `Uint8Array[]`.\n            track.pps = [unit.data];\n          }\n\n          break;\n        // AUD\n\n        case 9:\n          push = false;\n          track.audFound = true;\n\n          if (avcSample) {\n            pushAccessUnit(avcSample, track);\n          }\n\n          avcSample = _this.avcSample = createAVCSample(false, pes.pts, pes.dts, debug ? 'AUD ' : '');\n          break;\n        // Filler Data\n\n        case 12:\n          push = true;\n          break;\n\n        default:\n          push = false;\n\n          if (avcSample) {\n            avcSample.debug += 'unknown NAL ' + unit.type + ' ';\n          }\n\n          break;\n      }\n\n      if (avcSample && push) {\n        var _units = avcSample.units;\n\n        _units.push(unit);\n      }\n    }); // if last PES packet, push samples\n\n    if (last && avcSample) {\n      pushAccessUnit(avcSample, track);\n      this.avcSample = null;\n    }\n  };\n\n  _proto.getLastNalUnit = function getLastNalUnit(samples) {\n    var _avcSample;\n\n    var avcSample = this.avcSample;\n    var lastUnit; // try to fallback to previous sample if current one is empty\n\n    if (!avcSample || avcSample.units.length === 0) {\n      avcSample = samples[samples.length - 1];\n    }\n\n    if ((_avcSample = avcSample) !== null && _avcSample !== void 0 && _avcSample.units) {\n      var units = avcSample.units;\n      lastUnit = units[units.length - 1];\n    }\n\n    return lastUnit;\n  };\n\n  _proto.parseAVCNALu = function parseAVCNALu(track, array) {\n    var len = array.byteLength;\n    var state = track.naluState || 0;\n    var lastState = state;\n    var units = [];\n    var i = 0;\n    var value;\n    var overflow;\n    var unitType;\n    var lastUnitStart = -1;\n    var lastUnitType = 0; // logger.log('PES:' + Hex.hexDump(array));\n\n    if (state === -1) {\n      // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet\n      lastUnitStart = 0; // NALu type is value read from offset 0\n\n      lastUnitType = array[0] & 0x1f;\n      state = 0;\n      i = 1;\n    }\n\n    while (i < len) {\n      value = array[i++]; // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case\n\n      if (!state) {\n        state = value ? 0 : 1;\n        continue;\n      }\n\n      if (state === 1) {\n        state = value ? 0 : 2;\n        continue;\n      } // here we have state either equal to 2 or 3\n\n\n      if (!value) {\n        state = 3;\n      } else if (value === 1) {\n        if (lastUnitStart >= 0) {\n          var unit = {\n            data: array.subarray(lastUnitStart, i - state - 1),\n            type: lastUnitType\n          }; // logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);\n\n          units.push(unit);\n        } else {\n          // lastUnitStart is undefined => this is the first start code found in this PES packet\n          // first check if start code delimiter is overlapping between 2 PES packets,\n          // ie it started in last packet (lastState not zero)\n          // and ended at the beginning of this PES packet (i <= 4 - lastState)\n          var lastUnit = this.getLastNalUnit(track.samples);\n\n          if (lastUnit) {\n            if (lastState && i <= 4 - lastState) {\n              // start delimiter overlapping between PES packets\n              // strip start delimiter bytes from the end of last NAL unit\n              // check if lastUnit had a state different from zero\n              if (lastUnit.state) {\n                // strip last bytes\n                lastUnit.data = lastUnit.data.subarray(0, lastUnit.data.byteLength - lastState);\n              }\n            } // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.\n\n\n            overflow = i - state - 1;\n\n            if (overflow > 0) {\n              // logger.log('first NALU found with overflow:' + overflow);\n              var tmp = new Uint8Array(lastUnit.data.byteLength + overflow);\n              tmp.set(lastUnit.data, 0);\n              tmp.set(array.subarray(0, overflow), lastUnit.data.byteLength);\n              lastUnit.data = tmp;\n              lastUnit.state = 0;\n            }\n          }\n        } // check if we can read unit type\n\n\n        if (i < len) {\n          unitType = array[i] & 0x1f; // logger.log('find NALU @ offset:' + i + ',type:' + unitType);\n\n          lastUnitStart = i;\n          lastUnitType = unitType;\n          state = 0;\n        } else {\n          // not enough byte to read unit type. let's read it on next PES parsing\n          state = -1;\n        }\n      } else {\n        state = 0;\n      }\n    }\n\n    if (lastUnitStart >= 0 && state >= 0) {\n      var _unit = {\n        data: array.subarray(lastUnitStart, len),\n        type: lastUnitType,\n        state: state\n      };\n      units.push(_unit); // logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);\n    } // no NALu found\n\n\n    if (units.length === 0) {\n      // append pes.data to previous NAL unit\n      var _lastUnit = this.getLastNalUnit(track.samples);\n\n      if (_lastUnit) {\n        var _tmp = new Uint8Array(_lastUnit.data.byteLength + array.byteLength);\n\n        _tmp.set(_lastUnit.data, 0);\n\n        _tmp.set(array, _lastUnit.data.byteLength);\n\n        _lastUnit.data = _tmp;\n      }\n    }\n\n    track.naluState = state;\n    return units;\n  };\n\n  _proto.parseAACPES = function parseAACPES(track, pes) {\n    var startOffset = 0;\n    var aacOverFlow = this.aacOverFlow;\n    var data = pes.data;\n\n    if (aacOverFlow) {\n      this.aacOverFlow = null;\n      var frameMissingBytes = aacOverFlow.missing;\n      var sampleLength = aacOverFlow.sample.unit.byteLength; // logger.log(`AAC: append overflowing ${sampleLength} bytes to beginning of new PES`);\n\n      if (frameMissingBytes === -1) {\n        var tmp = new Uint8Array(sampleLength + data.byteLength);\n        tmp.set(aacOverFlow.sample.unit, 0);\n        tmp.set(data, sampleLength);\n        data = tmp;\n      } else {\n        var frameOverflowBytes = sampleLength - frameMissingBytes;\n        aacOverFlow.sample.unit.set(data.subarray(0, frameMissingBytes), frameOverflowBytes);\n        track.samples.push(aacOverFlow.sample);\n        startOffset = aacOverFlow.missing;\n      }\n    } // look for ADTS header (0xFFFx)\n\n\n    var offset;\n    var len;\n\n    for (offset = startOffset, len = data.length; offset < len - 1; offset++) {\n      if (_adts__WEBPACK_IMPORTED_MODULE_0__[\"isHeader\"](data, offset)) {\n        break;\n      }\n    } // if ADTS header does not start straight from the beginning of the PES payload, raise an error\n\n\n    if (offset !== startOffset) {\n      var reason;\n      var fatal;\n\n      if (offset < len - 1) {\n        reason = \"AAC PES did not start with ADTS header,offset:\" + offset;\n        fatal = false;\n      } else {\n        reason = 'no ADTS header found in AAC PES';\n        fatal = true;\n      }\n\n      _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].warn(\"parsing error:\" + reason);\n      this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_4__[\"Events\"].ERROR, _events__WEBPACK_IMPORTED_MODULE_4__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_7__[\"ErrorTypes\"].MEDIA_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_7__[\"ErrorDetails\"].FRAG_PARSING_ERROR,\n        fatal: fatal,\n        reason: reason\n      });\n\n      if (fatal) {\n        return;\n      }\n    }\n\n    _adts__WEBPACK_IMPORTED_MODULE_0__[\"initTrackConfig\"](track, this.observer, data, offset, this.audioCodec);\n    var pts;\n\n    if (pes.pts !== undefined) {\n      pts = pes.pts;\n    } else if (aacOverFlow) {\n      // if last AAC frame is overflowing, we should ensure timestamps are contiguous:\n      // first sample PTS should be equal to last sample PTS + frameDuration\n      var frameDuration = _adts__WEBPACK_IMPORTED_MODULE_0__[\"getFrameDuration\"](track.samplerate);\n      pts = aacOverFlow.sample.pts + frameDuration;\n    } else {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].warn('[tsdemuxer]: AAC PES unknown PTS');\n      return;\n    } // scan for aac samples\n\n\n    var frameIndex = 0;\n    var frame;\n\n    while (offset < len) {\n      frame = _adts__WEBPACK_IMPORTED_MODULE_0__[\"appendFrame\"](track, data, offset, pts, frameIndex);\n      offset += frame.length;\n\n      if (!frame.missing) {\n        frameIndex++;\n\n        for (; offset < len - 1; offset++) {\n          if (_adts__WEBPACK_IMPORTED_MODULE_0__[\"isHeader\"](data, offset)) {\n            break;\n          }\n        }\n      } else {\n        this.aacOverFlow = frame;\n        break;\n      }\n    }\n  };\n\n  _proto.parseMPEGPES = function parseMPEGPES(track, pes) {\n    var data = pes.data;\n    var length = data.length;\n    var frameIndex = 0;\n    var offset = 0;\n    var pts = pes.pts;\n\n    if (pts === undefined) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].warn('[tsdemuxer]: MPEG PES unknown PTS');\n      return;\n    }\n\n    while (offset < length) {\n      if (_mpegaudio__WEBPACK_IMPORTED_MODULE_1__[\"isHeader\"](data, offset)) {\n        var frame = _mpegaudio__WEBPACK_IMPORTED_MODULE_1__[\"appendFrame\"](track, data, offset, pts, frameIndex);\n\n        if (frame) {\n          offset += frame.length;\n          frameIndex++;\n        } else {\n          // logger.log('Unable to parse Mpeg audio frame');\n          break;\n        }\n      } else {\n        // nothing found, keep looking\n        offset++;\n      }\n    }\n  };\n\n  _proto.parseID3PES = function parseID3PES(id3Track, pes) {\n    if (pes.pts === undefined) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].warn('[tsdemuxer]: ID3 PES unknown PTS');\n      return;\n    }\n\n    var id3Sample = _extends({}, pes, {\n      type: this._avcTrack ? _types_demuxer__WEBPACK_IMPORTED_MODULE_8__[\"MetadataSchema\"].emsg : _types_demuxer__WEBPACK_IMPORTED_MODULE_8__[\"MetadataSchema\"].audioId3\n    });\n\n    id3Track.samples.push(id3Sample);\n  };\n\n  return TSDemuxer;\n}();\n\nfunction createAVCSample(key, pts, dts, debug) {\n  return {\n    key: key,\n    frame: false,\n    pts: pts,\n    dts: dts,\n    units: [],\n    debug: debug,\n    length: 0\n  };\n}\n\nfunction parsePAT(data, offset) {\n  // skip the PSI header and parse the first PMT entry\n  return (data[offset + 10] & 0x1f) << 8 | data[offset + 11]; // logger.log('PMT PID:'  + this._pmtId);\n}\n\nfunction parsePMT(data, offset, typeSupported, isSampleAes) {\n  var result = {\n    audio: -1,\n    avc: -1,\n    id3: -1,\n    segmentCodec: 'aac'\n  };\n  var sectionLength = (data[offset + 1] & 0x0f) << 8 | data[offset + 2];\n  var tableEnd = offset + 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n\n  var programInfoLength = (data[offset + 10] & 0x0f) << 8 | data[offset + 11]; // advance the offset to the first entry in the mapping table\n\n  offset += 12 + programInfoLength;\n\n  while (offset < tableEnd) {\n    var pid = (data[offset + 1] & 0x1f) << 8 | data[offset + 2];\n\n    switch (data[offset]) {\n      case 0xcf:\n        // SAMPLE-AES AAC\n        if (!isSampleAes) {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].log('ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream');\n          break;\n        }\n\n      /* falls through */\n\n      case 0x0f:\n        // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)\n        // logger.log('AAC PID:'  + pid);\n        if (result.audio === -1) {\n          result.audio = pid;\n        }\n\n        break;\n      // Packetized metadata (ID3)\n\n      case 0x15:\n        // logger.log('ID3 PID:'  + pid);\n        if (result.id3 === -1) {\n          result.id3 = pid;\n        }\n\n        break;\n\n      case 0xdb:\n        // SAMPLE-AES AVC\n        if (!isSampleAes) {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].log('H.264 with AES-128-CBC slice encryption found in unencrypted stream');\n          break;\n        }\n\n      /* falls through */\n\n      case 0x1b:\n        // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)\n        // logger.log('AVC PID:'  + pid);\n        if (result.avc === -1) {\n          result.avc = pid;\n        }\n\n        break;\n      // ISO/IEC 11172-3 (MPEG-1 audio)\n      // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)\n\n      case 0x03:\n      case 0x04:\n        // logger.log('MPEG PID:'  + pid);\n        if (typeSupported.mpeg !== true && typeSupported.mp3 !== true) {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].log('MPEG audio found, not supported in this browser');\n        } else if (result.audio === -1) {\n          result.audio = pid;\n          result.segmentCodec = 'mp3';\n        }\n\n        break;\n\n      case 0x24:\n        _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].warn('Unsupported HEVC stream type found');\n        break;\n\n      default:\n        // logger.log('unknown stream type:' + data[offset]);\n        break;\n    } // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n\n\n    offset += ((data[offset + 3] & 0x0f) << 8 | data[offset + 4]) + 5;\n  }\n\n  return result;\n}\n\nfunction parsePES(stream) {\n  var i = 0;\n  var frag;\n  var pesLen;\n  var pesHdrLen;\n  var pesPts;\n  var pesDts;\n  var data = stream.data; // safety check\n\n  if (!stream || stream.size === 0) {\n    return null;\n  } // we might need up to 19 bytes to read PES header\n  // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes\n  // usually only one merge is needed (and this is rare ...)\n\n\n  while (data[0].length < 19 && data.length > 1) {\n    var newData = new Uint8Array(data[0].length + data[1].length);\n    newData.set(data[0]);\n    newData.set(data[1], data[0].length);\n    data[0] = newData;\n    data.splice(1, 1);\n  } // retrieve PTS/DTS from first fragment\n\n\n  frag = data[0];\n  var pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];\n\n  if (pesPrefix === 1) {\n    pesLen = (frag[4] << 8) + frag[5]; // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated\n    // minus 6 : PES header size\n\n    if (pesLen && pesLen > stream.size - 6) {\n      return null;\n    }\n\n    var pesFlags = frag[7];\n\n    if (pesFlags & 0xc0) {\n      /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n          as PTS / DTS is 33 bit we cannot use bitwise operator in JS,\n          as Bitwise operators treat their operands as a sequence of 32 bits */\n      pesPts = (frag[9] & 0x0e) * 536870912 + // 1 << 29\n      (frag[10] & 0xff) * 4194304 + // 1 << 22\n      (frag[11] & 0xfe) * 16384 + // 1 << 14\n      (frag[12] & 0xff) * 128 + // 1 << 7\n      (frag[13] & 0xfe) / 2;\n\n      if (pesFlags & 0x40) {\n        pesDts = (frag[14] & 0x0e) * 536870912 + // 1 << 29\n        (frag[15] & 0xff) * 4194304 + // 1 << 22\n        (frag[16] & 0xfe) * 16384 + // 1 << 14\n        (frag[17] & 0xff) * 128 + // 1 << 7\n        (frag[18] & 0xfe) / 2;\n\n        if (pesPts - pesDts > 60 * 90000) {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].warn(Math.round((pesPts - pesDts) / 90000) + \"s delta between PTS and DTS, align them\");\n          pesPts = pesDts;\n        }\n      } else {\n        pesDts = pesPts;\n      }\n    }\n\n    pesHdrLen = frag[8]; // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension\n\n    var payloadStartOffset = pesHdrLen + 9;\n\n    if (stream.size <= payloadStartOffset) {\n      return null;\n    }\n\n    stream.size -= payloadStartOffset; // reassemble PES packet\n\n    var pesData = new Uint8Array(stream.size);\n\n    for (var j = 0, dataLen = data.length; j < dataLen; j++) {\n      frag = data[j];\n      var len = frag.byteLength;\n\n      if (payloadStartOffset) {\n        if (payloadStartOffset > len) {\n          // trim full frag if PES header bigger than frag\n          payloadStartOffset -= len;\n          continue;\n        } else {\n          // trim partial frag if PES header smaller than frag\n          frag = frag.subarray(payloadStartOffset);\n          len -= payloadStartOffset;\n          payloadStartOffset = 0;\n        }\n      }\n\n      pesData.set(frag, i);\n      i += len;\n    }\n\n    if (pesLen) {\n      // payload size : remove PES header + PES extension\n      pesLen -= pesHdrLen + 3;\n    }\n\n    return {\n      data: pesData,\n      pts: pesPts,\n      dts: pesDts,\n      len: pesLen\n    };\n  }\n\n  return null;\n}\n\nfunction pushAccessUnit(avcSample, avcTrack) {\n  if (avcSample.units.length && avcSample.frame) {\n    // if sample does not have PTS/DTS, patch with last sample PTS/DTS\n    if (avcSample.pts === undefined) {\n      var samples = avcTrack.samples;\n      var nbSamples = samples.length;\n\n      if (nbSamples) {\n        var lastSample = samples[nbSamples - 1];\n        avcSample.pts = lastSample.pts;\n        avcSample.dts = lastSample.dts;\n      } else {\n        // dropping samples, no timestamp found\n        avcTrack.dropped++;\n        return;\n      }\n    }\n\n    avcTrack.samples.push(avcSample);\n  }\n\n  if (avcSample.debug.length) {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_6__[\"logger\"].log(avcSample.pts + '/' + avcSample.dts + ':' + avcSample.debug);\n  }\n}\n/**\n * remove Emulation Prevention bytes from a RBSP\n */\n\n\nfunction discardEPB(data) {\n  var length = data.byteLength;\n  var EPBPositions = [];\n  var i = 1; // Find all `Emulation Prevention Bytes`\n\n  while (i < length - 2) {\n    if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n      EPBPositions.push(i + 2);\n      i += 2;\n    } else {\n      i++;\n    }\n  } // If no Emulation Prevention Bytes were found just return the original\n  // array\n\n\n  if (EPBPositions.length === 0) {\n    return data;\n  } // Create a new array to hold the NAL unit data\n\n\n  var newLength = length - EPBPositions.length;\n  var newData = new Uint8Array(newLength);\n  var sourceIndex = 0;\n\n  for (i = 0; i < newLength; sourceIndex++, i++) {\n    if (sourceIndex === EPBPositions[0]) {\n      // Skip this byte\n      sourceIndex++; // Remove this position index\n\n      EPBPositions.shift();\n    }\n\n    newData[i] = data[sourceIndex];\n  }\n\n  return newData;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (TSDemuxer);\n\n/***/ }),\n\n/***/ \"./src/errors.ts\":\n/*!***********************!*\\\n  !*** ./src/errors.ts ***!\n  \\***********************/\n/*! exports provided: ErrorTypes, ErrorDetails */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_643599__) {\n\n\"use strict\";\n__nested_webpack_require_643599__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_643599__.d(__webpack_exports__, \"ErrorTypes\", function() { return ErrorTypes; });\n/* harmony export (binding) */ __nested_webpack_require_643599__.d(__webpack_exports__, \"ErrorDetails\", function() { return ErrorDetails; });\nvar ErrorTypes;\n/**\n * @enum {ErrorDetails}\n * @typedef {string} ErrorDetail\n */\n\n(function (ErrorTypes) {\n  ErrorTypes[\"NETWORK_ERROR\"] = \"networkError\";\n  ErrorTypes[\"MEDIA_ERROR\"] = \"mediaError\";\n  ErrorTypes[\"KEY_SYSTEM_ERROR\"] = \"keySystemError\";\n  ErrorTypes[\"MUX_ERROR\"] = \"muxError\";\n  ErrorTypes[\"OTHER_ERROR\"] = \"otherError\";\n})(ErrorTypes || (ErrorTypes = {}));\n\nvar ErrorDetails;\n\n(function (ErrorDetails) {\n  ErrorDetails[\"KEY_SYSTEM_NO_KEYS\"] = \"keySystemNoKeys\";\n  ErrorDetails[\"KEY_SYSTEM_NO_ACCESS\"] = \"keySystemNoAccess\";\n  ErrorDetails[\"KEY_SYSTEM_NO_SESSION\"] = \"keySystemNoSession\";\n  ErrorDetails[\"KEY_SYSTEM_LICENSE_REQUEST_FAILED\"] = \"keySystemLicenseRequestFailed\";\n  ErrorDetails[\"KEY_SYSTEM_NO_INIT_DATA\"] = \"keySystemNoInitData\";\n  ErrorDetails[\"MANIFEST_LOAD_ERROR\"] = \"manifestLoadError\";\n  ErrorDetails[\"MANIFEST_LOAD_TIMEOUT\"] = \"manifestLoadTimeOut\";\n  ErrorDetails[\"MANIFEST_PARSING_ERROR\"] = \"manifestParsingError\";\n  ErrorDetails[\"MANIFEST_INCOMPATIBLE_CODECS_ERROR\"] = \"manifestIncompatibleCodecsError\";\n  ErrorDetails[\"LEVEL_EMPTY_ERROR\"] = \"levelEmptyError\";\n  ErrorDetails[\"LEVEL_LOAD_ERROR\"] = \"levelLoadError\";\n  ErrorDetails[\"LEVEL_LOAD_TIMEOUT\"] = \"levelLoadTimeOut\";\n  ErrorDetails[\"LEVEL_SWITCH_ERROR\"] = \"levelSwitchError\";\n  ErrorDetails[\"AUDIO_TRACK_LOAD_ERROR\"] = \"audioTrackLoadError\";\n  ErrorDetails[\"AUDIO_TRACK_LOAD_TIMEOUT\"] = \"audioTrackLoadTimeOut\";\n  ErrorDetails[\"SUBTITLE_LOAD_ERROR\"] = \"subtitleTrackLoadError\";\n  ErrorDetails[\"SUBTITLE_TRACK_LOAD_TIMEOUT\"] = \"subtitleTrackLoadTimeOut\";\n  ErrorDetails[\"FRAG_LOAD_ERROR\"] = \"fragLoadError\";\n  ErrorDetails[\"FRAG_LOAD_TIMEOUT\"] = \"fragLoadTimeOut\";\n  ErrorDetails[\"FRAG_DECRYPT_ERROR\"] = \"fragDecryptError\";\n  ErrorDetails[\"FRAG_PARSING_ERROR\"] = \"fragParsingError\";\n  ErrorDetails[\"REMUX_ALLOC_ERROR\"] = \"remuxAllocError\";\n  ErrorDetails[\"KEY_LOAD_ERROR\"] = \"keyLoadError\";\n  ErrorDetails[\"KEY_LOAD_TIMEOUT\"] = \"keyLoadTimeOut\";\n  ErrorDetails[\"BUFFER_ADD_CODEC_ERROR\"] = \"bufferAddCodecError\";\n  ErrorDetails[\"BUFFER_INCOMPATIBLE_CODECS_ERROR\"] = \"bufferIncompatibleCodecsError\";\n  ErrorDetails[\"BUFFER_APPEND_ERROR\"] = \"bufferAppendError\";\n  ErrorDetails[\"BUFFER_APPENDING_ERROR\"] = \"bufferAppendingError\";\n  ErrorDetails[\"BUFFER_STALLED_ERROR\"] = \"bufferStalledError\";\n  ErrorDetails[\"BUFFER_FULL_ERROR\"] = \"bufferFullError\";\n  ErrorDetails[\"BUFFER_SEEK_OVER_HOLE\"] = \"bufferSeekOverHole\";\n  ErrorDetails[\"BUFFER_NUDGE_ON_STALL\"] = \"bufferNudgeOnStall\";\n  ErrorDetails[\"INTERNAL_EXCEPTION\"] = \"internalException\";\n  ErrorDetails[\"INTERNAL_ABORTED\"] = \"aborted\";\n  ErrorDetails[\"UNKNOWN\"] = \"unknown\";\n})(ErrorDetails || (ErrorDetails = {}));\n\n/***/ }),\n\n/***/ \"./src/events.ts\":\n/*!***********************!*\\\n  !*** ./src/events.ts ***!\n  \\***********************/\n/*! exports provided: Events */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_646789__) {\n\n\"use strict\";\n__nested_webpack_require_646789__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_646789__.d(__webpack_exports__, \"Events\", function() { return Events; });\n/**\n * @readonly\n * @enum {string}\n */\nvar Events;\n\n(function (Events) {\n  Events[\"MEDIA_ATTACHING\"] = \"hlsMediaAttaching\";\n  Events[\"MEDIA_ATTACHED\"] = \"hlsMediaAttached\";\n  Events[\"MEDIA_DETACHING\"] = \"hlsMediaDetaching\";\n  Events[\"MEDIA_DETACHED\"] = \"hlsMediaDetached\";\n  Events[\"BUFFER_RESET\"] = \"hlsBufferReset\";\n  Events[\"BUFFER_CODECS\"] = \"hlsBufferCodecs\";\n  Events[\"BUFFER_CREATED\"] = \"hlsBufferCreated\";\n  Events[\"BUFFER_APPENDING\"] = \"hlsBufferAppending\";\n  Events[\"BUFFER_APPENDED\"] = \"hlsBufferAppended\";\n  Events[\"BUFFER_EOS\"] = \"hlsBufferEos\";\n  Events[\"BUFFER_FLUSHING\"] = \"hlsBufferFlushing\";\n  Events[\"BUFFER_FLUSHED\"] = \"hlsBufferFlushed\";\n  Events[\"MANIFEST_LOADING\"] = \"hlsManifestLoading\";\n  Events[\"MANIFEST_LOADED\"] = \"hlsManifestLoaded\";\n  Events[\"MANIFEST_PARSED\"] = \"hlsManifestParsed\";\n  Events[\"LEVEL_SWITCHING\"] = \"hlsLevelSwitching\";\n  Events[\"LEVEL_SWITCHED\"] = \"hlsLevelSwitched\";\n  Events[\"LEVEL_LOADING\"] = \"hlsLevelLoading\";\n  Events[\"LEVEL_LOADED\"] = \"hlsLevelLoaded\";\n  Events[\"LEVEL_UPDATED\"] = \"hlsLevelUpdated\";\n  Events[\"LEVEL_PTS_UPDATED\"] = \"hlsLevelPtsUpdated\";\n  Events[\"LEVELS_UPDATED\"] = \"hlsLevelsUpdated\";\n  Events[\"AUDIO_TRACKS_UPDATED\"] = \"hlsAudioTracksUpdated\";\n  Events[\"AUDIO_TRACK_SWITCHING\"] = \"hlsAudioTrackSwitching\";\n  Events[\"AUDIO_TRACK_SWITCHED\"] = \"hlsAudioTrackSwitched\";\n  Events[\"AUDIO_TRACK_LOADING\"] = \"hlsAudioTrackLoading\";\n  Events[\"AUDIO_TRACK_LOADED\"] = \"hlsAudioTrackLoaded\";\n  Events[\"SUBTITLE_TRACKS_UPDATED\"] = \"hlsSubtitleTracksUpdated\";\n  Events[\"SUBTITLE_TRACKS_CLEARED\"] = \"hlsSubtitleTracksCleared\";\n  Events[\"SUBTITLE_TRACK_SWITCH\"] = \"hlsSubtitleTrackSwitch\";\n  Events[\"SUBTITLE_TRACK_LOADING\"] = \"hlsSubtitleTrackLoading\";\n  Events[\"SUBTITLE_TRACK_LOADED\"] = \"hlsSubtitleTrackLoaded\";\n  Events[\"SUBTITLE_FRAG_PROCESSED\"] = \"hlsSubtitleFragProcessed\";\n  Events[\"CUES_PARSED\"] = \"hlsCuesParsed\";\n  Events[\"NON_NATIVE_TEXT_TRACKS_FOUND\"] = \"hlsNonNativeTextTracksFound\";\n  Events[\"INIT_PTS_FOUND\"] = \"hlsInitPtsFound\";\n  Events[\"FRAG_LOADING\"] = \"hlsFragLoading\";\n  Events[\"FRAG_LOAD_EMERGENCY_ABORTED\"] = \"hlsFragLoadEmergencyAborted\";\n  Events[\"FRAG_LOADED\"] = \"hlsFragLoaded\";\n  Events[\"FRAG_DECRYPTED\"] = \"hlsFragDecrypted\";\n  Events[\"FRAG_PARSING_INIT_SEGMENT\"] = \"hlsFragParsingInitSegment\";\n  Events[\"FRAG_PARSING_USERDATA\"] = \"hlsFragParsingUserdata\";\n  Events[\"FRAG_PARSING_METADATA\"] = \"hlsFragParsingMetadata\";\n  Events[\"FRAG_PARSED\"] = \"hlsFragParsed\";\n  Events[\"FRAG_BUFFERED\"] = \"hlsFragBuffered\";\n  Events[\"FRAG_CHANGED\"] = \"hlsFragChanged\";\n  Events[\"FPS_DROP\"] = \"hlsFpsDrop\";\n  Events[\"FPS_DROP_LEVEL_CAPPING\"] = \"hlsFpsDropLevelCapping\";\n  Events[\"ERROR\"] = \"hlsError\";\n  Events[\"DESTROYING\"] = \"hlsDestroying\";\n  Events[\"KEY_LOADING\"] = \"hlsKeyLoading\";\n  Events[\"KEY_LOADED\"] = \"hlsKeyLoaded\";\n  Events[\"LIVE_BACK_BUFFER_REACHED\"] = \"hlsLiveBackBufferReached\";\n  Events[\"BACK_BUFFER_REACHED\"] = \"hlsBackBufferReached\";\n})(Events || (Events = {}));\n\n/***/ }),\n\n/***/ \"./src/hls.ts\":\n/*!********************!*\\\n  !*** ./src/hls.ts ***!\n  \\********************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_650129__) {\n\n\"use strict\";\n__nested_webpack_require_650129__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_650129__.d(__webpack_exports__, \"default\", function() { return Hls; });\n/* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_650129__(/*! url-toolkit */ \"./node_modules/url-toolkit/src/url-toolkit.js\");\n/* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nested_webpack_require_650129__.n(url_toolkit__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _loader_playlist_loader__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_650129__(/*! ./loader/playlist-loader */ \"./src/loader/playlist-loader.ts\");\n/* harmony import */ var _loader_key_loader__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_650129__(/*! ./loader/key-loader */ \"./src/loader/key-loader.ts\");\n/* harmony import */ var _controller_id3_track_controller__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_650129__(/*! ./controller/id3-track-controller */ \"./src/controller/id3-track-controller.ts\");\n/* harmony import */ var _controller_latency_controller__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_650129__(/*! ./controller/latency-controller */ \"./src/controller/latency-controller.ts\");\n/* harmony import */ var _controller_level_controller__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_650129__(/*! ./controller/level-controller */ \"./src/controller/level-controller.ts\");\n/* harmony import */ var _controller_fragment_tracker__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_650129__(/*! ./controller/fragment-tracker */ \"./src/controller/fragment-tracker.ts\");\n/* harmony import */ var _controller_stream_controller__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_650129__(/*! ./controller/stream-controller */ \"./src/controller/stream-controller.ts\");\n/* harmony import */ var _is_supported__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_650129__(/*! ./is-supported */ \"./src/is-supported.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_650129__(/*! ./utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_650129__(/*! ./config */ \"./src/config.ts\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_650129__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__nested_webpack_require_650129__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_650129__(/*! ./events */ \"./src/events.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_650129__(/*! ./errors */ \"./src/errors.ts\");\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @module Hls\n * @class\n * @constructor\n */\nvar Hls = /*#__PURE__*/function () {\n  Hls.isSupported = function isSupported() {\n    return Object(_is_supported__WEBPACK_IMPORTED_MODULE_8__[\"isSupported\"])();\n  };\n\n  /**\n   * Creates an instance of an HLS client that can attach to exactly one `HTMLMediaElement`.\n   *\n   * @constructs Hls\n   * @param {HlsConfig} config\n   */\n  function Hls(userConfig) {\n    if (userConfig === void 0) {\n      userConfig = {};\n    }\n\n    this.config = void 0;\n    this.userConfig = void 0;\n    this.coreComponents = void 0;\n    this.networkControllers = void 0;\n    this._emitter = new eventemitter3__WEBPACK_IMPORTED_MODULE_11__[\"EventEmitter\"]();\n    this._autoLevelCapping = void 0;\n    this.abrController = void 0;\n    this.bufferController = void 0;\n    this.capLevelController = void 0;\n    this.latencyController = void 0;\n    this.levelController = void 0;\n    this.streamController = void 0;\n    this.audioTrackController = void 0;\n    this.subtitleTrackController = void 0;\n    this.emeController = void 0;\n    this.cmcdController = void 0;\n    this._media = null;\n    this.url = null;\n    var config = this.config = Object(_config__WEBPACK_IMPORTED_MODULE_10__[\"mergeConfig\"])(Hls.DefaultConfig, userConfig);\n    this.userConfig = userConfig;\n    Object(_utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"enableLogs\"])(config.debug);\n    this._autoLevelCapping = -1;\n\n    if (config.progressive) {\n      Object(_config__WEBPACK_IMPORTED_MODULE_10__[\"enableStreamingMode\"])(config);\n    } // core controllers and network loaders\n\n\n    var ConfigAbrController = config.abrController,\n        ConfigBufferController = config.bufferController,\n        ConfigCapLevelController = config.capLevelController,\n        ConfigFpsController = config.fpsController;\n    var abrController = this.abrController = new ConfigAbrController(this);\n    var bufferController = this.bufferController = new ConfigBufferController(this);\n    var capLevelController = this.capLevelController = new ConfigCapLevelController(this);\n    var fpsController = new ConfigFpsController(this);\n    var playListLoader = new _loader_playlist_loader__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this);\n    var keyLoader = new _loader_key_loader__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this);\n    var id3TrackController = new _controller_id3_track_controller__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this); // network controllers\n\n    var levelController = this.levelController = new _controller_level_controller__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this); // FragmentTracker must be defined before StreamController because the order of event handling is important\n\n    var fragmentTracker = new _controller_fragment_tracker__WEBPACK_IMPORTED_MODULE_6__[\"FragmentTracker\"](this);\n    var streamController = this.streamController = new _controller_stream_controller__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this, fragmentTracker); // Cap level controller uses streamController to flush the buffer\n\n    capLevelController.setStreamController(streamController); // fpsController uses streamController to switch when frames are being dropped\n\n    fpsController.setStreamController(streamController);\n    var networkControllers = [playListLoader, keyLoader, levelController, streamController];\n    this.networkControllers = networkControllers;\n    var coreComponents = [abrController, bufferController, capLevelController, fpsController, id3TrackController, fragmentTracker];\n    this.audioTrackController = this.createController(config.audioTrackController, null, networkControllers);\n    this.createController(config.audioStreamController, fragmentTracker, networkControllers); // subtitleTrackController must be defined before  because the order of event handling is important\n\n    this.subtitleTrackController = this.createController(config.subtitleTrackController, null, networkControllers);\n    this.createController(config.subtitleStreamController, fragmentTracker, networkControllers);\n    this.createController(config.timelineController, null, coreComponents);\n    this.emeController = this.createController(config.emeController, null, coreComponents);\n    this.cmcdController = this.createController(config.cmcdController, null, coreComponents);\n    this.latencyController = this.createController(_controller_latency_controller__WEBPACK_IMPORTED_MODULE_4__[\"default\"], null, coreComponents);\n    this.coreComponents = coreComponents;\n  }\n\n  var _proto = Hls.prototype;\n\n  _proto.createController = function createController(ControllerClass, fragmentTracker, components) {\n    if (ControllerClass) {\n      var controllerInstance = fragmentTracker ? new ControllerClass(this, fragmentTracker) : new ControllerClass(this);\n\n      if (components) {\n        components.push(controllerInstance);\n      }\n\n      return controllerInstance;\n    }\n\n    return null;\n  } // Delegate the EventEmitter through the public API of Hls.js\n  ;\n\n  _proto.on = function on(event, listener, context) {\n    if (context === void 0) {\n      context = this;\n    }\n\n    this._emitter.on(event, listener, context);\n  };\n\n  _proto.once = function once(event, listener, context) {\n    if (context === void 0) {\n      context = this;\n    }\n\n    this._emitter.once(event, listener, context);\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(event) {\n    this._emitter.removeAllListeners(event);\n  };\n\n  _proto.off = function off(event, listener, context, once) {\n    if (context === void 0) {\n      context = this;\n    }\n\n    this._emitter.off(event, listener, context, once);\n  };\n\n  _proto.listeners = function listeners(event) {\n    return this._emitter.listeners(event);\n  };\n\n  _proto.emit = function emit(event, name, eventObject) {\n    return this._emitter.emit(event, name, eventObject);\n  };\n\n  _proto.trigger = function trigger(event, eventObject) {\n    if (this.config.debug) {\n      return this.emit(event, event, eventObject);\n    } else {\n      try {\n        return this.emit(event, event, eventObject);\n      } catch (e) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].error('An internal error happened while handling event ' + event + '. Error message: \"' + e.message + '\". Here is a stacktrace:', e);\n        this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__[\"Events\"].ERROR, {\n          type: _errors__WEBPACK_IMPORTED_MODULE_13__[\"ErrorTypes\"].OTHER_ERROR,\n          details: _errors__WEBPACK_IMPORTED_MODULE_13__[\"ErrorDetails\"].INTERNAL_EXCEPTION,\n          fatal: false,\n          event: event,\n          error: e\n        });\n      }\n    }\n\n    return false;\n  };\n\n  _proto.listenerCount = function listenerCount(event) {\n    return this._emitter.listenerCount(event);\n  }\n  /**\n   * Dispose of the instance\n   */\n  ;\n\n  _proto.destroy = function destroy() {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log('destroy');\n    this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__[\"Events\"].DESTROYING, undefined);\n    this.detachMedia();\n    this.removeAllListeners();\n    this._autoLevelCapping = -1;\n    this.url = null;\n    this.networkControllers.forEach(function (component) {\n      return component.destroy();\n    });\n    this.networkControllers.length = 0;\n    this.coreComponents.forEach(function (component) {\n      return component.destroy();\n    });\n    this.coreComponents.length = 0;\n  }\n  /**\n   * Attaches Hls.js to a media element\n   * @param {HTMLMediaElement} media\n   */\n  ;\n\n  _proto.attachMedia = function attachMedia(media) {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log('attachMedia');\n    this._media = media;\n    this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__[\"Events\"].MEDIA_ATTACHING, {\n      media: media\n    });\n  }\n  /**\n   * Detach Hls.js from the media\n   */\n  ;\n\n  _proto.detachMedia = function detachMedia() {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log('detachMedia');\n    this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__[\"Events\"].MEDIA_DETACHING, undefined);\n    this._media = null;\n  }\n  /**\n   * Set the source URL. Can be relative or absolute.\n   * @param {string} url\n   */\n  ;\n\n  _proto.loadSource = function loadSource(url) {\n    this.stopLoad();\n    var media = this.media;\n    var loadedSource = this.url;\n    var loadingSource = this.url = url_toolkit__WEBPACK_IMPORTED_MODULE_0__[\"buildAbsoluteURL\"](self.location.href, url, {\n      alwaysNormalize: true\n    });\n    _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log(\"loadSource:\" + loadingSource);\n\n    if (media && loadedSource && loadedSource !== loadingSource && this.bufferController.hasSourceTypes()) {\n      this.detachMedia();\n      this.attachMedia(media);\n    } // when attaching to a source URL, trigger a playlist load\n\n\n    this.trigger(_events__WEBPACK_IMPORTED_MODULE_12__[\"Events\"].MANIFEST_LOADING, {\n      url: url\n    });\n  }\n  /**\n   * Start loading data from the stream source.\n   * Depending on default config, client starts loading automatically when a source is set.\n   *\n   * @param {number} startPosition Set the start position to stream from\n   * @default -1 None (from earliest point)\n   */\n  ;\n\n  _proto.startLoad = function startLoad(startPosition) {\n    if (startPosition === void 0) {\n      startPosition = -1;\n    }\n\n    _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log(\"startLoad(\" + startPosition + \")\");\n    this.networkControllers.forEach(function (controller) {\n      controller.startLoad(startPosition);\n    });\n  }\n  /**\n   * Stop loading of any stream data.\n   */\n  ;\n\n  _proto.stopLoad = function stopLoad() {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log('stopLoad');\n    this.networkControllers.forEach(function (controller) {\n      controller.stopLoad();\n    });\n  }\n  /**\n   * Swap through possible audio codecs in the stream (for example to switch from stereo to 5.1)\n   */\n  ;\n\n  _proto.swapAudioCodec = function swapAudioCodec() {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log('swapAudioCodec');\n    this.streamController.swapAudioCodec();\n  }\n  /**\n   * When the media-element fails, this allows to detach and then re-attach it\n   * as one call (convenience method).\n   *\n   * Automatic recovery of media-errors by this process is configurable.\n   */\n  ;\n\n  _proto.recoverMediaError = function recoverMediaError() {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log('recoverMediaError');\n    var media = this._media;\n    this.detachMedia();\n\n    if (media) {\n      this.attachMedia(media);\n    }\n  };\n\n  _proto.removeLevel = function removeLevel(levelIndex, urlId) {\n    if (urlId === void 0) {\n      urlId = 0;\n    }\n\n    this.levelController.removeLevel(levelIndex, urlId);\n  }\n  /**\n   * @type {Level[]}\n   */\n  ;\n\n  _createClass(Hls, [{\n    key: \"levels\",\n    get: function get() {\n      var levels = this.levelController.levels;\n      return levels ? levels : [];\n    }\n    /**\n     * Index of quality level currently played\n     * @type {number}\n     */\n\n  }, {\n    key: \"currentLevel\",\n    get: function get() {\n      return this.streamController.currentLevel;\n    }\n    /**\n     * Set quality level index immediately .\n     * This will flush the current buffer to replace the quality asap.\n     * That means playback will interrupt at least shortly to re-buffer and re-sync eventually.\n     * @type {number} -1 for automatic level selection\n     */\n    ,\n    set: function set(newLevel) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log(\"set currentLevel:\" + newLevel);\n      this.loadLevel = newLevel;\n      this.abrController.clearTimer();\n      this.streamController.immediateLevelSwitch();\n    }\n    /**\n     * Index of next quality level loaded as scheduled by stream controller.\n     * @type {number}\n     */\n\n  }, {\n    key: \"nextLevel\",\n    get: function get() {\n      return this.streamController.nextLevel;\n    }\n    /**\n     * Set quality level index for next loaded data.\n     * This will switch the video quality asap, without interrupting playback.\n     * May abort current loading of data, and flush parts of buffer (outside currently played fragment region).\n     * @type {number} -1 for automatic level selection\n     */\n    ,\n    set: function set(newLevel) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log(\"set nextLevel:\" + newLevel);\n      this.levelController.manualLevel = newLevel;\n      this.streamController.nextLevelSwitch();\n    }\n    /**\n     * Return the quality level of the currently or last (of none is loaded currently) segment\n     * @type {number}\n     */\n\n  }, {\n    key: \"loadLevel\",\n    get: function get() {\n      return this.levelController.level;\n    }\n    /**\n     * Set quality level index for next loaded data in a conservative way.\n     * This will switch the quality without flushing, but interrupt current loading.\n     * Thus the moment when the quality switch will appear in effect will only be after the already existing buffer.\n     * @type {number} newLevel -1 for automatic level selection\n     */\n    ,\n    set: function set(newLevel) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log(\"set loadLevel:\" + newLevel);\n      this.levelController.manualLevel = newLevel;\n    }\n    /**\n     * get next quality level loaded\n     * @type {number}\n     */\n\n  }, {\n    key: \"nextLoadLevel\",\n    get: function get() {\n      return this.levelController.nextLoadLevel;\n    }\n    /**\n     * Set quality level of next loaded segment in a fully \"non-destructive\" way.\n     * Same as `loadLevel` but will wait for next switch (until current loading is done).\n     * @type {number} level\n     */\n    ,\n    set: function set(level) {\n      this.levelController.nextLoadLevel = level;\n    }\n    /**\n     * Return \"first level\": like a default level, if not set,\n     * falls back to index of first level referenced in manifest\n     * @type {number}\n     */\n\n  }, {\n    key: \"firstLevel\",\n    get: function get() {\n      return Math.max(this.levelController.firstLevel, this.minAutoLevel);\n    }\n    /**\n     * Sets \"first-level\", see getter.\n     * @type {number}\n     */\n    ,\n    set: function set(newLevel) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log(\"set firstLevel:\" + newLevel);\n      this.levelController.firstLevel = newLevel;\n    }\n    /**\n     * Return start level (level of first fragment that will be played back)\n     * if not overrided by user, first level appearing in manifest will be used as start level\n     * if -1 : automatic start level selection, playback will start from level matching download bandwidth\n     * (determined from download of first segment)\n     * @type {number}\n     */\n\n  }, {\n    key: \"startLevel\",\n    get: function get() {\n      return this.levelController.startLevel;\n    }\n    /**\n     * set  start level (level of first fragment that will be played back)\n     * if not overrided by user, first level appearing in manifest will be used as start level\n     * if -1 : automatic start level selection, playback will start from level matching download bandwidth\n     * (determined from download of first segment)\n     * @type {number} newLevel\n     */\n    ,\n    set: function set(newLevel) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log(\"set startLevel:\" + newLevel); // if not in automatic start level detection, ensure startLevel is greater than minAutoLevel\n\n      if (newLevel !== -1) {\n        newLevel = Math.max(newLevel, this.minAutoLevel);\n      }\n\n      this.levelController.startLevel = newLevel;\n    }\n    /**\n     * Get the current setting for capLevelToPlayerSize\n     *\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"capLevelToPlayerSize\",\n    get: function get() {\n      return this.config.capLevelToPlayerSize;\n    }\n    /**\n     * set  dynamically set capLevelToPlayerSize against (`CapLevelController`)\n     *\n     * @type {boolean}\n     */\n    ,\n    set: function set(shouldStartCapping) {\n      var newCapLevelToPlayerSize = !!shouldStartCapping;\n\n      if (newCapLevelToPlayerSize !== this.config.capLevelToPlayerSize) {\n        if (newCapLevelToPlayerSize) {\n          this.capLevelController.startCapping(); // If capping occurs, nextLevelSwitch will happen based on size.\n        } else {\n          this.capLevelController.stopCapping();\n          this.autoLevelCapping = -1;\n          this.streamController.nextLevelSwitch(); // Now we're uncapped, get the next level asap.\n        }\n\n        this.config.capLevelToPlayerSize = newCapLevelToPlayerSize;\n      }\n    }\n    /**\n     * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)\n     * @type {number}\n     */\n\n  }, {\n    key: \"autoLevelCapping\",\n    get: function get() {\n      return this._autoLevelCapping;\n    }\n    /**\n     * get bandwidth estimate\n     * @type {number}\n     */\n    ,\n    set:\n    /**\n     * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)\n     * @type {number}\n     */\n    function set(newLevel) {\n      if (this._autoLevelCapping !== newLevel) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_9__[\"logger\"].log(\"set autoLevelCapping:\" + newLevel);\n        this._autoLevelCapping = newLevel;\n      }\n    }\n    /**\n     * True when automatic level selection enabled\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"bandwidthEstimate\",\n    get: function get() {\n      var bwEstimator = this.abrController.bwEstimator;\n\n      if (!bwEstimator) {\n        return NaN;\n      }\n\n      return bwEstimator.getEstimate();\n    }\n  }, {\n    key: \"autoLevelEnabled\",\n    get: function get() {\n      return this.levelController.manualLevel === -1;\n    }\n    /**\n     * Level set manually (if any)\n     * @type {number}\n     */\n\n  }, {\n    key: \"manualLevel\",\n    get: function get() {\n      return this.levelController.manualLevel;\n    }\n    /**\n     * min level selectable in auto mode according to config.minAutoBitrate\n     * @type {number}\n     */\n\n  }, {\n    key: \"minAutoLevel\",\n    get: function get() {\n      var levels = this.levels,\n          minAutoBitrate = this.config.minAutoBitrate;\n      if (!levels) return 0;\n      var len = levels.length;\n\n      for (var i = 0; i < len; i++) {\n        if (levels[i].maxBitrate >= minAutoBitrate) {\n          return i;\n        }\n      }\n\n      return 0;\n    }\n    /**\n     * max level selectable in auto mode according to autoLevelCapping\n     * @type {number}\n     */\n\n  }, {\n    key: \"maxAutoLevel\",\n    get: function get() {\n      var levels = this.levels,\n          autoLevelCapping = this.autoLevelCapping;\n      var maxAutoLevel;\n\n      if (autoLevelCapping === -1 && levels && levels.length) {\n        maxAutoLevel = levels.length - 1;\n      } else {\n        maxAutoLevel = autoLevelCapping;\n      }\n\n      return maxAutoLevel;\n    }\n    /**\n     * next automatically selected quality level\n     * @type {number}\n     */\n\n  }, {\n    key: \"nextAutoLevel\",\n    get: function get() {\n      // ensure next auto level is between  min and max auto level\n      return Math.min(Math.max(this.abrController.nextAutoLevel, this.minAutoLevel), this.maxAutoLevel);\n    }\n    /**\n     * this setter is used to force next auto level.\n     * this is useful to force a switch down in auto mode:\n     * in case of load error on level N, hls.js can set nextAutoLevel to N-1 for example)\n     * forced value is valid for one fragment. upon successful frag loading at forced level,\n     * this value will be resetted to -1 by ABR controller.\n     * @type {number}\n     */\n    ,\n    set: function set(nextLevel) {\n      this.abrController.nextAutoLevel = Math.max(this.minAutoLevel, nextLevel);\n    }\n    /**\n     * get the datetime value relative to media.currentTime for the active level Program Date Time if present\n     * @type {Date}\n     */\n\n  }, {\n    key: \"playingDate\",\n    get: function get() {\n      return this.streamController.currentProgramDateTime;\n    }\n    /**\n     * @type {AudioTrack[]}\n     */\n\n  }, {\n    key: \"audioTracks\",\n    get: function get() {\n      var audioTrackController = this.audioTrackController;\n      return audioTrackController ? audioTrackController.audioTracks : [];\n    }\n    /**\n     * index of the selected audio track (index in audio track lists)\n     * @type {number}\n     */\n\n  }, {\n    key: \"audioTrack\",\n    get: function get() {\n      var audioTrackController = this.audioTrackController;\n      return audioTrackController ? audioTrackController.audioTrack : -1;\n    }\n    /**\n     * selects an audio track, based on its index in audio track lists\n     * @type {number}\n     */\n    ,\n    set: function set(audioTrackId) {\n      var audioTrackController = this.audioTrackController;\n\n      if (audioTrackController) {\n        audioTrackController.audioTrack = audioTrackId;\n      }\n    }\n    /**\n     * get alternate subtitle tracks list from playlist\n     * @type {MediaPlaylist[]}\n     */\n\n  }, {\n    key: \"subtitleTracks\",\n    get: function get() {\n      var subtitleTrackController = this.subtitleTrackController;\n      return subtitleTrackController ? subtitleTrackController.subtitleTracks : [];\n    }\n    /**\n     * index of the selected subtitle track (index in subtitle track lists)\n     * @type {number}\n     */\n\n  }, {\n    key: \"subtitleTrack\",\n    get: function get() {\n      var subtitleTrackController = this.subtitleTrackController;\n      return subtitleTrackController ? subtitleTrackController.subtitleTrack : -1;\n    },\n    set:\n    /**\n     * select an subtitle track, based on its index in subtitle track lists\n     * @type {number}\n     */\n    function set(subtitleTrackId) {\n      var subtitleTrackController = this.subtitleTrackController;\n\n      if (subtitleTrackController) {\n        subtitleTrackController.subtitleTrack = subtitleTrackId;\n      }\n    }\n    /**\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"media\",\n    get: function get() {\n      return this._media;\n    }\n  }, {\n    key: \"subtitleDisplay\",\n    get: function get() {\n      var subtitleTrackController = this.subtitleTrackController;\n      return subtitleTrackController ? subtitleTrackController.subtitleDisplay : false;\n    }\n    /**\n     * Enable/disable subtitle display rendering\n     * @type {boolean}\n     */\n    ,\n    set: function set(value) {\n      var subtitleTrackController = this.subtitleTrackController;\n\n      if (subtitleTrackController) {\n        subtitleTrackController.subtitleDisplay = value;\n      }\n    }\n    /**\n     * get mode for Low-Latency HLS loading\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"lowLatencyMode\",\n    get: function get() {\n      return this.config.lowLatencyMode;\n    }\n    /**\n     * Enable/disable Low-Latency HLS part playlist and segment loading, and start live streams at playlist PART-HOLD-BACK rather than HOLD-BACK.\n     * @type {boolean}\n     */\n    ,\n    set: function set(mode) {\n      this.config.lowLatencyMode = mode;\n    }\n    /**\n     * position (in seconds) of live sync point (ie edge of live position minus safety delay defined by ```hls.config.liveSyncDuration```)\n     * @type {number}\n     */\n\n  }, {\n    key: \"liveSyncPosition\",\n    get: function get() {\n      return this.latencyController.liveSyncPosition;\n    }\n    /**\n     * estimated position (in seconds) of live edge (ie edge of live playlist plus time sync playlist advanced)\n     * returns 0 before first playlist is loaded\n     * @type {number}\n     */\n\n  }, {\n    key: \"latency\",\n    get: function get() {\n      return this.latencyController.latency;\n    }\n    /**\n     * maximum distance from the edge before the player seeks forward to ```hls.liveSyncPosition```\n     * configured using ```liveMaxLatencyDurationCount``` (multiple of target duration) or ```liveMaxLatencyDuration```\n     * returns 0 before first playlist is loaded\n     * @type {number}\n     */\n\n  }, {\n    key: \"maxLatency\",\n    get: function get() {\n      return this.latencyController.maxLatency;\n    }\n    /**\n     * target distance from the edge as calculated by the latency controller\n     * @type {number}\n     */\n\n  }, {\n    key: \"targetLatency\",\n    get: function get() {\n      return this.latencyController.targetLatency;\n    }\n    /**\n     * the rate at which the edge of the current live playlist is advancing or 1 if there is none\n     * @type {number}\n     */\n\n  }, {\n    key: \"drift\",\n    get: function get() {\n      return this.latencyController.drift;\n    }\n    /**\n     * set to true when startLoad is called before MANIFEST_PARSED event\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"forceStartLoad\",\n    get: function get() {\n      return this.streamController.forceStartLoad;\n    }\n  }], [{\n    key: \"version\",\n    get: function get() {\n      return \"1.2.2\";\n    }\n  }, {\n    key: \"Events\",\n    get: function get() {\n      return _events__WEBPACK_IMPORTED_MODULE_12__[\"Events\"];\n    }\n  }, {\n    key: \"ErrorTypes\",\n    get: function get() {\n      return _errors__WEBPACK_IMPORTED_MODULE_13__[\"ErrorTypes\"];\n    }\n  }, {\n    key: \"ErrorDetails\",\n    get: function get() {\n      return _errors__WEBPACK_IMPORTED_MODULE_13__[\"ErrorDetails\"];\n    }\n  }, {\n    key: \"DefaultConfig\",\n    get: function get() {\n      if (!Hls.defaultConfig) {\n        return _config__WEBPACK_IMPORTED_MODULE_10__[\"hlsDefaultConfig\"];\n      }\n\n      return Hls.defaultConfig;\n    }\n    /**\n     * @type {HlsConfig}\n     */\n    ,\n    set: function set(defaultConfig) {\n      Hls.defaultConfig = defaultConfig;\n    }\n  }]);\n\n  return Hls;\n}();\n\nHls.defaultConfig = void 0;\n\n\n/***/ }),\n\n/***/ \"./src/is-supported.ts\":\n/*!*****************************!*\\\n  !*** ./src/is-supported.ts ***!\n  \\*****************************/\n/*! exports provided: isSupported, changeTypeSupported */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_679110__) {\n\n\"use strict\";\n__nested_webpack_require_679110__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_679110__.d(__webpack_exports__, \"isSupported\", function() { return isSupported; });\n/* harmony export (binding) */ __nested_webpack_require_679110__.d(__webpack_exports__, \"changeTypeSupported\", function() { return changeTypeSupported; });\n/* harmony import */ var _utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_679110__(/*! ./utils/mediasource-helper */ \"./src/utils/mediasource-helper.ts\");\n\n\nfunction getSourceBuffer() {\n  return self.SourceBuffer || self.WebKitSourceBuffer;\n}\n\nfunction isSupported() {\n  var mediaSource = Object(_utils_mediasource_helper__WEBPACK_IMPORTED_MODULE_0__[\"getMediaSource\"])();\n\n  if (!mediaSource) {\n    return false;\n  }\n\n  var sourceBuffer = getSourceBuffer();\n  var isTypeSupported = mediaSource && typeof mediaSource.isTypeSupported === 'function' && mediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"'); // if SourceBuffer is exposed ensure its API is valid\n  // safari and old version of Chrome doe not expose SourceBuffer globally so checking SourceBuffer.prototype is impossible\n\n  var sourceBufferValidAPI = !sourceBuffer || sourceBuffer.prototype && typeof sourceBuffer.prototype.appendBuffer === 'function' && typeof sourceBuffer.prototype.remove === 'function';\n  return !!isTypeSupported && !!sourceBufferValidAPI;\n}\nfunction changeTypeSupported() {\n  var _sourceBuffer$prototy;\n\n  var sourceBuffer = getSourceBuffer();\n  return typeof (sourceBuffer === null || sourceBuffer === void 0 ? void 0 : (_sourceBuffer$prototy = sourceBuffer.prototype) === null || _sourceBuffer$prototy === void 0 ? void 0 : _sourceBuffer$prototy.changeType) === 'function';\n}\n\n/***/ }),\n\n/***/ \"./src/loader/date-range.ts\":\n/*!**********************************!*\\\n  !*** ./src/loader/date-range.ts ***!\n  \\**********************************/\n/*! exports provided: DateRangeAttribute, DateRange */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_681129__) {\n\n\"use strict\";\n__nested_webpack_require_681129__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_681129__.d(__webpack_exports__, \"DateRangeAttribute\", function() { return DateRangeAttribute; });\n/* harmony export (binding) */ __nested_webpack_require_681129__.d(__webpack_exports__, \"DateRange\", function() { return DateRange; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_681129__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _utils_attr_list__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_681129__(/*! ../utils/attr-list */ \"./src/utils/attr-list.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_681129__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n\n\n\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n\nvar DateRangeAttribute;\n\n(function (DateRangeAttribute) {\n  DateRangeAttribute[\"ID\"] = \"ID\";\n  DateRangeAttribute[\"CLASS\"] = \"CLASS\";\n  DateRangeAttribute[\"START_DATE\"] = \"START-DATE\";\n  DateRangeAttribute[\"DURATION\"] = \"DURATION\";\n  DateRangeAttribute[\"END_DATE\"] = \"END-DATE\";\n  DateRangeAttribute[\"END_ON_NEXT\"] = \"END-ON-NEXT\";\n  DateRangeAttribute[\"PLANNED_DURATION\"] = \"PLANNED-DURATION\";\n  DateRangeAttribute[\"SCTE35_OUT\"] = \"SCTE35-OUT\";\n  DateRangeAttribute[\"SCTE35_IN\"] = \"SCTE35-IN\";\n})(DateRangeAttribute || (DateRangeAttribute = {}));\n\nvar DateRange = /*#__PURE__*/function () {\n  function DateRange(dateRangeAttr, dateRangeWithSameId) {\n    this.attr = void 0;\n    this._startDate = void 0;\n    this._endDate = void 0;\n    this._badValueForSameId = void 0;\n\n    if (dateRangeWithSameId) {\n      var previousAttr = dateRangeWithSameId.attr;\n\n      for (var key in previousAttr) {\n        if (Object.prototype.hasOwnProperty.call(dateRangeAttr, key) && dateRangeAttr[key] !== previousAttr[key]) {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn(\"DATERANGE tag attribute: \\\"\" + key + \"\\\" does not match for tags with ID: \\\"\" + dateRangeAttr.ID + \"\\\"\");\n          this._badValueForSameId = key;\n          break;\n        }\n      } // Merge DateRange tags with the same ID\n\n\n      dateRangeAttr = _extends(new _utils_attr_list__WEBPACK_IMPORTED_MODULE_1__[\"AttrList\"]({}), previousAttr, dateRangeAttr);\n    }\n\n    this.attr = dateRangeAttr;\n    this._startDate = new Date(dateRangeAttr[DateRangeAttribute.START_DATE]);\n\n    if (DateRangeAttribute.END_DATE in this.attr) {\n      var endDate = new Date(this.attr[DateRangeAttribute.END_DATE]);\n\n      if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(endDate.getTime())) {\n        this._endDate = endDate;\n      }\n    }\n  }\n\n  _createClass(DateRange, [{\n    key: \"id\",\n    get: function get() {\n      return this.attr.ID;\n    }\n  }, {\n    key: \"class\",\n    get: function get() {\n      return this.attr.CLASS;\n    }\n  }, {\n    key: \"startDate\",\n    get: function get() {\n      return this._startDate;\n    }\n  }, {\n    key: \"endDate\",\n    get: function get() {\n      if (this._endDate) {\n        return this._endDate;\n      }\n\n      var duration = this.duration;\n\n      if (duration !== null) {\n        return new Date(this._startDate.getTime() + duration * 1000);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"duration\",\n    get: function get() {\n      if (DateRangeAttribute.DURATION in this.attr) {\n        var duration = this.attr.decimalFloatingPoint(DateRangeAttribute.DURATION);\n\n        if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(duration)) {\n          return duration;\n        }\n      } else if (this._endDate) {\n        return (this._endDate.getTime() - this._startDate.getTime()) / 1000;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"plannedDuration\",\n    get: function get() {\n      if (DateRangeAttribute.PLANNED_DURATION in this.attr) {\n        return this.attr.decimalFloatingPoint(DateRangeAttribute.PLANNED_DURATION);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"endOnNext\",\n    get: function get() {\n      return this.attr.bool(DateRangeAttribute.END_ON_NEXT);\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return !!this.id && !this._badValueForSameId && Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(this.startDate.getTime()) && (this.duration === null || this.duration >= 0) && (!this.endOnNext || !!this.class);\n    }\n  }]);\n\n  return DateRange;\n}();\n\n/***/ }),\n\n/***/ \"./src/loader/fragment-loader.ts\":\n/*!***************************************!*\\\n  !*** ./src/loader/fragment-loader.ts ***!\n  \\***************************************/\n/*! exports provided: default, LoadError */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_686824__) {\n\n\"use strict\";\n__nested_webpack_require_686824__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_686824__.d(__webpack_exports__, \"default\", function() { return FragmentLoader; });\n/* harmony export (binding) */ __nested_webpack_require_686824__.d(__webpack_exports__, \"LoadError\", function() { return LoadError; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_686824__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_686824__(/*! ../errors */ \"./src/errors.ts\");\n\n\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\nvar MIN_CHUNK_SIZE = Math.pow(2, 17); // 128kb\n\nvar FragmentLoader = /*#__PURE__*/function () {\n  function FragmentLoader(config) {\n    this.config = void 0;\n    this.loader = null;\n    this.partLoadTimeout = -1;\n    this.config = config;\n  }\n\n  var _proto = FragmentLoader.prototype;\n\n  _proto.destroy = function destroy() {\n    if (this.loader) {\n      this.loader.destroy();\n      this.loader = null;\n    }\n  };\n\n  _proto.abort = function abort() {\n    if (this.loader) {\n      // Abort the loader for current fragment. Only one may load at any given time\n      this.loader.abort();\n    }\n  };\n\n  _proto.load = function load(frag, _onProgress) {\n    var _this = this;\n\n    var url = frag.url;\n\n    if (!url) {\n      return Promise.reject(new LoadError({\n        type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].NETWORK_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].FRAG_LOAD_ERROR,\n        fatal: false,\n        frag: frag,\n        networkDetails: null\n      }, \"Fragment does not have a \" + (url ? 'part list' : 'url')));\n    }\n\n    this.abort();\n    var config = this.config;\n    var FragmentILoader = config.fLoader;\n    var DefaultILoader = config.loader;\n    return new Promise(function (resolve, reject) {\n      if (_this.loader) {\n        _this.loader.destroy();\n      }\n\n      var loader = _this.loader = frag.loader = FragmentILoader ? new FragmentILoader(config) : new DefaultILoader(config);\n      var loaderContext = createLoaderContext(frag);\n      var loaderConfig = {\n        timeout: config.fragLoadingTimeOut,\n        maxRetry: 0,\n        retryDelay: 0,\n        maxRetryDelay: config.fragLoadingMaxRetryTimeout,\n        highWaterMark: frag.sn === 'initSegment' ? Infinity : MIN_CHUNK_SIZE\n      }; // Assign frag stats to the loader's stats reference\n\n      frag.stats = loader.stats;\n      loader.load(loaderContext, loaderConfig, {\n        onSuccess: function onSuccess(response, stats, context, networkDetails) {\n          _this.resetLoader(frag, loader);\n\n          resolve({\n            frag: frag,\n            part: null,\n            payload: response.data,\n            networkDetails: networkDetails\n          });\n        },\n        onError: function onError(response, context, networkDetails) {\n          _this.resetLoader(frag, loader);\n\n          reject(new LoadError({\n            type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].NETWORK_ERROR,\n            details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].FRAG_LOAD_ERROR,\n            fatal: false,\n            frag: frag,\n            response: response,\n            networkDetails: networkDetails\n          }));\n        },\n        onAbort: function onAbort(stats, context, networkDetails) {\n          _this.resetLoader(frag, loader);\n\n          reject(new LoadError({\n            type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].NETWORK_ERROR,\n            details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].INTERNAL_ABORTED,\n            fatal: false,\n            frag: frag,\n            networkDetails: networkDetails\n          }));\n        },\n        onTimeout: function onTimeout(response, context, networkDetails) {\n          _this.resetLoader(frag, loader);\n\n          reject(new LoadError({\n            type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].NETWORK_ERROR,\n            details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].FRAG_LOAD_TIMEOUT,\n            fatal: false,\n            frag: frag,\n            networkDetails: networkDetails\n          }));\n        },\n        onProgress: function onProgress(stats, context, data, networkDetails) {\n          if (_onProgress) {\n            _onProgress({\n              frag: frag,\n              part: null,\n              payload: data,\n              networkDetails: networkDetails\n            });\n          }\n        }\n      });\n    });\n  };\n\n  _proto.loadPart = function loadPart(frag, part, onProgress) {\n    var _this2 = this;\n\n    this.abort();\n    var config = this.config;\n    var FragmentILoader = config.fLoader;\n    var DefaultILoader = config.loader;\n    return new Promise(function (resolve, reject) {\n      if (_this2.loader) {\n        _this2.loader.destroy();\n      }\n\n      var loader = _this2.loader = frag.loader = FragmentILoader ? new FragmentILoader(config) : new DefaultILoader(config);\n      var loaderContext = createLoaderContext(frag, part);\n      var loaderConfig = {\n        timeout: config.fragLoadingTimeOut,\n        maxRetry: 0,\n        retryDelay: 0,\n        maxRetryDelay: config.fragLoadingMaxRetryTimeout,\n        highWaterMark: MIN_CHUNK_SIZE\n      }; // Assign part stats to the loader's stats reference\n\n      part.stats = loader.stats;\n      loader.load(loaderContext, loaderConfig, {\n        onSuccess: function onSuccess(response, stats, context, networkDetails) {\n          _this2.resetLoader(frag, loader);\n\n          _this2.updateStatsFromPart(frag, part);\n\n          var partLoadedData = {\n            frag: frag,\n            part: part,\n            payload: response.data,\n            networkDetails: networkDetails\n          };\n          onProgress(partLoadedData);\n          resolve(partLoadedData);\n        },\n        onError: function onError(response, context, networkDetails) {\n          _this2.resetLoader(frag, loader);\n\n          reject(new LoadError({\n            type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].NETWORK_ERROR,\n            details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].FRAG_LOAD_ERROR,\n            fatal: false,\n            frag: frag,\n            part: part,\n            response: response,\n            networkDetails: networkDetails\n          }));\n        },\n        onAbort: function onAbort(stats, context, networkDetails) {\n          frag.stats.aborted = part.stats.aborted;\n\n          _this2.resetLoader(frag, loader);\n\n          reject(new LoadError({\n            type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].NETWORK_ERROR,\n            details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].INTERNAL_ABORTED,\n            fatal: false,\n            frag: frag,\n            part: part,\n            networkDetails: networkDetails\n          }));\n        },\n        onTimeout: function onTimeout(response, context, networkDetails) {\n          _this2.resetLoader(frag, loader);\n\n          reject(new LoadError({\n            type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].NETWORK_ERROR,\n            details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].FRAG_LOAD_TIMEOUT,\n            fatal: false,\n            frag: frag,\n            part: part,\n            networkDetails: networkDetails\n          }));\n        }\n      });\n    });\n  };\n\n  _proto.updateStatsFromPart = function updateStatsFromPart(frag, part) {\n    var fragStats = frag.stats;\n    var partStats = part.stats;\n    var partTotal = partStats.total;\n    fragStats.loaded += partStats.loaded;\n\n    if (partTotal) {\n      var estTotalParts = Math.round(frag.duration / part.duration);\n      var estLoadedParts = Math.min(Math.round(fragStats.loaded / partTotal), estTotalParts);\n      var estRemainingParts = estTotalParts - estLoadedParts;\n      var estRemainingBytes = estRemainingParts * Math.round(fragStats.loaded / estLoadedParts);\n      fragStats.total = fragStats.loaded + estRemainingBytes;\n    } else {\n      fragStats.total = Math.max(fragStats.loaded, fragStats.total);\n    }\n\n    var fragLoading = fragStats.loading;\n    var partLoading = partStats.loading;\n\n    if (fragLoading.start) {\n      // add to fragment loader latency\n      fragLoading.first += partLoading.first - partLoading.start;\n    } else {\n      fragLoading.start = partLoading.start;\n      fragLoading.first = partLoading.first;\n    }\n\n    fragLoading.end = partLoading.end;\n  };\n\n  _proto.resetLoader = function resetLoader(frag, loader) {\n    frag.loader = null;\n\n    if (this.loader === loader) {\n      self.clearTimeout(this.partLoadTimeout);\n      this.loader = null;\n    }\n\n    loader.destroy();\n  };\n\n  return FragmentLoader;\n}();\n\n\n\nfunction createLoaderContext(frag, part) {\n  if (part === void 0) {\n    part = null;\n  }\n\n  var segment = part || frag;\n  var loaderContext = {\n    frag: frag,\n    part: part,\n    responseType: 'arraybuffer',\n    url: segment.url,\n    headers: {},\n    rangeStart: 0,\n    rangeEnd: 0\n  };\n  var start = segment.byteRangeStartOffset;\n  var end = segment.byteRangeEndOffset;\n\n  if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(start) && Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(end)) {\n    loaderContext.rangeStart = start;\n    loaderContext.rangeEnd = end;\n  }\n\n  return loaderContext;\n}\n\nvar LoadError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(LoadError, _Error);\n\n  function LoadError(data) {\n    var _this3;\n\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n\n    _this3 = _Error.call.apply(_Error, [this].concat(params)) || this;\n    _this3.data = void 0;\n    _this3.data = data;\n    return _this3;\n  }\n\n  return LoadError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\n/***/ }),\n\n/***/ \"./src/loader/fragment.ts\":\n/*!********************************!*\\\n  !*** ./src/loader/fragment.ts ***!\n  \\********************************/\n/*! exports provided: ElementaryStreamTypes, BaseSegment, Fragment, Part */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_699224__) {\n\n\"use strict\";\n__nested_webpack_require_699224__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_699224__.d(__webpack_exports__, \"ElementaryStreamTypes\", function() { return ElementaryStreamTypes; });\n/* harmony export (binding) */ __nested_webpack_require_699224__.d(__webpack_exports__, \"BaseSegment\", function() { return BaseSegment; });\n/* harmony export (binding) */ __nested_webpack_require_699224__.d(__webpack_exports__, \"Fragment\", function() { return Fragment; });\n/* harmony export (binding) */ __nested_webpack_require_699224__.d(__webpack_exports__, \"Part\", function() { return Part; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_699224__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_699224__(/*! url-toolkit */ \"./node_modules/url-toolkit/src/url-toolkit.js\");\n/* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__nested_webpack_require_699224__.n(url_toolkit__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_699224__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _level_key__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_699224__(/*! ./level-key */ \"./src/loader/level-key.ts\");\n/* harmony import */ var _load_stats__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_699224__(/*! ./load-stats */ \"./src/loader/load-stats.ts\");\n\n\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n\n\n\nvar ElementaryStreamTypes;\n\n(function (ElementaryStreamTypes) {\n  ElementaryStreamTypes[\"AUDIO\"] = \"audio\";\n  ElementaryStreamTypes[\"VIDEO\"] = \"video\";\n  ElementaryStreamTypes[\"AUDIOVIDEO\"] = \"audiovideo\";\n})(ElementaryStreamTypes || (ElementaryStreamTypes = {}));\n\nvar BaseSegment = /*#__PURE__*/function () {\n  // baseurl is the URL to the playlist\n  // relurl is the portion of the URL that comes from inside the playlist.\n  // Holds the types of data this fragment supports\n  function BaseSegment(baseurl) {\n    var _this$elementaryStrea;\n\n    this._byteRange = null;\n    this._url = null;\n    this.baseurl = void 0;\n    this.relurl = void 0;\n    this.elementaryStreams = (_this$elementaryStrea = {}, _this$elementaryStrea[ElementaryStreamTypes.AUDIO] = null, _this$elementaryStrea[ElementaryStreamTypes.VIDEO] = null, _this$elementaryStrea[ElementaryStreamTypes.AUDIOVIDEO] = null, _this$elementaryStrea);\n    this.baseurl = baseurl;\n  } // setByteRange converts a EXT-X-BYTERANGE attribute into a two element array\n\n\n  var _proto = BaseSegment.prototype;\n\n  _proto.setByteRange = function setByteRange(value, previous) {\n    var params = value.split('@', 2);\n    var byteRange = [];\n\n    if (params.length === 1) {\n      byteRange[0] = previous ? previous.byteRangeEndOffset : 0;\n    } else {\n      byteRange[0] = parseInt(params[1]);\n    }\n\n    byteRange[1] = parseInt(params[0]) + byteRange[0];\n    this._byteRange = byteRange;\n  };\n\n  _createClass(BaseSegment, [{\n    key: \"byteRange\",\n    get: function get() {\n      if (!this._byteRange) {\n        return [];\n      }\n\n      return this._byteRange;\n    }\n  }, {\n    key: \"byteRangeStartOffset\",\n    get: function get() {\n      return this.byteRange[0];\n    }\n  }, {\n    key: \"byteRangeEndOffset\",\n    get: function get() {\n      return this.byteRange[1];\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      if (!this._url && this.baseurl && this.relurl) {\n        this._url = Object(url_toolkit__WEBPACK_IMPORTED_MODULE_1__[\"buildAbsoluteURL\"])(this.baseurl, this.relurl, {\n          alwaysNormalize: true\n        });\n      }\n\n      return this._url || '';\n    },\n    set: function set(value) {\n      this._url = value;\n    }\n  }]);\n\n  return BaseSegment;\n}();\nvar Fragment = /*#__PURE__*/function (_BaseSegment) {\n  _inheritsLoose(Fragment, _BaseSegment);\n\n  // EXTINF has to be present for a m3u8 to be considered valid\n  // sn notates the sequence number for a segment, and if set to a string can be 'initSegment'\n  // levelkey is the EXT-X-KEY that applies to this segment for decryption\n  // core difference from the private field _decryptdata is the lack of the initialized IV\n  // _decryptdata will set the IV for this segment based on the segment number in the fragment\n  // A string representing the fragment type\n  // A reference to the loader. Set while the fragment is loading, and removed afterwards. Used to abort fragment loading\n  // The level/track index to which the fragment belongs\n  // The continuity counter of the fragment\n  // The starting Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.\n  // The ending Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.\n  // The latest Presentation Time Stamp (PTS) appended to the buffer.\n  // The starting Decode Time Stamp (DTS) of the fragment. Set after transmux complete.\n  // The ending Decode Time Stamp (DTS) of the fragment. Set after transmux complete.\n  // The start time of the fragment, as listed in the manifest. Updated after transmux complete.\n  // Set by `updateFragPTSDTS` in level-helper\n  // The maximum starting Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.\n  // The minimum ending Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.\n  // Load/parse timing information\n  // A flag indicating whether the segment was downloaded in order to test bitrate, and was not buffered\n  // #EXTINF  segment title\n  // The Media Initialization Section for this segment\n  function Fragment(type, baseurl) {\n    var _this;\n\n    _this = _BaseSegment.call(this, baseurl) || this;\n    _this._decryptdata = null;\n    _this.rawProgramDateTime = null;\n    _this.programDateTime = null;\n    _this.tagList = [];\n    _this.duration = 0;\n    _this.sn = 0;\n    _this.levelkey = void 0;\n    _this.type = void 0;\n    _this.loader = null;\n    _this.level = -1;\n    _this.cc = 0;\n    _this.startPTS = void 0;\n    _this.endPTS = void 0;\n    _this.appendedPTS = void 0;\n    _this.startDTS = void 0;\n    _this.endDTS = void 0;\n    _this.start = 0;\n    _this.deltaPTS = void 0;\n    _this.maxStartPTS = void 0;\n    _this.minEndPTS = void 0;\n    _this.stats = new _load_stats__WEBPACK_IMPORTED_MODULE_4__[\"LoadStats\"]();\n    _this.urlId = 0;\n    _this.data = void 0;\n    _this.bitrateTest = false;\n    _this.title = null;\n    _this.initSegment = null;\n    _this.type = type;\n    return _this;\n  }\n\n  var _proto2 = Fragment.prototype;\n\n  /**\n   * Utility method for parseLevelPlaylist to create an initialization vector for a given segment\n   * @param {number} segmentNumber - segment number to generate IV with\n   * @returns {Uint8Array}\n   */\n  _proto2.createInitializationVector = function createInitializationVector(segmentNumber) {\n    var uint8View = new Uint8Array(16);\n\n    for (var i = 12; i < 16; i++) {\n      uint8View[i] = segmentNumber >> 8 * (15 - i) & 0xff;\n    }\n\n    return uint8View;\n  }\n  /**\n   * Utility method for parseLevelPlaylist to get a fragment's decryption data from the currently parsed encryption key data\n   * @param levelkey - a playlist's encryption info\n   * @param segmentNumber - the fragment's segment number\n   * @returns {LevelKey} - an object to be applied as a fragment's decryptdata\n   */\n  ;\n\n  _proto2.setDecryptDataFromLevelKey = function setDecryptDataFromLevelKey(levelkey, segmentNumber) {\n    var decryptdata = levelkey;\n\n    if ((levelkey === null || levelkey === void 0 ? void 0 : levelkey.method) === 'AES-128' && levelkey.uri && !levelkey.iv) {\n      decryptdata = _level_key__WEBPACK_IMPORTED_MODULE_3__[\"LevelKey\"].fromURI(levelkey.uri);\n      decryptdata.method = levelkey.method;\n      decryptdata.iv = this.createInitializationVector(segmentNumber);\n      decryptdata.keyFormat = 'identity';\n    }\n\n    return decryptdata;\n  };\n\n  _proto2.setElementaryStreamInfo = function setElementaryStreamInfo(type, startPTS, endPTS, startDTS, endDTS, partial) {\n    if (partial === void 0) {\n      partial = false;\n    }\n\n    var elementaryStreams = this.elementaryStreams;\n    var info = elementaryStreams[type];\n\n    if (!info) {\n      elementaryStreams[type] = {\n        startPTS: startPTS,\n        endPTS: endPTS,\n        startDTS: startDTS,\n        endDTS: endDTS,\n        partial: partial\n      };\n      return;\n    }\n\n    info.startPTS = Math.min(info.startPTS, startPTS);\n    info.endPTS = Math.max(info.endPTS, endPTS);\n    info.startDTS = Math.min(info.startDTS, startDTS);\n    info.endDTS = Math.max(info.endDTS, endDTS);\n  };\n\n  _proto2.clearElementaryStreamInfo = function clearElementaryStreamInfo() {\n    var elementaryStreams = this.elementaryStreams;\n    elementaryStreams[ElementaryStreamTypes.AUDIO] = null;\n    elementaryStreams[ElementaryStreamTypes.VIDEO] = null;\n    elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO] = null;\n  };\n\n  _createClass(Fragment, [{\n    key: \"decryptdata\",\n    get: function get() {\n      if (!this.levelkey && !this._decryptdata) {\n        return null;\n      }\n\n      if (!this._decryptdata && this.levelkey) {\n        var sn = this.sn;\n\n        if (typeof sn !== 'number') {\n          // We are fetching decryption data for a initialization segment\n          // If the segment was encrypted with AES-128\n          // It must have an IV defined. We cannot substitute the Segment Number in.\n          if (this.levelkey && this.levelkey.method === 'AES-128' && !this.levelkey.iv) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn(\"missing IV for initialization segment with method=\\\"\" + this.levelkey.method + \"\\\" - compliance issue\");\n          }\n          /*\n          Be converted to a Number.\n          'initSegment' will become NaN.\n          NaN, which when converted through ToInt32() -> +0.\n          ---\n          Explicitly set sn to resulting value from implicit conversions 'initSegment' values for IV generation.\n          */\n\n\n          sn = 0;\n        }\n\n        this._decryptdata = this.setDecryptDataFromLevelKey(this.levelkey, sn);\n      }\n\n      return this._decryptdata;\n    }\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this.start + this.duration;\n    }\n  }, {\n    key: \"endProgramDateTime\",\n    get: function get() {\n      if (this.programDateTime === null) {\n        return null;\n      }\n\n      if (!Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(this.programDateTime)) {\n        return null;\n      }\n\n      var duration = !Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(this.duration) ? 0 : this.duration;\n      return this.programDateTime + duration * 1000;\n    }\n  }, {\n    key: \"encrypted\",\n    get: function get() {\n      var _this$decryptdata;\n\n      // At the m3u8-parser level we need to add support for manifest signalled keyformats\n      // when we want the fragment to start reporting that it is encrypted.\n      // Currently, keyFormat will only be set for identity keys\n      if ((_this$decryptdata = this.decryptdata) !== null && _this$decryptdata !== void 0 && _this$decryptdata.keyFormat && this.decryptdata.uri) {\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return Fragment;\n}(BaseSegment);\nvar Part = /*#__PURE__*/function (_BaseSegment2) {\n  _inheritsLoose(Part, _BaseSegment2);\n\n  function Part(partAttrs, frag, baseurl, index, previous) {\n    var _this2;\n\n    _this2 = _BaseSegment2.call(this, baseurl) || this;\n    _this2.fragOffset = 0;\n    _this2.duration = 0;\n    _this2.gap = false;\n    _this2.independent = false;\n    _this2.relurl = void 0;\n    _this2.fragment = void 0;\n    _this2.index = void 0;\n    _this2.stats = new _load_stats__WEBPACK_IMPORTED_MODULE_4__[\"LoadStats\"]();\n    _this2.duration = partAttrs.decimalFloatingPoint('DURATION');\n    _this2.gap = partAttrs.bool('GAP');\n    _this2.independent = partAttrs.bool('INDEPENDENT');\n    _this2.relurl = partAttrs.enumeratedString('URI');\n    _this2.fragment = frag;\n    _this2.index = index;\n    var byteRange = partAttrs.enumeratedString('BYTERANGE');\n\n    if (byteRange) {\n      _this2.setByteRange(byteRange, previous);\n    }\n\n    if (previous) {\n      _this2.fragOffset = previous.fragOffset + previous.duration;\n    }\n\n    return _this2;\n  }\n\n  _createClass(Part, [{\n    key: \"start\",\n    get: function get() {\n      return this.fragment.start + this.fragOffset;\n    }\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this.start + this.duration;\n    }\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      var elementaryStreams = this.elementaryStreams;\n      return !!(elementaryStreams.audio || elementaryStreams.video || elementaryStreams.audiovideo);\n    }\n  }]);\n\n  return Part;\n}(BaseSegment);\n\n/***/ }),\n\n/***/ \"./src/loader/key-loader.ts\":\n/*!**********************************!*\\\n  !*** ./src/loader/key-loader.ts ***!\n  \\**********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_713211__) {\n\n\"use strict\";\n__nested_webpack_require_713211__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_713211__.d(__webpack_exports__, \"default\", function() { return KeyLoader; });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_713211__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_713211__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_713211__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/*\n * Decrypt key Loader\n */\n\n\n\n\nvar KeyLoader = /*#__PURE__*/function () {\n  function KeyLoader(hls) {\n    this.hls = void 0;\n    this.loaders = {};\n    this.decryptkey = null;\n    this.decrypturl = null;\n    this.hls = hls;\n    this.registerListeners();\n  }\n\n  var _proto = KeyLoader.prototype;\n\n  _proto.startLoad = function startLoad(startPosition) {};\n\n  _proto.stopLoad = function stopLoad() {\n    this.destroyInternalLoaders();\n  };\n\n  _proto.registerListeners = function registerListeners() {\n    this.hls.on(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].KEY_LOADING, this.onKeyLoading, this);\n  };\n\n  _proto.unregisterListeners = function unregisterListeners() {\n    this.hls.off(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].KEY_LOADING, this.onKeyLoading);\n  };\n\n  _proto.destroyInternalLoaders = function destroyInternalLoaders() {\n    for (var loaderName in this.loaders) {\n      var loader = this.loaders[loaderName];\n\n      if (loader) {\n        loader.destroy();\n      }\n    }\n\n    this.loaders = {};\n  };\n\n  _proto.destroy = function destroy() {\n    this.unregisterListeners();\n    this.destroyInternalLoaders();\n  };\n\n  _proto.onKeyLoading = function onKeyLoading(event, data) {\n    var frag = data.frag;\n    var type = frag.type;\n    var loader = this.loaders[type];\n\n    if (!frag.decryptdata) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn('Missing decryption data on fragment in onKeyLoading');\n      return;\n    } // Load the key if the uri is different from previous one, or if the decrypt key has not yet been retrieved\n\n\n    var uri = frag.decryptdata.uri;\n\n    if (uri !== this.decrypturl || this.decryptkey === null) {\n      var config = this.hls.config;\n\n      if (loader) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn(\"abort previous key loader for type:\" + type);\n        loader.abort();\n      }\n\n      if (!uri) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].warn('key uri is falsy');\n        return;\n      }\n\n      var Loader = config.loader;\n      var fragLoader = frag.loader = this.loaders[type] = new Loader(config);\n      this.decrypturl = uri;\n      this.decryptkey = null;\n      var loaderContext = {\n        url: uri,\n        frag: frag,\n        responseType: 'arraybuffer'\n      }; // maxRetry is 0 so that instead of retrying the same key on the same variant multiple times,\n      // key-loader will trigger an error and rely on stream-controller to handle retry logic.\n      // this will also align retry logic with fragment-loader\n\n      var loaderConfig = {\n        timeout: config.fragLoadingTimeOut,\n        maxRetry: 0,\n        retryDelay: config.fragLoadingRetryDelay,\n        maxRetryDelay: config.fragLoadingMaxRetryTimeout,\n        highWaterMark: 0\n      };\n      var loaderCallbacks = {\n        onSuccess: this.loadsuccess.bind(this),\n        onError: this.loaderror.bind(this),\n        onTimeout: this.loadtimeout.bind(this)\n      };\n      fragLoader.load(loaderContext, loaderConfig, loaderCallbacks);\n    } else if (this.decryptkey) {\n      // Return the key if it's already been loaded\n      frag.decryptdata.key = this.decryptkey;\n      this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].KEY_LOADED, {\n        frag: frag\n      });\n    }\n  };\n\n  _proto.loadsuccess = function loadsuccess(response, stats, context) {\n    var frag = context.frag;\n\n    if (!frag.decryptdata) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_2__[\"logger\"].error('after key load, decryptdata unset');\n      return;\n    }\n\n    this.decryptkey = frag.decryptdata.key = new Uint8Array(response.data); // detach fragment loader on load success\n\n    frag.loader = null;\n    delete this.loaders[frag.type];\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].KEY_LOADED, {\n      frag: frag\n    });\n  };\n\n  _proto.loaderror = function loaderror(response, context) {\n    var frag = context.frag;\n    var loader = frag.loader;\n\n    if (loader) {\n      loader.abort();\n    }\n\n    delete this.loaders[frag.type];\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, {\n      type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].NETWORK_ERROR,\n      details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].KEY_LOAD_ERROR,\n      fatal: false,\n      frag: frag,\n      response: response\n    });\n  };\n\n  _proto.loadtimeout = function loadtimeout(stats, context) {\n    var frag = context.frag;\n    var loader = frag.loader;\n\n    if (loader) {\n      loader.abort();\n    }\n\n    delete this.loaders[frag.type];\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].ERROR, {\n      type: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorTypes\"].NETWORK_ERROR,\n      details: _errors__WEBPACK_IMPORTED_MODULE_1__[\"ErrorDetails\"].KEY_LOAD_TIMEOUT,\n      fatal: false,\n      frag: frag\n    });\n  };\n\n  return KeyLoader;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/loader/level-details.ts\":\n/*!*************************************!*\\\n  !*** ./src/loader/level-details.ts ***!\n  \\*************************************/\n/*! exports provided: LevelDetails */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_718921__) {\n\n\"use strict\";\n__nested_webpack_require_718921__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_718921__.d(__webpack_exports__, \"LevelDetails\", function() { return LevelDetails; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_718921__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar DEFAULT_TARGET_DURATION = 10;\nvar LevelDetails = /*#__PURE__*/function () {\n  // Manifest reload synchronization\n  function LevelDetails(baseUrl) {\n    this.PTSKnown = false;\n    this.alignedSliding = false;\n    this.averagetargetduration = void 0;\n    this.endCC = 0;\n    this.endSN = 0;\n    this.fragments = void 0;\n    this.fragmentHint = void 0;\n    this.partList = null;\n    this.dateRanges = void 0;\n    this.live = true;\n    this.ageHeader = 0;\n    this.advancedDateTime = void 0;\n    this.updated = true;\n    this.advanced = true;\n    this.availabilityDelay = void 0;\n    this.misses = 0;\n    this.needSidxRanges = false;\n    this.startCC = 0;\n    this.startSN = 0;\n    this.startTimeOffset = null;\n    this.targetduration = 0;\n    this.totalduration = 0;\n    this.type = null;\n    this.url = void 0;\n    this.m3u8 = '';\n    this.version = null;\n    this.canBlockReload = false;\n    this.canSkipUntil = 0;\n    this.canSkipDateRanges = false;\n    this.skippedSegments = 0;\n    this.recentlyRemovedDateranges = void 0;\n    this.partHoldBack = 0;\n    this.holdBack = 0;\n    this.partTarget = 0;\n    this.preloadHint = void 0;\n    this.renditionReports = void 0;\n    this.tuneInGoal = 0;\n    this.deltaUpdateFailed = void 0;\n    this.driftStartTime = 0;\n    this.driftEndTime = 0;\n    this.driftStart = 0;\n    this.driftEnd = 0;\n    this.fragments = [];\n    this.dateRanges = {};\n    this.url = baseUrl;\n  }\n\n  var _proto = LevelDetails.prototype;\n\n  _proto.reloaded = function reloaded(previous) {\n    if (!previous) {\n      this.advanced = true;\n      this.updated = true;\n      return;\n    }\n\n    var partSnDiff = this.lastPartSn - previous.lastPartSn;\n    var partIndexDiff = this.lastPartIndex - previous.lastPartIndex;\n    this.updated = this.endSN !== previous.endSN || !!partIndexDiff || !!partSnDiff;\n    this.advanced = this.endSN > previous.endSN || partSnDiff > 0 || partSnDiff === 0 && partIndexDiff > 0;\n\n    if (this.updated || this.advanced) {\n      this.misses = Math.floor(previous.misses * 0.6);\n    } else {\n      this.misses = previous.misses + 1;\n    }\n\n    this.availabilityDelay = previous.availabilityDelay;\n  };\n\n  _createClass(LevelDetails, [{\n    key: \"hasProgramDateTime\",\n    get: function get() {\n      if (this.fragments.length) {\n        return Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(this.fragments[this.fragments.length - 1].programDateTime);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"levelTargetDuration\",\n    get: function get() {\n      return this.averagetargetduration || this.targetduration || DEFAULT_TARGET_DURATION;\n    }\n  }, {\n    key: \"drift\",\n    get: function get() {\n      var runTime = this.driftEndTime - this.driftStartTime;\n\n      if (runTime > 0) {\n        var runDuration = this.driftEnd - this.driftStart;\n        return runDuration * 1000 / runTime;\n      }\n\n      return 1;\n    }\n  }, {\n    key: \"edge\",\n    get: function get() {\n      return this.partEnd || this.fragmentEnd;\n    }\n  }, {\n    key: \"partEnd\",\n    get: function get() {\n      var _this$partList;\n\n      if ((_this$partList = this.partList) !== null && _this$partList !== void 0 && _this$partList.length) {\n        return this.partList[this.partList.length - 1].end;\n      }\n\n      return this.fragmentEnd;\n    }\n  }, {\n    key: \"fragmentEnd\",\n    get: function get() {\n      var _this$fragments;\n\n      if ((_this$fragments = this.fragments) !== null && _this$fragments !== void 0 && _this$fragments.length) {\n        return this.fragments[this.fragments.length - 1].end;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"age\",\n    get: function get() {\n      if (this.advancedDateTime) {\n        return Math.max(Date.now() - this.advancedDateTime, 0) / 1000;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"lastPartIndex\",\n    get: function get() {\n      var _this$partList2;\n\n      if ((_this$partList2 = this.partList) !== null && _this$partList2 !== void 0 && _this$partList2.length) {\n        return this.partList[this.partList.length - 1].index;\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"lastPartSn\",\n    get: function get() {\n      var _this$partList3;\n\n      if ((_this$partList3 = this.partList) !== null && _this$partList3 !== void 0 && _this$partList3.length) {\n        return this.partList[this.partList.length - 1].fragment.sn;\n      }\n\n      return this.endSN;\n    }\n  }]);\n\n  return LevelDetails;\n}();\n\n/***/ }),\n\n/***/ \"./src/loader/level-key.ts\":\n/*!*********************************!*\\\n  !*** ./src/loader/level-key.ts ***!\n  \\*********************************/\n/*! exports provided: LevelKey */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_724588__) {\n\n\"use strict\";\n__nested_webpack_require_724588__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_724588__.d(__webpack_exports__, \"LevelKey\", function() { return LevelKey; });\n/* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_724588__(/*! url-toolkit */ \"./node_modules/url-toolkit/src/url-toolkit.js\");\n/* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nested_webpack_require_724588__.n(url_toolkit__WEBPACK_IMPORTED_MODULE_0__);\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\nvar LevelKey = /*#__PURE__*/function () {\n  LevelKey.fromURL = function fromURL(baseUrl, relativeUrl) {\n    return new LevelKey(baseUrl, relativeUrl);\n  };\n\n  LevelKey.fromURI = function fromURI(uri) {\n    return new LevelKey(uri);\n  };\n\n  function LevelKey(absoluteOrBaseURI, relativeURL) {\n    this._uri = null;\n    this.method = null;\n    this.keyFormat = null;\n    this.keyFormatVersions = null;\n    this.keyID = null;\n    this.key = null;\n    this.iv = null;\n\n    if (relativeURL) {\n      this._uri = Object(url_toolkit__WEBPACK_IMPORTED_MODULE_0__[\"buildAbsoluteURL\"])(absoluteOrBaseURI, relativeURL, {\n        alwaysNormalize: true\n      });\n    } else {\n      this._uri = absoluteOrBaseURI;\n    }\n  }\n\n  _createClass(LevelKey, [{\n    key: \"uri\",\n    get: function get() {\n      return this._uri;\n    }\n  }]);\n\n  return LevelKey;\n}();\n\n/***/ }),\n\n/***/ \"./src/loader/load-stats.ts\":\n/*!**********************************!*\\\n  !*** ./src/loader/load-stats.ts ***!\n  \\**********************************/\n/*! exports provided: LoadStats */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_726797__) {\n\n\"use strict\";\n__nested_webpack_require_726797__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_726797__.d(__webpack_exports__, \"LoadStats\", function() { return LoadStats; });\nvar LoadStats = function LoadStats() {\n  this.aborted = false;\n  this.loaded = 0;\n  this.retry = 0;\n  this.total = 0;\n  this.chunkCount = 0;\n  this.bwEstimate = 0;\n  this.loading = {\n    start: 0,\n    first: 0,\n    end: 0\n  };\n  this.parsing = {\n    start: 0,\n    end: 0\n  };\n  this.buffering = {\n    start: 0,\n    first: 0,\n    end: 0\n  };\n};\n\n/***/ }),\n\n/***/ \"./src/loader/m3u8-parser.ts\":\n/*!***********************************!*\\\n  !*** ./src/loader/m3u8-parser.ts ***!\n  \\***********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_727594__) {\n\n\"use strict\";\n__nested_webpack_require_727594__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_727594__.d(__webpack_exports__, \"default\", function() { return M3U8Parser; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_727594__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_727594__(/*! url-toolkit */ \"./node_modules/url-toolkit/src/url-toolkit.js\");\n/* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__nested_webpack_require_727594__.n(url_toolkit__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _date_range__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_727594__(/*! ./date-range */ \"./src/loader/date-range.ts\");\n/* harmony import */ var _fragment__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_727594__(/*! ./fragment */ \"./src/loader/fragment.ts\");\n/* harmony import */ var _level_details__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_727594__(/*! ./level-details */ \"./src/loader/level-details.ts\");\n/* harmony import */ var _level_key__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_727594__(/*! ./level-key */ \"./src/loader/level-key.ts\");\n/* harmony import */ var _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_727594__(/*! ../utils/attr-list */ \"./src/utils/attr-list.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_727594__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _utils_codecs__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_727594__(/*! ../utils/codecs */ \"./src/utils/codecs.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n// https://regex101.com is your friend\nvar MASTER_PLAYLIST_REGEX = /#EXT-X-STREAM-INF:([^\\r\\n]*)(?:[\\r\\n](?:#[^\\r\\n]*)?)*([^\\r\\n]+)|#EXT-X-SESSION-DATA:([^\\r\\n]*)[\\r\\n]+/g;\nvar MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;\nvar LEVEL_PLAYLIST_REGEX_FAST = new RegExp([/#EXTINF:\\s*(\\d*(?:\\.\\d+)?)(?:,(.*)\\s+)?/.source, // duration (#EXTINF:<duration>,<title>), group 1 => duration, group 2 => title\n/(?!#) *(\\S[\\S ]*)/.source, // segment URI, group 3 => the URI (note newline is not eaten)\n/#EXT-X-BYTERANGE:*(.+)/.source, // next segment's byterange, group 4 => range spec (x@y)\n/#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, // next segment's program date/time group 5 => the datetime spec\n/#.*/.source // All other non-segment oriented tags will match with all groups empty\n].join('|'), 'g');\nvar LEVEL_PLAYLIST_REGEX_SLOW = new RegExp([/#(EXTM3U)/.source, /#EXT-X-(DATERANGE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/.source, /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\\d+)/.source, /#EXT-X-(DISCONTINUITY|ENDLIST|GAP)/.source, /(#)([^:]*):(.*)/.source, /(#)(.*)(?:.*)\\r?\\n?/.source].join('|'));\nvar MP4_REGEX_SUFFIX = /\\.(mp4|m4s|m4v|m4a)$/i;\n\nfunction isMP4Url(url) {\n  var _URLToolkit$parseURL$, _URLToolkit$parseURL;\n\n  return MP4_REGEX_SUFFIX.test((_URLToolkit$parseURL$ = (_URLToolkit$parseURL = url_toolkit__WEBPACK_IMPORTED_MODULE_1__[\"parseURL\"](url)) === null || _URLToolkit$parseURL === void 0 ? void 0 : _URLToolkit$parseURL.path) != null ? _URLToolkit$parseURL$ : '');\n}\n\nvar M3U8Parser = /*#__PURE__*/function () {\n  function M3U8Parser() {}\n\n  M3U8Parser.findGroup = function findGroup(groups, mediaGroupId) {\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n\n      if (group.id === mediaGroupId) {\n        return group;\n      }\n    }\n  };\n\n  M3U8Parser.convertAVC1ToAVCOTI = function convertAVC1ToAVCOTI(codec) {\n    // Convert avc1 codec string from RFC-4281 to RFC-6381 for MediaSource.isTypeSupported\n    var avcdata = codec.split('.');\n\n    if (avcdata.length > 2) {\n      var result = avcdata.shift() + '.';\n      result += parseInt(avcdata.shift()).toString(16);\n      result += ('000' + parseInt(avcdata.shift()).toString(16)).slice(-4);\n      return result;\n    }\n\n    return codec;\n  };\n\n  M3U8Parser.resolve = function resolve(url, baseUrl) {\n    return url_toolkit__WEBPACK_IMPORTED_MODULE_1__[\"buildAbsoluteURL\"](baseUrl, url, {\n      alwaysNormalize: true\n    });\n  };\n\n  M3U8Parser.parseMasterPlaylist = function parseMasterPlaylist(string, baseurl) {\n    var levels = [];\n    var sessionData = {};\n    var hasSessionData = false;\n    MASTER_PLAYLIST_REGEX.lastIndex = 0;\n    var result;\n\n    while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null) {\n      if (result[1]) {\n        // '#EXT-X-STREAM-INF' is found, parse level tag  in group 1\n        var attrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__[\"AttrList\"](result[1]);\n        var level = {\n          attrs: attrs,\n          bitrate: attrs.decimalInteger('AVERAGE-BANDWIDTH') || attrs.decimalInteger('BANDWIDTH'),\n          name: attrs.NAME,\n          url: M3U8Parser.resolve(result[2], baseurl)\n        };\n        var resolution = attrs.decimalResolution('RESOLUTION');\n\n        if (resolution) {\n          level.width = resolution.width;\n          level.height = resolution.height;\n        }\n\n        setCodecs((attrs.CODECS || '').split(/[ ,]+/).filter(function (c) {\n          return c;\n        }), level);\n\n        if (level.videoCodec && level.videoCodec.indexOf('avc1') !== -1) {\n          level.videoCodec = M3U8Parser.convertAVC1ToAVCOTI(level.videoCodec);\n        }\n\n        levels.push(level);\n      } else if (result[3]) {\n        // '#EXT-X-SESSION-DATA' is found, parse session data in group 3\n        var sessionAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__[\"AttrList\"](result[3]);\n\n        if (sessionAttrs['DATA-ID']) {\n          hasSessionData = true;\n          sessionData[sessionAttrs['DATA-ID']] = sessionAttrs;\n        }\n      }\n    }\n\n    return {\n      levels: levels,\n      sessionData: hasSessionData ? sessionData : null\n    };\n  };\n\n  M3U8Parser.parseMasterPlaylistMedia = function parseMasterPlaylistMedia(string, baseurl, type, groups) {\n    if (groups === void 0) {\n      groups = [];\n    }\n\n    var result;\n    var medias = [];\n    var id = 0;\n    MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;\n\n    while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) !== null) {\n      var attrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__[\"AttrList\"](result[1]);\n\n      if (attrs.TYPE === type) {\n        var media = {\n          attrs: attrs,\n          bitrate: 0,\n          id: id++,\n          groupId: attrs['GROUP-ID'],\n          instreamId: attrs['INSTREAM-ID'],\n          name: attrs.NAME || attrs.LANGUAGE || '',\n          type: type,\n          default: attrs.bool('DEFAULT'),\n          autoselect: attrs.bool('AUTOSELECT'),\n          forced: attrs.bool('FORCED'),\n          lang: attrs.LANGUAGE,\n          url: attrs.URI ? M3U8Parser.resolve(attrs.URI, baseurl) : ''\n        };\n\n        if (groups.length) {\n          // If there are audio or text groups signalled in the manifest, let's look for a matching codec string for this track\n          // If we don't find the track signalled, lets use the first audio groups codec we have\n          // Acting as a best guess\n          var groupCodec = M3U8Parser.findGroup(groups, media.groupId) || groups[0];\n          assignCodec(media, groupCodec, 'audioCodec');\n          assignCodec(media, groupCodec, 'textCodec');\n        }\n\n        medias.push(media);\n      }\n    }\n\n    return medias;\n  };\n\n  M3U8Parser.parseLevelPlaylist = function parseLevelPlaylist(string, baseurl, id, type, levelUrlId) {\n    var level = new _level_details__WEBPACK_IMPORTED_MODULE_4__[\"LevelDetails\"](baseurl);\n    var fragments = level.fragments; // The most recent init segment seen (applies to all subsequent segments)\n\n    var currentInitSegment = null;\n    var currentSN = 0;\n    var currentPart = 0;\n    var totalduration = 0;\n    var discontinuityCounter = 0;\n    var prevFrag = null;\n    var frag = new _fragment__WEBPACK_IMPORTED_MODULE_3__[\"Fragment\"](type, baseurl);\n    var result;\n    var i;\n    var levelkey;\n    var firstPdtIndex = -1;\n    var createNextFrag = false;\n    LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;\n    level.m3u8 = string;\n\n    while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {\n      if (createNextFrag) {\n        createNextFrag = false;\n        frag = new _fragment__WEBPACK_IMPORTED_MODULE_3__[\"Fragment\"](type, baseurl); // setup the next fragment for part loading\n\n        frag.start = totalduration;\n        frag.sn = currentSN;\n        frag.cc = discontinuityCounter;\n        frag.level = id;\n\n        if (currentInitSegment) {\n          frag.initSegment = currentInitSegment;\n          frag.rawProgramDateTime = currentInitSegment.rawProgramDateTime;\n          currentInitSegment.rawProgramDateTime = null;\n        }\n      }\n\n      var duration = result[1];\n\n      if (duration) {\n        // INF\n        frag.duration = parseFloat(duration); // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n\n        var title = (' ' + result[2]).slice(1);\n        frag.title = title || null;\n        frag.tagList.push(title ? ['INF', duration, title] : ['INF', duration]);\n      } else if (result[3]) {\n        // url\n        if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(frag.duration)) {\n          frag.start = totalduration;\n\n          if (levelkey) {\n            frag.levelkey = levelkey;\n          }\n\n          frag.sn = currentSN;\n          frag.level = id;\n          frag.cc = discontinuityCounter;\n          frag.urlId = levelUrlId;\n          fragments.push(frag); // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n\n          frag.relurl = (' ' + result[3]).slice(1);\n          assignProgramDateTime(frag, prevFrag);\n          prevFrag = frag;\n          totalduration += frag.duration;\n          currentSN++;\n          currentPart = 0;\n          createNextFrag = true;\n        }\n      } else if (result[4]) {\n        // X-BYTERANGE\n        var data = (' ' + result[4]).slice(1);\n\n        if (prevFrag) {\n          frag.setByteRange(data, prevFrag);\n        } else {\n          frag.setByteRange(data);\n        }\n      } else if (result[5]) {\n        // PROGRAM-DATE-TIME\n        // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n        frag.rawProgramDateTime = (' ' + result[5]).slice(1);\n        frag.tagList.push(['PROGRAM-DATE-TIME', frag.rawProgramDateTime]);\n\n        if (firstPdtIndex === -1) {\n          firstPdtIndex = fragments.length;\n        }\n      } else {\n        result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);\n\n        if (!result) {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_7__[\"logger\"].warn('No matches on slow regex match for level playlist!');\n          continue;\n        }\n\n        for (i = 1; i < result.length; i++) {\n          if (typeof result[i] !== 'undefined') {\n            break;\n          }\n        } // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n\n\n        var tag = (' ' + result[i]).slice(1);\n        var value1 = (' ' + result[i + 1]).slice(1);\n        var value2 = result[i + 2] ? (' ' + result[i + 2]).slice(1) : '';\n\n        switch (tag) {\n          case 'PLAYLIST-TYPE':\n            level.type = value1.toUpperCase();\n            break;\n\n          case 'MEDIA-SEQUENCE':\n            currentSN = level.startSN = parseInt(value1);\n            break;\n\n          case 'SKIP':\n            {\n              var skipAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__[\"AttrList\"](value1);\n              var skippedSegments = skipAttrs.decimalInteger('SKIPPED-SEGMENTS');\n\n              if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(skippedSegments)) {\n                level.skippedSegments = skippedSegments; // This will result in fragments[] containing undefined values, which we will fill in with `mergeDetails`\n\n                for (var _i = skippedSegments; _i--;) {\n                  fragments.unshift(null);\n                }\n\n                currentSN += skippedSegments;\n              }\n\n              var recentlyRemovedDateranges = skipAttrs.enumeratedString('RECENTLY-REMOVED-DATERANGES');\n\n              if (recentlyRemovedDateranges) {\n                level.recentlyRemovedDateranges = recentlyRemovedDateranges.split('\\t');\n              }\n\n              break;\n            }\n\n          case 'TARGETDURATION':\n            level.targetduration = parseFloat(value1);\n            break;\n\n          case 'VERSION':\n            level.version = parseInt(value1);\n            break;\n\n          case 'EXTM3U':\n            break;\n\n          case 'ENDLIST':\n            level.live = false;\n            break;\n\n          case '#':\n            if (value1 || value2) {\n              frag.tagList.push(value2 ? [value1, value2] : [value1]);\n            }\n\n            break;\n\n          case 'DISCONTINUITY':\n            discontinuityCounter++;\n            frag.tagList.push(['DIS']);\n            break;\n\n          case 'GAP':\n            frag.tagList.push([tag]);\n            break;\n\n          case 'BITRATE':\n            frag.tagList.push([tag, value1]);\n            break;\n\n          case 'DATERANGE':\n            {\n              var dateRangeAttr = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__[\"AttrList\"](value1);\n              var dateRange = new _date_range__WEBPACK_IMPORTED_MODULE_2__[\"DateRange\"](dateRangeAttr, level.dateRanges[dateRangeAttr.ID]);\n\n              if (dateRange.isValid || level.skippedSegments) {\n                level.dateRanges[dateRange.id] = dateRange;\n              } else {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_7__[\"logger\"].warn(\"Ignoring invalid DATERANGE tag: \\\"\" + value1 + \"\\\"\");\n              } // Add to fragment tag list for backwards compatibility (< v1.2.0)\n\n\n              frag.tagList.push(['EXT-X-DATERANGE', value1]);\n              break;\n            }\n\n          case 'DISCONTINUITY-SEQUENCE':\n            discontinuityCounter = parseInt(value1);\n            break;\n\n          case 'KEY':\n            {\n              var _keyAttrs$enumeratedS;\n\n              // https://tools.ietf.org/html/rfc8216#section-4.3.2.4\n              var keyAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__[\"AttrList\"](value1);\n              var decryptmethod = keyAttrs.enumeratedString('METHOD');\n              var decrypturi = keyAttrs.URI;\n              var decryptiv = keyAttrs.hexadecimalInteger('IV');\n              var decryptkeyformatversions = keyAttrs.enumeratedString('KEYFORMATVERSIONS');\n              var decryptkeyid = keyAttrs.enumeratedString('KEYID'); // From RFC: This attribute is OPTIONAL; its absence indicates an implicit value of \"identity\".\n\n              var decryptkeyformat = (_keyAttrs$enumeratedS = keyAttrs.enumeratedString('KEYFORMAT')) != null ? _keyAttrs$enumeratedS : 'identity';\n              var unsupportedKnownKeyformatsInManifest = ['com.apple.streamingkeydelivery', 'com.microsoft.playready', 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed', // widevine (v2)\n              'com.widevine' // earlier widevine (v1)\n              ];\n\n              if (unsupportedKnownKeyformatsInManifest.indexOf(decryptkeyformat) > -1) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_7__[\"logger\"].warn(\"Keyformat \" + decryptkeyformat + \" is not supported from the manifest\");\n                continue;\n              } else if (decryptkeyformat !== 'identity') {\n                // We are supposed to skip keys we don't understand.\n                // As we currently only officially support identity keys\n                // from the manifest we shouldn't save any other key.\n                continue;\n              } // TODO: multiple keys can be defined on a fragment, and we need to support this\n              // for clients that support both playready and widevine\n\n\n              if (decryptmethod) {\n                // TODO: need to determine if the level key is actually a relative URL\n                // if it isn't, then we should instead construct the LevelKey using fromURI.\n                levelkey = _level_key__WEBPACK_IMPORTED_MODULE_5__[\"LevelKey\"].fromURL(baseurl, decrypturi);\n\n                if (decrypturi && ['AES-128', 'SAMPLE-AES', 'SAMPLE-AES-CENC'].indexOf(decryptmethod) >= 0) {\n                  levelkey.method = decryptmethod;\n                  levelkey.keyFormat = decryptkeyformat;\n\n                  if (decryptkeyid) {\n                    levelkey.keyID = decryptkeyid;\n                  }\n\n                  if (decryptkeyformatversions) {\n                    levelkey.keyFormatVersions = decryptkeyformatversions;\n                  } // Initialization Vector (IV)\n\n\n                  levelkey.iv = decryptiv;\n                }\n              }\n\n              break;\n            }\n\n          case 'START':\n            {\n              var startAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__[\"AttrList\"](value1);\n              var startTimeOffset = startAttrs.decimalFloatingPoint('TIME-OFFSET'); // TIME-OFFSET can be 0\n\n              if (Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(startTimeOffset)) {\n                level.startTimeOffset = startTimeOffset;\n              }\n\n              break;\n            }\n\n          case 'MAP':\n            {\n              var mapAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__[\"AttrList\"](value1);\n\n              if (frag.duration) {\n                // Initial segment tag is after segment duration tag.\n                //   #EXTINF: 6.0\n                //   #EXT-X-MAP:URI=\"init.mp4\n                var init = new _fragment__WEBPACK_IMPORTED_MODULE_3__[\"Fragment\"](type, baseurl);\n                setInitSegment(init, mapAttrs, id, levelkey);\n                currentInitSegment = init;\n                frag.initSegment = currentInitSegment;\n\n                if (currentInitSegment.rawProgramDateTime && !frag.rawProgramDateTime) {\n                  frag.rawProgramDateTime = currentInitSegment.rawProgramDateTime;\n                }\n              } else {\n                // Initial segment tag is before segment duration tag\n                setInitSegment(frag, mapAttrs, id, levelkey);\n                currentInitSegment = frag;\n                createNextFrag = true;\n              }\n\n              break;\n            }\n\n          case 'SERVER-CONTROL':\n            {\n              var serverControlAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__[\"AttrList\"](value1);\n              level.canBlockReload = serverControlAttrs.bool('CAN-BLOCK-RELOAD');\n              level.canSkipUntil = serverControlAttrs.optionalFloat('CAN-SKIP-UNTIL', 0);\n              level.canSkipDateRanges = level.canSkipUntil > 0 && serverControlAttrs.bool('CAN-SKIP-DATERANGES');\n              level.partHoldBack = serverControlAttrs.optionalFloat('PART-HOLD-BACK', 0);\n              level.holdBack = serverControlAttrs.optionalFloat('HOLD-BACK', 0);\n              break;\n            }\n\n          case 'PART-INF':\n            {\n              var partInfAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__[\"AttrList\"](value1);\n              level.partTarget = partInfAttrs.decimalFloatingPoint('PART-TARGET');\n              break;\n            }\n\n          case 'PART':\n            {\n              var partList = level.partList;\n\n              if (!partList) {\n                partList = level.partList = [];\n              }\n\n              var previousFragmentPart = currentPart > 0 ? partList[partList.length - 1] : undefined;\n              var index = currentPart++;\n              var part = new _fragment__WEBPACK_IMPORTED_MODULE_3__[\"Part\"](new _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__[\"AttrList\"](value1), frag, baseurl, index, previousFragmentPart);\n              partList.push(part);\n              frag.duration += part.duration;\n              break;\n            }\n\n          case 'PRELOAD-HINT':\n            {\n              var preloadHintAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__[\"AttrList\"](value1);\n              level.preloadHint = preloadHintAttrs;\n              break;\n            }\n\n          case 'RENDITION-REPORT':\n            {\n              var renditionReportAttrs = new _utils_attr_list__WEBPACK_IMPORTED_MODULE_6__[\"AttrList\"](value1);\n              level.renditionReports = level.renditionReports || [];\n              level.renditionReports.push(renditionReportAttrs);\n              break;\n            }\n\n          default:\n            _utils_logger__WEBPACK_IMPORTED_MODULE_7__[\"logger\"].warn(\"line parsed but not handled: \" + result);\n            break;\n        }\n      }\n    }\n\n    if (prevFrag && !prevFrag.relurl) {\n      fragments.pop();\n      totalduration -= prevFrag.duration;\n\n      if (level.partList) {\n        level.fragmentHint = prevFrag;\n      }\n    } else if (level.partList) {\n      assignProgramDateTime(frag, prevFrag);\n      frag.cc = discontinuityCounter;\n      level.fragmentHint = frag;\n    }\n\n    var fragmentLength = fragments.length;\n    var firstFragment = fragments[0];\n    var lastFragment = fragments[fragmentLength - 1];\n    totalduration += level.skippedSegments * level.targetduration;\n\n    if (totalduration > 0 && fragmentLength && lastFragment) {\n      level.averagetargetduration = totalduration / fragmentLength;\n      var lastSn = lastFragment.sn;\n      level.endSN = lastSn !== 'initSegment' ? lastSn : 0;\n\n      if (firstFragment) {\n        level.startCC = firstFragment.cc;\n\n        if (!firstFragment.initSegment) {\n          // this is a bit lurky but HLS really has no other way to tell us\n          // if the fragments are TS or MP4, except if we download them :/\n          // but this is to be able to handle SIDX.\n          if (level.fragments.every(function (frag) {\n            return frag.relurl && isMP4Url(frag.relurl);\n          })) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_7__[\"logger\"].warn('MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX');\n            frag = new _fragment__WEBPACK_IMPORTED_MODULE_3__[\"Fragment\"](type, baseurl);\n            frag.relurl = lastFragment.relurl;\n            frag.level = id;\n            frag.sn = 'initSegment';\n            firstFragment.initSegment = frag;\n            level.needSidxRanges = true;\n          }\n        }\n      }\n    } else {\n      level.endSN = 0;\n      level.startCC = 0;\n    }\n\n    if (level.fragmentHint) {\n      totalduration += level.fragmentHint.duration;\n    }\n\n    level.totalduration = totalduration;\n    level.endCC = discontinuityCounter;\n    /**\n     * Backfill any missing PDT values\n     * \"If the first EXT-X-PROGRAM-DATE-TIME tag in a Playlist appears after\n     * one or more Media Segment URIs, the client SHOULD extrapolate\n     * backward from that tag (using EXTINF durations and/or media\n     * timestamps) to associate dates with those segments.\"\n     * We have already extrapolated forward, but all fragments up to the first instance of PDT do not have their PDTs\n     * computed.\n     */\n\n    if (firstPdtIndex > 0) {\n      backfillProgramDateTimes(fragments, firstPdtIndex);\n    }\n\n    return level;\n  };\n\n  return M3U8Parser;\n}();\n\n\n\nfunction setCodecs(codecs, level) {\n  ['video', 'audio', 'text'].forEach(function (type) {\n    var filtered = codecs.filter(function (codec) {\n      return Object(_utils_codecs__WEBPACK_IMPORTED_MODULE_8__[\"isCodecType\"])(codec, type);\n    });\n\n    if (filtered.length) {\n      var preferred = filtered.filter(function (codec) {\n        return codec.lastIndexOf('avc1', 0) === 0 || codec.lastIndexOf('mp4a', 0) === 0;\n      });\n      level[type + \"Codec\"] = preferred.length > 0 ? preferred[0] : filtered[0]; // remove from list\n\n      codecs = codecs.filter(function (codec) {\n        return filtered.indexOf(codec) === -1;\n      });\n    }\n  });\n  level.unknownCodecs = codecs;\n}\n\nfunction assignCodec(media, groupItem, codecProperty) {\n  var codecValue = groupItem[codecProperty];\n\n  if (codecValue) {\n    media[codecProperty] = codecValue;\n  }\n}\n\nfunction backfillProgramDateTimes(fragments, firstPdtIndex) {\n  var fragPrev = fragments[firstPdtIndex];\n\n  for (var i = firstPdtIndex; i--;) {\n    var frag = fragments[i]; // Exit on delta-playlist skipped segments\n\n    if (!frag) {\n      return;\n    }\n\n    frag.programDateTime = fragPrev.programDateTime - frag.duration * 1000;\n    fragPrev = frag;\n  }\n}\n\nfunction assignProgramDateTime(frag, prevFrag) {\n  if (frag.rawProgramDateTime) {\n    frag.programDateTime = Date.parse(frag.rawProgramDateTime);\n  } else if (prevFrag !== null && prevFrag !== void 0 && prevFrag.programDateTime) {\n    frag.programDateTime = prevFrag.endProgramDateTime;\n  }\n\n  if (!Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(frag.programDateTime)) {\n    frag.programDateTime = null;\n    frag.rawProgramDateTime = null;\n  }\n}\n\nfunction setInitSegment(frag, mapAttrs, id, levelkey) {\n  frag.relurl = mapAttrs.URI;\n\n  if (mapAttrs.BYTERANGE) {\n    frag.setByteRange(mapAttrs.BYTERANGE);\n  }\n\n  frag.level = id;\n  frag.sn = 'initSegment';\n\n  if (levelkey) {\n    frag.levelkey = levelkey;\n  }\n\n  frag.initSegment = null;\n}\n\n/***/ }),\n\n/***/ \"./src/loader/playlist-loader.ts\":\n/*!***************************************!*\\\n  !*** ./src/loader/playlist-loader.ts ***!\n  \\***************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_753074__) {\n\n\"use strict\";\n__nested_webpack_require_753074__.r(__webpack_exports__);\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_753074__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_753074__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_753074__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_753074__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_753074__(/*! ../utils/mp4-tools */ \"./src/utils/mp4-tools.ts\");\n/* harmony import */ var _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_753074__(/*! ./m3u8-parser */ \"./src/loader/m3u8-parser.ts\");\n/* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_753074__(/*! ../types/loader */ \"./src/types/loader.ts\");\n/* harmony import */ var _utils_attr_list__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_753074__(/*! ../utils/attr-list */ \"./src/utils/attr-list.ts\");\n\n\n\n/**\n * PlaylistLoader - delegate for media manifest/playlist loading tasks. Takes care of parsing media to internal data-models.\n *\n * Once loaded, dispatches events with parsed data-models of manifest/levels/audio/subtitle tracks.\n *\n * Uses loader(s) set in config to do actual internal loading of resource tasks.\n *\n * @module\n *\n */\n\n\n\n\n\n\n\n\nfunction mapContextToLevelType(context) {\n  var type = context.type;\n\n  switch (type) {\n    case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].AUDIO_TRACK:\n      return _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].AUDIO;\n\n    case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].SUBTITLE_TRACK:\n      return _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].SUBTITLE;\n\n    default:\n      return _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].MAIN;\n  }\n}\n\nfunction getResponseUrl(response, context) {\n  var url = response.url; // responseURL not supported on some browsers (it is used to detect URL redirection)\n  // data-uri mode also not supported (but no need to detect redirection)\n\n  if (url === undefined || url.indexOf('data:') === 0) {\n    // fallback to initial URL\n    url = context.url;\n  }\n\n  return url;\n}\n\nvar PlaylistLoader = /*#__PURE__*/function () {\n  function PlaylistLoader(hls) {\n    this.hls = void 0;\n    this.loaders = Object.create(null);\n    this.hls = hls;\n    this.registerListeners();\n  }\n\n  var _proto = PlaylistLoader.prototype;\n\n  _proto.startLoad = function startLoad(startPosition) {};\n\n  _proto.stopLoad = function stopLoad() {\n    this.destroyInternalLoaders();\n  };\n\n  _proto.registerListeners = function registerListeners() {\n    var hls = this.hls;\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVEL_LOADING, this.onLevelLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);\n    hls.on(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);\n  };\n\n  _proto.unregisterListeners = function unregisterListeners() {\n    var hls = this.hls;\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVEL_LOADING, this.onLevelLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);\n    hls.off(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);\n  }\n  /**\n   * Returns defaults or configured loader-type overloads (pLoader and loader config params)\n   */\n  ;\n\n  _proto.createInternalLoader = function createInternalLoader(context) {\n    var config = this.hls.config;\n    var PLoader = config.pLoader;\n    var Loader = config.loader;\n    var InternalLoader = PLoader || Loader;\n    var loader = new InternalLoader(config);\n    context.loader = loader;\n    this.loaders[context.type] = loader;\n    return loader;\n  };\n\n  _proto.getInternalLoader = function getInternalLoader(context) {\n    return this.loaders[context.type];\n  };\n\n  _proto.resetInternalLoader = function resetInternalLoader(contextType) {\n    if (this.loaders[contextType]) {\n      delete this.loaders[contextType];\n    }\n  }\n  /**\n   * Call `destroy` on all internal loader instances mapped (one per context type)\n   */\n  ;\n\n  _proto.destroyInternalLoaders = function destroyInternalLoaders() {\n    for (var contextType in this.loaders) {\n      var loader = this.loaders[contextType];\n\n      if (loader) {\n        loader.destroy();\n      }\n\n      this.resetInternalLoader(contextType);\n    }\n  };\n\n  _proto.destroy = function destroy() {\n    this.unregisterListeners();\n    this.destroyInternalLoaders();\n  };\n\n  _proto.onManifestLoading = function onManifestLoading(event, data) {\n    var url = data.url;\n    this.load({\n      id: null,\n      groupId: null,\n      level: 0,\n      responseType: 'text',\n      type: _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].MANIFEST,\n      url: url,\n      deliveryDirectives: null\n    });\n  };\n\n  _proto.onLevelLoading = function onLevelLoading(event, data) {\n    var id = data.id,\n        level = data.level,\n        url = data.url,\n        deliveryDirectives = data.deliveryDirectives;\n    this.load({\n      id: id,\n      groupId: null,\n      level: level,\n      responseType: 'text',\n      type: _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].LEVEL,\n      url: url,\n      deliveryDirectives: deliveryDirectives\n    });\n  };\n\n  _proto.onAudioTrackLoading = function onAudioTrackLoading(event, data) {\n    var id = data.id,\n        groupId = data.groupId,\n        url = data.url,\n        deliveryDirectives = data.deliveryDirectives;\n    this.load({\n      id: id,\n      groupId: groupId,\n      level: null,\n      responseType: 'text',\n      type: _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].AUDIO_TRACK,\n      url: url,\n      deliveryDirectives: deliveryDirectives\n    });\n  };\n\n  _proto.onSubtitleTrackLoading = function onSubtitleTrackLoading(event, data) {\n    var id = data.id,\n        groupId = data.groupId,\n        url = data.url,\n        deliveryDirectives = data.deliveryDirectives;\n    this.load({\n      id: id,\n      groupId: groupId,\n      level: null,\n      responseType: 'text',\n      type: _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].SUBTITLE_TRACK,\n      url: url,\n      deliveryDirectives: deliveryDirectives\n    });\n  };\n\n  _proto.load = function load(context) {\n    var _context$deliveryDire;\n\n    var config = this.hls.config; // logger.debug(`[playlist-loader]: Loading playlist of type ${context.type}, level: ${context.level}, id: ${context.id}`);\n    // Check if a loader for this context already exists\n\n    var loader = this.getInternalLoader(context);\n\n    if (loader) {\n      var loaderContext = loader.context;\n\n      if (loaderContext && loaderContext.url === context.url) {\n        // same URL can't overlap\n        _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].trace('[playlist-loader]: playlist request ongoing');\n        return;\n      }\n\n      _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].log(\"[playlist-loader]: aborting previous loader for type: \" + context.type);\n      loader.abort();\n    }\n\n    var maxRetry;\n    var timeout;\n    var retryDelay;\n    var maxRetryDelay; // apply different configs for retries depending on\n    // context (manifest, level, audio/subs playlist)\n\n    switch (context.type) {\n      case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].MANIFEST:\n        maxRetry = config.manifestLoadingMaxRetry;\n        timeout = config.manifestLoadingTimeOut;\n        retryDelay = config.manifestLoadingRetryDelay;\n        maxRetryDelay = config.manifestLoadingMaxRetryTimeout;\n        break;\n\n      case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].LEVEL:\n      case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].AUDIO_TRACK:\n      case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].SUBTITLE_TRACK:\n        // Manage retries in Level/Track Controller\n        maxRetry = 0;\n        timeout = config.levelLoadingTimeOut;\n        break;\n\n      default:\n        maxRetry = config.levelLoadingMaxRetry;\n        timeout = config.levelLoadingTimeOut;\n        retryDelay = config.levelLoadingRetryDelay;\n        maxRetryDelay = config.levelLoadingMaxRetryTimeout;\n        break;\n    }\n\n    loader = this.createInternalLoader(context); // Override level/track timeout for LL-HLS requests\n    // (the default of 10000ms is counter productive to blocking playlist reload requests)\n\n    if ((_context$deliveryDire = context.deliveryDirectives) !== null && _context$deliveryDire !== void 0 && _context$deliveryDire.part) {\n      var levelDetails;\n\n      if (context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].LEVEL && context.level !== null) {\n        levelDetails = this.hls.levels[context.level].details;\n      } else if (context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].AUDIO_TRACK && context.id !== null) {\n        levelDetails = this.hls.audioTracks[context.id].details;\n      } else if (context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].SUBTITLE_TRACK && context.id !== null) {\n        levelDetails = this.hls.subtitleTracks[context.id].details;\n      }\n\n      if (levelDetails) {\n        var partTarget = levelDetails.partTarget;\n        var targetDuration = levelDetails.targetduration;\n\n        if (partTarget && targetDuration) {\n          timeout = Math.min(Math.max(partTarget * 3, targetDuration * 0.8) * 1000, timeout);\n        }\n      }\n    }\n\n    var loaderConfig = {\n      timeout: timeout,\n      maxRetry: maxRetry,\n      retryDelay: retryDelay,\n      maxRetryDelay: maxRetryDelay,\n      highWaterMark: 0\n    };\n    var loaderCallbacks = {\n      onSuccess: this.loadsuccess.bind(this),\n      onError: this.loaderror.bind(this),\n      onTimeout: this.loadtimeout.bind(this)\n    }; // logger.debug(`[playlist-loader]: Calling internal loader delegate for URL: ${context.url}`);\n\n    loader.load(context, loaderConfig, loaderCallbacks);\n  };\n\n  _proto.loadsuccess = function loadsuccess(response, stats, context, networkDetails) {\n    if (networkDetails === void 0) {\n      networkDetails = null;\n    }\n\n    if (context.isSidxRequest) {\n      this.handleSidxRequest(response, context);\n      this.handlePlaylistLoaded(response, stats, context, networkDetails);\n      return;\n    }\n\n    this.resetInternalLoader(context.type);\n    var string = response.data; // Validate if it is an M3U8 at all\n\n    if (string.indexOf('#EXTM3U') !== 0) {\n      this.handleManifestParsingError(response, context, 'no EXTM3U delimiter', networkDetails);\n      return;\n    }\n\n    stats.parsing.start = performance.now(); // Check if chunk-list or master. handle empty chunk list case (first EXTINF not signaled, but TARGETDURATION present)\n\n    if (string.indexOf('#EXTINF:') > 0 || string.indexOf('#EXT-X-TARGETDURATION:') > 0) {\n      this.handleTrackOrLevelPlaylist(response, stats, context, networkDetails);\n    } else {\n      this.handleMasterPlaylist(response, stats, context, networkDetails);\n    }\n  };\n\n  _proto.loaderror = function loaderror(response, context, networkDetails) {\n    if (networkDetails === void 0) {\n      networkDetails = null;\n    }\n\n    this.handleNetworkError(context, networkDetails, false, response);\n  };\n\n  _proto.loadtimeout = function loadtimeout(stats, context, networkDetails) {\n    if (networkDetails === void 0) {\n      networkDetails = null;\n    }\n\n    this.handleNetworkError(context, networkDetails, true);\n  };\n\n  _proto.handleMasterPlaylist = function handleMasterPlaylist(response, stats, context, networkDetails) {\n    var hls = this.hls;\n    var string = response.data;\n    var url = getResponseUrl(response, context);\n\n    var _M3U8Parser$parseMast = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__[\"default\"].parseMasterPlaylist(string, url),\n        levels = _M3U8Parser$parseMast.levels,\n        sessionData = _M3U8Parser$parseMast.sessionData;\n\n    if (!levels.length) {\n      this.handleManifestParsingError(response, context, 'no level found in manifest', networkDetails);\n      return;\n    } // multi level playlist, parse level info\n\n\n    var audioGroups = levels.map(function (level) {\n      return {\n        id: level.attrs.AUDIO,\n        audioCodec: level.audioCodec\n      };\n    });\n    var subtitleGroups = levels.map(function (level) {\n      return {\n        id: level.attrs.SUBTITLES,\n        textCodec: level.textCodec\n      };\n    });\n    var audioTracks = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__[\"default\"].parseMasterPlaylistMedia(string, url, 'AUDIO', audioGroups);\n    var subtitles = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__[\"default\"].parseMasterPlaylistMedia(string, url, 'SUBTITLES', subtitleGroups);\n    var captions = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__[\"default\"].parseMasterPlaylistMedia(string, url, 'CLOSED-CAPTIONS');\n\n    if (audioTracks.length) {\n      // check if we have found an audio track embedded in main playlist (audio track without URI attribute)\n      var embeddedAudioFound = audioTracks.some(function (audioTrack) {\n        return !audioTrack.url;\n      }); // if no embedded audio track defined, but audio codec signaled in quality level,\n      // we need to signal this main audio track this could happen with playlists with\n      // alt audio rendition in which quality levels (main)\n      // contains both audio+video. but with mixed audio track not signaled\n\n      if (!embeddedAudioFound && levels[0].audioCodec && !levels[0].attrs.AUDIO) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].log('[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one');\n        audioTracks.unshift({\n          type: 'main',\n          name: 'main',\n          default: false,\n          autoselect: false,\n          forced: false,\n          id: -1,\n          attrs: new _utils_attr_list__WEBPACK_IMPORTED_MODULE_7__[\"AttrList\"]({}),\n          bitrate: 0,\n          url: ''\n        });\n      }\n    }\n\n    hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADED, {\n      levels: levels,\n      audioTracks: audioTracks,\n      subtitles: subtitles,\n      captions: captions,\n      url: url,\n      stats: stats,\n      networkDetails: networkDetails,\n      sessionData: sessionData\n    });\n  };\n\n  _proto.handleTrackOrLevelPlaylist = function handleTrackOrLevelPlaylist(response, stats, context, networkDetails) {\n    var hls = this.hls;\n    var id = context.id,\n        level = context.level,\n        type = context.type;\n    var url = getResponseUrl(response, context);\n    var levelUrlId = Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(id) ? id : 0;\n    var levelId = Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(level) ? level : levelUrlId;\n    var levelType = mapContextToLevelType(context);\n    var levelDetails = _m3u8_parser__WEBPACK_IMPORTED_MODULE_5__[\"default\"].parseLevelPlaylist(response.data, url, levelId, levelType, levelUrlId);\n\n    if (!levelDetails.fragments.length) {\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorTypes\"].NETWORK_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].LEVEL_EMPTY_ERROR,\n        fatal: false,\n        url: url,\n        reason: 'no fragments found in level',\n        level: typeof context.level === 'number' ? context.level : undefined\n      });\n      return;\n    } // We have done our first request (Manifest-type) and receive\n    // not a master playlist but a chunk-list (track/level)\n    // We fire the manifest-loaded event anyway with the parsed level-details\n    // by creating a single-level structure for it.\n\n\n    if (type === _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].MANIFEST) {\n      var singleLevel = {\n        attrs: new _utils_attr_list__WEBPACK_IMPORTED_MODULE_7__[\"AttrList\"]({}),\n        bitrate: 0,\n        details: levelDetails,\n        name: '',\n        url: url\n      };\n      hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].MANIFEST_LOADED, {\n        levels: [singleLevel],\n        audioTracks: [],\n        url: url,\n        stats: stats,\n        networkDetails: networkDetails,\n        sessionData: null\n      });\n    } // save parsing time\n\n\n    stats.parsing.end = performance.now(); // in case we need SIDX ranges\n    // return early after calling load for\n    // the SIDX box.\n\n    if (levelDetails.needSidxRanges) {\n      var _levelDetails$fragmen;\n\n      var sidxUrl = (_levelDetails$fragmen = levelDetails.fragments[0].initSegment) === null || _levelDetails$fragmen === void 0 ? void 0 : _levelDetails$fragmen.url;\n      this.load({\n        url: sidxUrl,\n        isSidxRequest: true,\n        type: type,\n        level: level,\n        levelDetails: levelDetails,\n        id: id,\n        groupId: null,\n        rangeStart: 0,\n        rangeEnd: 2048,\n        responseType: 'arraybuffer',\n        deliveryDirectives: null\n      });\n      return;\n    } // extend the context with the new levelDetails property\n\n\n    context.levelDetails = levelDetails;\n    this.handlePlaylistLoaded(response, stats, context, networkDetails);\n  };\n\n  _proto.handleSidxRequest = function handleSidxRequest(response, context) {\n    var data = new Uint8Array(response.data);\n    var sidxBox = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__[\"findBox\"])(data, ['sidx'])[0]; // if provided fragment does not contain sidx, early return\n\n    if (!sidxBox) {\n      return;\n    }\n\n    var sidxInfo = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__[\"parseSegmentIndex\"])(sidxBox);\n\n    if (!sidxInfo) {\n      return;\n    }\n\n    var sidxReferences = sidxInfo.references;\n    var levelDetails = context.levelDetails;\n    sidxReferences.forEach(function (segmentRef, index) {\n      var segRefInfo = segmentRef.info;\n      var frag = levelDetails.fragments[index];\n\n      if (frag.byteRange.length === 0) {\n        frag.setByteRange(String(1 + segRefInfo.end - segRefInfo.start) + '@' + String(segRefInfo.start));\n      }\n\n      if (frag.initSegment) {\n        var moovBox = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_4__[\"findBox\"])(data, ['moov'])[0];\n        var moovEndOffset = moovBox ? moovBox.length : null;\n        frag.initSegment.setByteRange(String(moovEndOffset) + '@0');\n      }\n    });\n  };\n\n  _proto.handleManifestParsingError = function handleManifestParsingError(response, context, reason, networkDetails) {\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, {\n      type: _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorTypes\"].NETWORK_ERROR,\n      details: _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].MANIFEST_PARSING_ERROR,\n      fatal: context.type === _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].MANIFEST,\n      url: response.url,\n      reason: reason,\n      response: response,\n      context: context,\n      networkDetails: networkDetails\n    });\n  };\n\n  _proto.handleNetworkError = function handleNetworkError(context, networkDetails, timeout, response) {\n    if (timeout === void 0) {\n      timeout = false;\n    }\n\n    _utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"logger\"].warn(\"[playlist-loader]: A network \" + (timeout ? 'timeout' : 'error') + \" occurred while loading \" + context.type + \" level: \" + context.level + \" id: \" + context.id + \" group-id: \\\"\" + context.groupId + \"\\\"\");\n    var details = _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].UNKNOWN;\n    var fatal = false;\n    var loader = this.getInternalLoader(context);\n\n    switch (context.type) {\n      case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].MANIFEST:\n        details = timeout ? _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].MANIFEST_LOAD_TIMEOUT : _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].MANIFEST_LOAD_ERROR;\n        fatal = true;\n        break;\n\n      case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].LEVEL:\n        details = timeout ? _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].LEVEL_LOAD_TIMEOUT : _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].LEVEL_LOAD_ERROR;\n        fatal = false;\n        break;\n\n      case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].AUDIO_TRACK:\n        details = timeout ? _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].AUDIO_TRACK_LOAD_TIMEOUT : _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].AUDIO_TRACK_LOAD_ERROR;\n        fatal = false;\n        break;\n\n      case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].SUBTITLE_TRACK:\n        details = timeout ? _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].SUBTITLE_TRACK_LOAD_TIMEOUT : _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorDetails\"].SUBTITLE_LOAD_ERROR;\n        fatal = false;\n        break;\n    }\n\n    if (loader) {\n      this.resetInternalLoader(context.type);\n    }\n\n    var errorData = {\n      type: _errors__WEBPACK_IMPORTED_MODULE_2__[\"ErrorTypes\"].NETWORK_ERROR,\n      details: details,\n      fatal: fatal,\n      url: context.url,\n      loader: loader,\n      context: context,\n      networkDetails: networkDetails\n    };\n\n    if (response) {\n      errorData.response = response;\n    }\n\n    this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].ERROR, errorData);\n  };\n\n  _proto.handlePlaylistLoaded = function handlePlaylistLoaded(response, stats, context, networkDetails) {\n    var type = context.type,\n        level = context.level,\n        id = context.id,\n        groupId = context.groupId,\n        loader = context.loader,\n        levelDetails = context.levelDetails,\n        deliveryDirectives = context.deliveryDirectives;\n\n    if (!(levelDetails !== null && levelDetails !== void 0 && levelDetails.targetduration)) {\n      this.handleManifestParsingError(response, context, 'invalid target duration', networkDetails);\n      return;\n    }\n\n    if (!loader) {\n      return;\n    }\n\n    if (levelDetails.live) {\n      if (loader.getCacheAge) {\n        levelDetails.ageHeader = loader.getCacheAge() || 0;\n      }\n\n      if (!loader.getCacheAge || isNaN(levelDetails.ageHeader)) {\n        levelDetails.ageHeader = 0;\n      }\n    }\n\n    switch (type) {\n      case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].MANIFEST:\n      case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].LEVEL:\n        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].LEVEL_LOADED, {\n          details: levelDetails,\n          level: level || 0,\n          id: id || 0,\n          stats: stats,\n          networkDetails: networkDetails,\n          deliveryDirectives: deliveryDirectives\n        });\n        break;\n\n      case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].AUDIO_TRACK:\n        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].AUDIO_TRACK_LOADED, {\n          details: levelDetails,\n          id: id || 0,\n          groupId: groupId || '',\n          stats: stats,\n          networkDetails: networkDetails,\n          deliveryDirectives: deliveryDirectives\n        });\n        break;\n\n      case _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistContextType\"].SUBTITLE_TRACK:\n        this.hls.trigger(_events__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].SUBTITLE_TRACK_LOADED, {\n          details: levelDetails,\n          id: id || 0,\n          groupId: groupId || '',\n          stats: stats,\n          networkDetails: networkDetails,\n          deliveryDirectives: deliveryDirectives\n        });\n        break;\n    }\n  };\n\n  return PlaylistLoader;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PlaylistLoader);\n\n/***/ }),\n\n/***/ \"./src/polyfills/number.ts\":\n/*!*********************************!*\\\n  !*** ./src/polyfills/number.ts ***!\n  \\*********************************/\n/*! exports provided: isFiniteNumber, MAX_SAFE_INTEGER */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_777705__) {\n\n\"use strict\";\n__nested_webpack_require_777705__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_777705__.d(__webpack_exports__, \"isFiniteNumber\", function() { return isFiniteNumber; });\n/* harmony export (binding) */ __nested_webpack_require_777705__.d(__webpack_exports__, \"MAX_SAFE_INTEGER\", function() { return MAX_SAFE_INTEGER; });\nvar isFiniteNumber = Number.isFinite || function (value) {\n  return typeof value === 'number' && isFinite(value);\n};\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n\n/***/ }),\n\n/***/ \"./src/remux/aac-helper.ts\":\n/*!*********************************!*\\\n  !*** ./src/remux/aac-helper.ts ***!\n  \\*********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_778481__) {\n\n\"use strict\";\n__nested_webpack_require_778481__.r(__webpack_exports__);\n/**\n *  AAC helper\n */\nvar AAC = /*#__PURE__*/function () {\n  function AAC() {}\n\n  AAC.getSilentFrame = function getSilentFrame(codec, channelCount) {\n    switch (codec) {\n      case 'mp4a.40.2':\n        if (channelCount === 1) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n        } else if (channelCount === 2) {\n          return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n        } else if (channelCount === 3) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n        } else if (channelCount === 4) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n        } else if (channelCount === 5) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n        } else if (channelCount === 6) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n        }\n\n        break;\n      // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)\n\n      default:\n        if (channelCount === 1) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n        } else if (channelCount === 2) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n        } else if (channelCount === 3) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n        }\n\n        break;\n    }\n\n    return undefined;\n  };\n\n  return AAC;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AAC);\n\n/***/ }),\n\n/***/ \"./src/remux/mp4-generator.ts\":\n/*!************************************!*\\\n  !*** ./src/remux/mp4-generator.ts ***!\n  \\************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_782012__) {\n\n\"use strict\";\n__nested_webpack_require_782012__.r(__webpack_exports__);\n/**\n * Generate MP4 Box\n */\nvar UINT32_MAX = Math.pow(2, 32) - 1;\n\nvar MP4 = /*#__PURE__*/function () {\n  function MP4() {}\n\n  MP4.init = function init() {\n    MP4.types = {\n      avc1: [],\n      // codingname\n      avcC: [],\n      btrt: [],\n      dinf: [],\n      dref: [],\n      esds: [],\n      ftyp: [],\n      hdlr: [],\n      mdat: [],\n      mdhd: [],\n      mdia: [],\n      mfhd: [],\n      minf: [],\n      moof: [],\n      moov: [],\n      mp4a: [],\n      '.mp3': [],\n      mvex: [],\n      mvhd: [],\n      pasp: [],\n      sdtp: [],\n      stbl: [],\n      stco: [],\n      stsc: [],\n      stsd: [],\n      stsz: [],\n      stts: [],\n      tfdt: [],\n      tfhd: [],\n      traf: [],\n      trak: [],\n      trun: [],\n      trex: [],\n      tkhd: [],\n      vmhd: [],\n      smhd: []\n    };\n    var i;\n\n    for (i in MP4.types) {\n      if (MP4.types.hasOwnProperty(i)) {\n        MP4.types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];\n      }\n    }\n\n    var videoHdlr = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n    ]);\n    var audioHdlr = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n    ]);\n    MP4.HDLR_TYPES = {\n      video: videoHdlr,\n      audio: audioHdlr\n    };\n    var dref = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01, // entry_count\n    0x00, 0x00, 0x00, 0x0c, // entry_size\n    0x75, 0x72, 0x6c, 0x20, // 'url' type\n    0x00, // version 0\n    0x00, 0x00, 0x01 // entry_flags\n    ]);\n    var stco = new Uint8Array([0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n    ]);\n    MP4.STTS = MP4.STSC = MP4.STCO = stco;\n    MP4.STSZ = new Uint8Array([0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n    ]);\n    MP4.VMHD = new Uint8Array([0x00, // version\n    0x00, 0x00, 0x01, // flags\n    0x00, 0x00, // graphicsmode\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor\n    ]);\n    MP4.SMHD = new Uint8Array([0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, // balance\n    0x00, 0x00 // reserved\n    ]);\n    MP4.STSD = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01]); // entry_count\n\n    var majorBrand = new Uint8Array([105, 115, 111, 109]); // isom\n\n    var avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1\n\n    var minorVersion = new Uint8Array([0, 0, 0, 1]);\n    MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);\n    MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));\n  };\n\n  MP4.box = function box(type) {\n    var size = 8;\n\n    for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      payload[_key - 1] = arguments[_key];\n    }\n\n    var i = payload.length;\n    var len = i; // calculate the total size we need to allocate\n\n    while (i--) {\n      size += payload[i].byteLength;\n    }\n\n    var result = new Uint8Array(size);\n    result[0] = size >> 24 & 0xff;\n    result[1] = size >> 16 & 0xff;\n    result[2] = size >> 8 & 0xff;\n    result[3] = size & 0xff;\n    result.set(type, 4); // copy the payload into the result\n\n    for (i = 0, size = 8; i < len; i++) {\n      // copy payload[i] array @ offset size\n      result.set(payload[i], size);\n      size += payload[i].byteLength;\n    }\n\n    return result;\n  };\n\n  MP4.hdlr = function hdlr(type) {\n    return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);\n  };\n\n  MP4.mdat = function mdat(data) {\n    return MP4.box(MP4.types.mdat, data);\n  };\n\n  MP4.mdhd = function mdhd(timescale, duration) {\n    duration *= timescale;\n    var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(MP4.types.mdhd, new Uint8Array([0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time\n    timescale >> 24 & 0xff, timescale >> 16 & 0xff, timescale >> 8 & 0xff, timescale & 0xff, // timescale\n    upperWordDuration >> 24, upperWordDuration >> 16 & 0xff, upperWordDuration >> 8 & 0xff, upperWordDuration & 0xff, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xff, lowerWordDuration >> 8 & 0xff, lowerWordDuration & 0xff, 0x55, 0xc4, // 'und' language (undetermined)\n    0x00, 0x00]));\n  };\n\n  MP4.mdia = function mdia(track) {\n    return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale, track.duration), MP4.hdlr(track.type), MP4.minf(track));\n  };\n\n  MP4.mfhd = function mfhd(sequenceNumber) {\n    return MP4.box(MP4.types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags\n    sequenceNumber >> 24, sequenceNumber >> 16 & 0xff, sequenceNumber >> 8 & 0xff, sequenceNumber & 0xff // sequence_number\n    ]));\n  };\n\n  MP4.minf = function minf(track) {\n    if (track.type === 'audio') {\n      return MP4.box(MP4.types.minf, MP4.box(MP4.types.smhd, MP4.SMHD), MP4.DINF, MP4.stbl(track));\n    } else {\n      return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));\n    }\n  };\n\n  MP4.moof = function moof(sn, baseMediaDecodeTime, track) {\n    return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));\n  }\n  /**\n   * @param tracks... (optional) {array} the tracks associated with this movie\n   */\n  ;\n\n  MP4.moov = function moov(tracks) {\n    var i = tracks.length;\n    var boxes = [];\n\n    while (i--) {\n      boxes[i] = MP4.trak(tracks[i]);\n    }\n\n    return MP4.box.apply(null, [MP4.types.moov, MP4.mvhd(tracks[0].timescale, tracks[0].duration)].concat(boxes).concat(MP4.mvex(tracks)));\n  };\n\n  MP4.mvex = function mvex(tracks) {\n    var i = tracks.length;\n    var boxes = [];\n\n    while (i--) {\n      boxes[i] = MP4.trex(tracks[i]);\n    }\n\n    return MP4.box.apply(null, [MP4.types.mvex].concat(boxes));\n  };\n\n  MP4.mvhd = function mvhd(timescale, duration) {\n    duration *= timescale;\n    var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    var bytes = new Uint8Array([0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time\n    timescale >> 24 & 0xff, timescale >> 16 & 0xff, timescale >> 8 & 0xff, timescale & 0xff, // timescale\n    upperWordDuration >> 24, upperWordDuration >> 16 & 0xff, upperWordDuration >> 8 & 0xff, upperWordDuration & 0xff, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xff, lowerWordDuration >> 8 & 0xff, lowerWordDuration & 0xff, 0x00, 0x01, 0x00, 0x00, // 1.0 rate\n    0x01, 0x00, // 1.0 volume\n    0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n    0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n    return MP4.box(MP4.types.mvhd, bytes);\n  };\n\n  MP4.sdtp = function sdtp(track) {\n    var samples = track.samples || [];\n    var bytes = new Uint8Array(4 + samples.length);\n    var i;\n    var flags; // leave the full box header (4 bytes) all zero\n    // write the sample table\n\n    for (i = 0; i < samples.length; i++) {\n      flags = samples[i].flags;\n      bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n    }\n\n    return MP4.box(MP4.types.sdtp, bytes);\n  };\n\n  MP4.stbl = function stbl(track) {\n    return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));\n  };\n\n  MP4.avc1 = function avc1(track) {\n    var sps = [];\n    var pps = [];\n    var i;\n    var data;\n    var len; // assemble the SPSs\n\n    for (i = 0; i < track.sps.length; i++) {\n      data = track.sps[i];\n      len = data.byteLength;\n      sps.push(len >>> 8 & 0xff);\n      sps.push(len & 0xff); // SPS\n\n      sps = sps.concat(Array.prototype.slice.call(data));\n    } // assemble the PPSs\n\n\n    for (i = 0; i < track.pps.length; i++) {\n      data = track.pps[i];\n      len = data.byteLength;\n      pps.push(len >>> 8 & 0xff);\n      pps.push(len & 0xff);\n      pps = pps.concat(Array.prototype.slice.call(data));\n    }\n\n    var avcc = MP4.box(MP4.types.avcC, new Uint8Array([0x01, // version\n    sps[3], // profile\n    sps[4], // profile compat\n    sps[5], // level\n    0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\n    0xe0 | track.sps.length // 3bit reserved (111) + numOfSequenceParameterSets\n    ].concat(sps).concat([track.pps.length // numOfPictureParameterSets\n    ]).concat(pps))); // \"PPS\"\n\n    var width = track.width;\n    var height = track.height;\n    var hSpacing = track.pixelRatio[0];\n    var vSpacing = track.pixelRatio[1];\n    return MP4.box(MP4.types.avc1, new Uint8Array([0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, // reserved\n    0x00, 0x01, // data_reference_index\n    0x00, 0x00, // pre_defined\n    0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n    width >> 8 & 0xff, width & 0xff, // width\n    height >> 8 & 0xff, height & 0xff, // height\n    0x00, 0x48, 0x00, 0x00, // horizresolution\n    0x00, 0x48, 0x00, 0x00, // vertresolution\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x01, // frame_count\n    0x12, 0x64, 0x61, 0x69, 0x6c, // dailymotion/hls.js\n    0x79, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6c, 0x73, 0x2e, 0x6a, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname\n    0x00, 0x18, // depth = 24\n    0x11, 0x11]), // pre_defined = -1\n    avcc, MP4.box(MP4.types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n    0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n    0x00, 0x2d, 0xc6, 0xc0])), // avgBitrate\n    MP4.box(MP4.types.pasp, new Uint8Array([hSpacing >> 24, // hSpacing\n    hSpacing >> 16 & 0xff, hSpacing >> 8 & 0xff, hSpacing & 0xff, vSpacing >> 24, // vSpacing\n    vSpacing >> 16 & 0xff, vSpacing >> 8 & 0xff, vSpacing & 0xff])));\n  };\n\n  MP4.esds = function esds(track) {\n    var configlen = track.config.length;\n    return new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x03, // descriptor_type\n    0x17 + configlen, // length\n    0x00, 0x01, // es_id\n    0x00, // stream_priority\n    0x04, // descriptor_type\n    0x0f + configlen, // length\n    0x40, // codec : mpeg4_audio\n    0x15, // stream_type\n    0x00, 0x00, 0x00, // buffer_size\n    0x00, 0x00, 0x00, 0x00, // maxBitrate\n    0x00, 0x00, 0x00, 0x00, // avgBitrate\n    0x05 // descriptor_type\n    ].concat([configlen]).concat(track.config).concat([0x06, 0x01, 0x02])); // GASpecificConfig)); // length + audio config descriptor\n  };\n\n  MP4.mp4a = function mp4a(track) {\n    var samplerate = track.samplerate;\n    return MP4.box(MP4.types.mp4a, new Uint8Array([0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, // reserved\n    0x00, 0x01, // data_reference_index\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, track.channelCount, // channelcount\n    0x00, 0x10, // sampleSize:16bits\n    0x00, 0x00, 0x00, 0x00, // reserved2\n    samplerate >> 8 & 0xff, samplerate & 0xff, //\n    0x00, 0x00]), MP4.box(MP4.types.esds, MP4.esds(track)));\n  };\n\n  MP4.mp3 = function mp3(track) {\n    var samplerate = track.samplerate;\n    return MP4.box(MP4.types['.mp3'], new Uint8Array([0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, // reserved\n    0x00, 0x01, // data_reference_index\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, track.channelCount, // channelcount\n    0x00, 0x10, // sampleSize:16bits\n    0x00, 0x00, 0x00, 0x00, // reserved2\n    samplerate >> 8 & 0xff, samplerate & 0xff, //\n    0x00, 0x00]));\n  };\n\n  MP4.stsd = function stsd(track) {\n    if (track.type === 'audio') {\n      if (track.segmentCodec === 'mp3' && track.codec === 'mp3') {\n        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));\n      }\n\n      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));\n    } else {\n      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));\n    }\n  };\n\n  MP4.tkhd = function tkhd(track) {\n    var id = track.id;\n    var duration = track.duration * track.timescale;\n    var width = track.width;\n    var height = track.height;\n    var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(MP4.types.tkhd, new Uint8Array([0x01, // version 1\n    0x00, 0x00, 0x07, // flags\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time\n    id >> 24 & 0xff, id >> 16 & 0xff, id >> 8 & 0xff, id & 0xff, // track_ID\n    0x00, 0x00, 0x00, 0x00, // reserved\n    upperWordDuration >> 24, upperWordDuration >> 16 & 0xff, upperWordDuration >> 8 & 0xff, upperWordDuration & 0xff, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xff, lowerWordDuration >> 8 & 0xff, lowerWordDuration & 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, // layer\n    0x00, 0x00, // alternate_group\n    0x00, 0x00, // non-audio track volume\n    0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    width >> 8 & 0xff, width & 0xff, 0x00, 0x00, // width\n    height >> 8 & 0xff, height & 0xff, 0x00, 0x00 // height\n    ]));\n  };\n\n  MP4.traf = function traf(track, baseMediaDecodeTime) {\n    var sampleDependencyTable = MP4.sdtp(track);\n    var id = track.id;\n    var upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));\n    var lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n    return MP4.box(MP4.types.traf, MP4.box(MP4.types.tfhd, new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    id >> 24, id >> 16 & 0xff, id >> 8 & 0xff, id & 0xff // track_ID\n    ])), MP4.box(MP4.types.tfdt, new Uint8Array([0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    upperWordBaseMediaDecodeTime >> 24, upperWordBaseMediaDecodeTime >> 16 & 0xff, upperWordBaseMediaDecodeTime >> 8 & 0xff, upperWordBaseMediaDecodeTime & 0xff, lowerWordBaseMediaDecodeTime >> 24, lowerWordBaseMediaDecodeTime >> 16 & 0xff, lowerWordBaseMediaDecodeTime >> 8 & 0xff, lowerWordBaseMediaDecodeTime & 0xff])), MP4.trun(track, sampleDependencyTable.length + 16 + // tfhd\n    20 + // tfdt\n    8 + // traf header\n    16 + // mfhd\n    8 + // moof header\n    8), // mdat header\n    sampleDependencyTable);\n  }\n  /**\n   * Generate a track box.\n   * @param track {object} a track definition\n   * @return {Uint8Array} the track box\n   */\n  ;\n\n  MP4.trak = function trak(track) {\n    track.duration = track.duration || 0xffffffff;\n    return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));\n  };\n\n  MP4.trex = function trex(track) {\n    var id = track.id;\n    return MP4.box(MP4.types.trex, new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    id >> 24, id >> 16 & 0xff, id >> 8 & 0xff, id & 0xff, // track_ID\n    0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n    ]));\n  };\n\n  MP4.trun = function trun(track, offset) {\n    var samples = track.samples || [];\n    var len = samples.length;\n    var arraylen = 12 + 16 * len;\n    var array = new Uint8Array(arraylen);\n    var i;\n    var sample;\n    var duration;\n    var size;\n    var flags;\n    var cts;\n    offset += 8 + arraylen;\n    array.set([track.type === 'video' ? 0x01 : 0x00, // version 1 for video with signed-int sample_composition_time_offset\n    0x00, 0x0f, 0x01, // flags\n    len >>> 24 & 0xff, len >>> 16 & 0xff, len >>> 8 & 0xff, len & 0xff, // sample_count\n    offset >>> 24 & 0xff, offset >>> 16 & 0xff, offset >>> 8 & 0xff, offset & 0xff // data_offset\n    ], 0);\n\n    for (i = 0; i < len; i++) {\n      sample = samples[i];\n      duration = sample.duration;\n      size = sample.size;\n      flags = sample.flags;\n      cts = sample.cts;\n      array.set([duration >>> 24 & 0xff, duration >>> 16 & 0xff, duration >>> 8 & 0xff, duration & 0xff, // sample_duration\n      size >>> 24 & 0xff, size >>> 16 & 0xff, size >>> 8 & 0xff, size & 0xff, // sample_size\n      flags.isLeading << 2 | flags.dependsOn, flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.paddingValue << 1 | flags.isNonSync, flags.degradPrio & 0xf0 << 8, flags.degradPrio & 0x0f, // sample_flags\n      cts >>> 24 & 0xff, cts >>> 16 & 0xff, cts >>> 8 & 0xff, cts & 0xff // sample_composition_time_offset\n      ], 12 + 16 * i);\n    }\n\n    return MP4.box(MP4.types.trun, array);\n  };\n\n  MP4.initSegment = function initSegment(tracks) {\n    if (!MP4.types) {\n      MP4.init();\n    }\n\n    var movie = MP4.moov(tracks);\n    var result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);\n    result.set(MP4.FTYP);\n    result.set(movie, MP4.FTYP.byteLength);\n    return result;\n  };\n\n  return MP4;\n}();\n\nMP4.types = void 0;\nMP4.HDLR_TYPES = void 0;\nMP4.STTS = void 0;\nMP4.STSC = void 0;\nMP4.STCO = void 0;\nMP4.STSZ = void 0;\nMP4.VMHD = void 0;\nMP4.SMHD = void 0;\nMP4.STSD = void 0;\nMP4.FTYP = void 0;\nMP4.DINF = void 0;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MP4);\n\n/***/ }),\n\n/***/ \"./src/remux/mp4-remuxer.ts\":\n/*!**********************************!*\\\n  !*** ./src/remux/mp4-remuxer.ts ***!\n  \\**********************************/\n/*! exports provided: default, normalizePts, flushTextTrackMetadataCueSamples, flushTextTrackUserdataCueSamples */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_801107__) {\n\n\"use strict\";\n__nested_webpack_require_801107__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_801107__.d(__webpack_exports__, \"default\", function() { return MP4Remuxer; });\n/* harmony export (binding) */ __nested_webpack_require_801107__.d(__webpack_exports__, \"normalizePts\", function() { return normalizePts; });\n/* harmony export (binding) */ __nested_webpack_require_801107__.d(__webpack_exports__, \"flushTextTrackMetadataCueSamples\", function() { return flushTextTrackMetadataCueSamples; });\n/* harmony export (binding) */ __nested_webpack_require_801107__.d(__webpack_exports__, \"flushTextTrackUserdataCueSamples\", function() { return flushTextTrackUserdataCueSamples; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_801107__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _aac_helper__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_801107__(/*! ./aac-helper */ \"./src/remux/aac-helper.ts\");\n/* harmony import */ var _mp4_generator__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_801107__(/*! ./mp4-generator */ \"./src/remux/mp4-generator.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_801107__(/*! ../events */ \"./src/events.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_801107__(/*! ../errors */ \"./src/errors.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_801107__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _types_loader__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_801107__(/*! ../types/loader */ \"./src/types/loader.ts\");\n/* harmony import */ var _utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_801107__(/*! ../utils/timescale-conversion */ \"./src/utils/timescale-conversion.ts\");\n\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n\n\n\n\n\n\n\nvar MAX_SILENT_FRAME_DURATION = 10 * 1000; // 10 seconds\n\nvar AAC_SAMPLES_PER_FRAME = 1024;\nvar MPEG_AUDIO_SAMPLE_PER_FRAME = 1152;\nvar chromeVersion = null;\nvar safariWebkitVersion = null;\nvar requiresPositiveDts = false;\n\nvar MP4Remuxer = /*#__PURE__*/function () {\n  function MP4Remuxer(observer, config, typeSupported, vendor) {\n    if (vendor === void 0) {\n      vendor = '';\n    }\n\n    this.observer = void 0;\n    this.config = void 0;\n    this.typeSupported = void 0;\n    this.ISGenerated = false;\n    this._initPTS = void 0;\n    this._initDTS = void 0;\n    this.nextAvcDts = null;\n    this.nextAudioPts = null;\n    this.videoSampleDuration = null;\n    this.isAudioContiguous = false;\n    this.isVideoContiguous = false;\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    this.ISGenerated = false;\n\n    if (chromeVersion === null) {\n      var userAgent = navigator.userAgent || '';\n      var result = userAgent.match(/Chrome\\/(\\d+)/i);\n      chromeVersion = result ? parseInt(result[1]) : 0;\n    }\n\n    if (safariWebkitVersion === null) {\n      var _result = navigator.userAgent.match(/Safari\\/(\\d+)/i);\n\n      safariWebkitVersion = _result ? parseInt(_result[1]) : 0;\n    }\n\n    requiresPositiveDts = !(!!chromeVersion && chromeVersion >= 75 || !!safariWebkitVersion && safariWebkitVersion >= 600);\n  }\n\n  var _proto = MP4Remuxer.prototype;\n\n  _proto.destroy = function destroy() {};\n\n  _proto.resetTimeStamp = function resetTimeStamp(defaultTimeStamp) {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].log('[mp4-remuxer]: initPTS & initDTS reset');\n    this._initPTS = this._initDTS = defaultTimeStamp;\n  };\n\n  _proto.resetNextTimestamp = function resetNextTimestamp() {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].log('[mp4-remuxer]: reset next timestamp');\n    this.isVideoContiguous = false;\n    this.isAudioContiguous = false;\n  };\n\n  _proto.resetInitSegment = function resetInitSegment() {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].log('[mp4-remuxer]: ISGenerated flag reset');\n    this.ISGenerated = false;\n  };\n\n  _proto.getVideoStartPts = function getVideoStartPts(videoSamples) {\n    var rolloverDetected = false;\n    var startPTS = videoSamples.reduce(function (minPTS, sample) {\n      var delta = sample.pts - minPTS;\n\n      if (delta < -4294967296) {\n        // 2^32, see PTSNormalize for reasoning, but we're hitting a rollover here, and we don't want that to impact the timeOffset calculation\n        rolloverDetected = true;\n        return normalizePts(minPTS, sample.pts);\n      } else if (delta > 0) {\n        return minPTS;\n      } else {\n        return sample.pts;\n      }\n    }, videoSamples[0].pts);\n\n    if (rolloverDetected) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].debug('PTS rollover detected');\n    }\n\n    return startPTS;\n  };\n\n  _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, accurateTimeOffset, flush, playlistType) {\n    var video;\n    var audio;\n    var initSegment;\n    var text;\n    var id3;\n    var independent;\n    var audioTimeOffset = timeOffset;\n    var videoTimeOffset = timeOffset; // If we're remuxing audio and video progressively, wait until we've received enough samples for each track before proceeding.\n    // This is done to synchronize the audio and video streams. We know if the current segment will have samples if the \"pid\"\n    // parameter is greater than -1. The pid is set when the PMT is parsed, which contains the tracks list.\n    // However, if the initSegment has already been generated, or we've reached the end of a segment (flush),\n    // then we can remux one track without waiting for the other.\n\n    var hasAudio = audioTrack.pid > -1;\n    var hasVideo = videoTrack.pid > -1;\n    var length = videoTrack.samples.length;\n    var enoughAudioSamples = audioTrack.samples.length > 0;\n    var enoughVideoSamples = flush && length > 0 || length > 1;\n    var canRemuxAvc = (!hasAudio || enoughAudioSamples) && (!hasVideo || enoughVideoSamples) || this.ISGenerated || flush;\n\n    if (canRemuxAvc) {\n      if (!this.ISGenerated) {\n        initSegment = this.generateIS(audioTrack, videoTrack, timeOffset);\n      }\n\n      var isVideoContiguous = this.isVideoContiguous;\n      var firstKeyFrameIndex = -1;\n      var firstKeyFramePTS;\n\n      if (enoughVideoSamples) {\n        firstKeyFrameIndex = findKeyframeIndex(videoTrack.samples);\n\n        if (!isVideoContiguous && this.config.forceKeyFrameOnDiscontinuity) {\n          independent = true;\n\n          if (firstKeyFrameIndex > 0) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].warn(\"[mp4-remuxer]: Dropped \" + firstKeyFrameIndex + \" out of \" + length + \" video samples due to a missing keyframe\");\n            var startPTS = this.getVideoStartPts(videoTrack.samples);\n            videoTrack.samples = videoTrack.samples.slice(firstKeyFrameIndex);\n            videoTrack.dropped += firstKeyFrameIndex;\n            videoTimeOffset += (videoTrack.samples[0].pts - startPTS) / videoTrack.inputTimeScale;\n            firstKeyFramePTS = videoTimeOffset;\n          } else if (firstKeyFrameIndex === -1) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].warn(\"[mp4-remuxer]: No keyframe found out of \" + length + \" video samples\");\n            independent = false;\n          }\n        }\n      }\n\n      if (this.ISGenerated) {\n        if (enoughAudioSamples && enoughVideoSamples) {\n          // timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)\n          // if first audio DTS is not aligned with first video DTS then we need to take that into account\n          // when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small\n          // drift between audio and video streams\n          var _startPTS = this.getVideoStartPts(videoTrack.samples);\n\n          var tsDelta = normalizePts(audioTrack.samples[0].pts, _startPTS) - _startPTS;\n\n          var audiovideoTimestampDelta = tsDelta / videoTrack.inputTimeScale;\n          audioTimeOffset += Math.max(0, audiovideoTimestampDelta);\n          videoTimeOffset += Math.max(0, -audiovideoTimestampDelta);\n        } // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is calculated in remuxAudio.\n\n\n        if (enoughAudioSamples) {\n          // if initSegment was generated without audio samples, regenerate it again\n          if (!audioTrack.samplerate) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].warn('[mp4-remuxer]: regenerate InitSegment as audio detected');\n            initSegment = this.generateIS(audioTrack, videoTrack, timeOffset);\n          }\n\n          audio = this.remuxAudio(audioTrack, audioTimeOffset, this.isAudioContiguous, accurateTimeOffset, hasVideo || enoughVideoSamples || playlistType === _types_loader__WEBPACK_IMPORTED_MODULE_6__[\"PlaylistLevelType\"].AUDIO ? videoTimeOffset : undefined);\n\n          if (enoughVideoSamples) {\n            var audioTrackLength = audio ? audio.endPTS - audio.startPTS : 0; // if initSegment was generated without video samples, regenerate it again\n\n            if (!videoTrack.inputTimeScale) {\n              _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].warn('[mp4-remuxer]: regenerate InitSegment as video detected');\n              initSegment = this.generateIS(audioTrack, videoTrack, timeOffset);\n            }\n\n            video = this.remuxVideo(videoTrack, videoTimeOffset, isVideoContiguous, audioTrackLength);\n          }\n        } else if (enoughVideoSamples) {\n          video = this.remuxVideo(videoTrack, videoTimeOffset, isVideoContiguous, 0);\n        }\n\n        if (video) {\n          video.firstKeyFrame = firstKeyFrameIndex;\n          video.independent = firstKeyFrameIndex !== -1;\n          video.firstKeyFramePTS = firstKeyFramePTS;\n        }\n      }\n    } // Allow ID3 and text to remux, even if more audio/video samples are required\n\n\n    if (this.ISGenerated) {\n      if (id3Track.samples.length) {\n        id3 = flushTextTrackMetadataCueSamples(id3Track, timeOffset, this._initPTS, this._initDTS);\n      }\n\n      if (textTrack.samples.length) {\n        text = flushTextTrackUserdataCueSamples(textTrack, timeOffset, this._initPTS);\n      }\n    }\n\n    return {\n      audio: audio,\n      video: video,\n      initSegment: initSegment,\n      independent: independent,\n      text: text,\n      id3: id3\n    };\n  };\n\n  _proto.generateIS = function generateIS(audioTrack, videoTrack, timeOffset) {\n    var audioSamples = audioTrack.samples;\n    var videoSamples = videoTrack.samples;\n    var typeSupported = this.typeSupported;\n    var tracks = {};\n    var computePTSDTS = !Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(this._initPTS);\n    var container = 'audio/mp4';\n    var initPTS;\n    var initDTS;\n    var timescale;\n\n    if (computePTSDTS) {\n      initPTS = initDTS = Infinity;\n    }\n\n    if (audioTrack.config && audioSamples.length) {\n      // let's use audio sampling rate as MP4 time scale.\n      // rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)\n      // using audio sampling rate here helps having an integer MP4 frame duration\n      // this avoids potential rounding issue and AV sync issue\n      audioTrack.timescale = audioTrack.samplerate;\n\n      switch (audioTrack.segmentCodec) {\n        case 'mp3':\n          if (typeSupported.mpeg) {\n            // Chrome and Safari\n            container = 'audio/mpeg';\n            audioTrack.codec = '';\n          } else if (typeSupported.mp3) {\n            // Firefox\n            audioTrack.codec = 'mp3';\n          }\n\n          break;\n      }\n\n      tracks.audio = {\n        id: 'audio',\n        container: container,\n        codec: audioTrack.codec,\n        initSegment: audioTrack.segmentCodec === 'mp3' && typeSupported.mpeg ? new Uint8Array(0) : _mp4_generator__WEBPACK_IMPORTED_MODULE_2__[\"default\"].initSegment([audioTrack]),\n        metadata: {\n          channelCount: audioTrack.channelCount\n        }\n      };\n\n      if (computePTSDTS) {\n        timescale = audioTrack.inputTimeScale; // remember first PTS of this demuxing context. for audio, PTS = DTS\n\n        initPTS = initDTS = audioSamples[0].pts - Math.round(timescale * timeOffset);\n      }\n    }\n\n    if (videoTrack.sps && videoTrack.pps && videoSamples.length) {\n      // let's use input time scale as MP4 video timescale\n      // we use input time scale straight away to avoid rounding issues on frame duration / cts computation\n      videoTrack.timescale = videoTrack.inputTimeScale;\n      tracks.video = {\n        id: 'main',\n        container: 'video/mp4',\n        codec: videoTrack.codec,\n        initSegment: _mp4_generator__WEBPACK_IMPORTED_MODULE_2__[\"default\"].initSegment([videoTrack]),\n        metadata: {\n          width: videoTrack.width,\n          height: videoTrack.height\n        }\n      };\n\n      if (computePTSDTS) {\n        timescale = videoTrack.inputTimeScale;\n        var startPTS = this.getVideoStartPts(videoSamples);\n        var startOffset = Math.round(timescale * timeOffset);\n        initDTS = Math.min(initDTS, normalizePts(videoSamples[0].dts, startPTS) - startOffset);\n        initPTS = Math.min(initPTS, startPTS - startOffset);\n      }\n    }\n\n    if (Object.keys(tracks).length) {\n      this.ISGenerated = true;\n\n      if (computePTSDTS) {\n        this._initPTS = initPTS;\n        this._initDTS = initDTS;\n      }\n\n      return {\n        tracks: tracks,\n        initPTS: initPTS,\n        timescale: timescale\n      };\n    }\n  };\n\n  _proto.remuxVideo = function remuxVideo(track, timeOffset, contiguous, audioTrackLength) {\n    var timeScale = track.inputTimeScale;\n    var inputSamples = track.samples;\n    var outputSamples = [];\n    var nbSamples = inputSamples.length;\n    var initPTS = this._initPTS;\n    var nextAvcDts = this.nextAvcDts;\n    var offset = 8;\n    var mp4SampleDuration = this.videoSampleDuration;\n    var firstDTS;\n    var lastDTS;\n    var minPTS = Number.POSITIVE_INFINITY;\n    var maxPTS = Number.NEGATIVE_INFINITY;\n    var sortSamples = false; // if parsed fragment is contiguous with last one, let's use last DTS value as reference\n\n    if (!contiguous || nextAvcDts === null) {\n      var pts = timeOffset * timeScale;\n      var cts = inputSamples[0].pts - normalizePts(inputSamples[0].dts, inputSamples[0].pts); // if not contiguous, let's use target timeOffset\n\n      nextAvcDts = pts - cts;\n    } // PTS is coded on 33bits, and can loop from -2^32 to 2^32\n    // PTSNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value\n\n\n    for (var i = 0; i < nbSamples; i++) {\n      var sample = inputSamples[i];\n      sample.pts = normalizePts(sample.pts - initPTS, nextAvcDts);\n      sample.dts = normalizePts(sample.dts - initPTS, nextAvcDts);\n\n      if (sample.dts < inputSamples[i > 0 ? i - 1 : i].dts) {\n        sortSamples = true;\n      }\n    } // sort video samples by DTS then PTS then demux id order\n\n\n    if (sortSamples) {\n      inputSamples.sort(function (a, b) {\n        var deltadts = a.dts - b.dts;\n        var deltapts = a.pts - b.pts;\n        return deltadts || deltapts;\n      });\n    } // Get first/last DTS\n\n\n    firstDTS = inputSamples[0].dts;\n    lastDTS = inputSamples[inputSamples.length - 1].dts; // Sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS\n    // set this constant duration as being the avg delta between consecutive DTS.\n\n    var inputDuration = lastDTS - firstDTS;\n    var averageSampleDuration = inputDuration ? Math.round(inputDuration / (nbSamples - 1)) : mp4SampleDuration || track.inputTimeScale / 30; // if fragment are contiguous, detect hole/overlapping between fragments\n\n    if (contiguous) {\n      // check timestamp continuity across consecutive fragments (this is to remove inter-fragment gap/hole)\n      var delta = firstDTS - nextAvcDts;\n      var foundHole = delta > averageSampleDuration;\n      var foundOverlap = delta < -1;\n\n      if (foundHole || foundOverlap) {\n        if (foundHole) {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].warn(\"AVC: \" + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__[\"toMsFromMpegTsClock\"])(delta, true) + \" ms (\" + delta + \"dts) hole between fragments detected, filling it\");\n        } else {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].warn(\"AVC: \" + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__[\"toMsFromMpegTsClock\"])(-delta, true) + \" ms (\" + delta + \"dts) overlapping between fragments detected\");\n        }\n\n        firstDTS = nextAvcDts;\n        var firstPTS = inputSamples[0].pts - delta;\n        inputSamples[0].dts = firstDTS;\n        inputSamples[0].pts = firstPTS;\n        _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].log(\"Video: First PTS/DTS adjusted: \" + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__[\"toMsFromMpegTsClock\"])(firstPTS, true) + \"/\" + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__[\"toMsFromMpegTsClock\"])(firstDTS, true) + \", delta: \" + Object(_utils_timescale_conversion__WEBPACK_IMPORTED_MODULE_7__[\"toMsFromMpegTsClock\"])(delta, true) + \" ms\");\n      }\n    }\n\n    if (requiresPositiveDts) {\n      firstDTS = Math.max(0, firstDTS);\n    }\n\n    var nbNalu = 0;\n    var naluLen = 0;\n\n    for (var _i = 0; _i < nbSamples; _i++) {\n      // compute total/avc sample length and nb of NAL units\n      var _sample = inputSamples[_i];\n      var units = _sample.units;\n      var nbUnits = units.length;\n      var sampleLen = 0;\n\n      for (var j = 0; j < nbUnits; j++) {\n        sampleLen += units[j].data.length;\n      }\n\n      naluLen += sampleLen;\n      nbNalu += nbUnits;\n      _sample.length = sampleLen; // ensure sample monotonic DTS\n\n      _sample.dts = Math.max(_sample.dts, firstDTS);\n      minPTS = Math.min(_sample.pts, minPTS);\n      maxPTS = Math.max(_sample.pts, maxPTS);\n    }\n\n    lastDTS = inputSamples[nbSamples - 1].dts;\n    /* concatenate the video data and construct the mdat in place\n      (need 8 more bytes to fill length and mpdat type) */\n\n    var mdatSize = naluLen + 4 * nbNalu + 8;\n    var mdat;\n\n    try {\n      mdat = new Uint8Array(mdatSize);\n    } catch (err) {\n      this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].ERROR, _events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].ERROR, {\n        type: _errors__WEBPACK_IMPORTED_MODULE_4__[\"ErrorTypes\"].MUX_ERROR,\n        details: _errors__WEBPACK_IMPORTED_MODULE_4__[\"ErrorDetails\"].REMUX_ALLOC_ERROR,\n        fatal: false,\n        bytes: mdatSize,\n        reason: \"fail allocating video mdat \" + mdatSize\n      });\n      return;\n    }\n\n    var view = new DataView(mdat.buffer);\n    view.setUint32(0, mdatSize);\n    mdat.set(_mp4_generator__WEBPACK_IMPORTED_MODULE_2__[\"default\"].types.mdat, 4);\n    var stretchedLastFrame = false;\n    var minDtsDelta = Number.POSITIVE_INFINITY;\n    var minPtsDelta = Number.POSITIVE_INFINITY;\n    var maxDtsDelta = Number.NEGATIVE_INFINITY;\n    var maxPtsDelta = Number.NEGATIVE_INFINITY;\n\n    for (var _i2 = 0; _i2 < nbSamples; _i2++) {\n      var avcSample = inputSamples[_i2];\n      var avcSampleUnits = avcSample.units;\n      var mp4SampleLength = 0; // convert NALU bitstream to MP4 format (prepend NALU with size field)\n\n      for (var _j = 0, _nbUnits = avcSampleUnits.length; _j < _nbUnits; _j++) {\n        var unit = avcSampleUnits[_j];\n        var unitData = unit.data;\n        var unitDataLen = unit.data.byteLength;\n        view.setUint32(offset, unitDataLen);\n        offset += 4;\n        mdat.set(unitData, offset);\n        offset += unitDataLen;\n        mp4SampleLength += 4 + unitDataLen;\n      } // expected sample duration is the Decoding Timestamp diff of consecutive samples\n\n\n      var ptsDelta = void 0;\n\n      if (_i2 < nbSamples - 1) {\n        mp4SampleDuration = inputSamples[_i2 + 1].dts - avcSample.dts;\n        ptsDelta = inputSamples[_i2 + 1].pts - avcSample.pts;\n      } else {\n        var config = this.config;\n        var lastFrameDuration = _i2 > 0 ? avcSample.dts - inputSamples[_i2 - 1].dts : averageSampleDuration;\n        ptsDelta = _i2 > 0 ? avcSample.pts - inputSamples[_i2 - 1].pts : averageSampleDuration;\n\n        if (config.stretchShortVideoTrack && this.nextAudioPts !== null) {\n          // In some cases, a segment's audio track duration may exceed the video track duration.\n          // Since we've already remuxed audio, and we know how long the audio track is, we look to\n          // see if the delta to the next segment is longer than maxBufferHole.\n          // If so, playback would potentially get stuck, so we artificially inflate\n          // the duration of the last frame to minimize any potential gap between segments.\n          var gapTolerance = Math.floor(config.maxBufferHole * timeScale);\n          var deltaToFrameEnd = (audioTrackLength ? minPTS + audioTrackLength * timeScale : this.nextAudioPts) - avcSample.pts;\n\n          if (deltaToFrameEnd > gapTolerance) {\n            // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video\n            // frame overlap. maxBufferHole should be >> lastFrameDuration anyway.\n            mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;\n\n            if (mp4SampleDuration < 0) {\n              mp4SampleDuration = lastFrameDuration;\n            } else {\n              stretchedLastFrame = true;\n            }\n\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].log(\"[mp4-remuxer]: It is approximately \" + deltaToFrameEnd / 90 + \" ms to the next segment; using duration \" + mp4SampleDuration / 90 + \" ms for the last video frame.\");\n          } else {\n            mp4SampleDuration = lastFrameDuration;\n          }\n        } else {\n          mp4SampleDuration = lastFrameDuration;\n        }\n      }\n\n      var compositionTimeOffset = Math.round(avcSample.pts - avcSample.dts);\n      minDtsDelta = Math.min(minDtsDelta, mp4SampleDuration);\n      maxDtsDelta = Math.max(maxDtsDelta, mp4SampleDuration);\n      minPtsDelta = Math.min(minPtsDelta, ptsDelta);\n      maxPtsDelta = Math.max(maxPtsDelta, ptsDelta);\n      outputSamples.push(new Mp4Sample(avcSample.key, mp4SampleDuration, mp4SampleLength, compositionTimeOffset));\n    }\n\n    if (outputSamples.length) {\n      if (chromeVersion) {\n        if (chromeVersion < 70) {\n          // Chrome workaround, mark first sample as being a Random Access Point (keyframe) to avoid sourcebuffer append issue\n          // https://code.google.com/p/chromium/issues/detail?id=229412\n          var flags = outputSamples[0].flags;\n          flags.dependsOn = 2;\n          flags.isNonSync = 0;\n        }\n      } else if (safariWebkitVersion) {\n        // Fix for \"CNN special report, with CC\" in test-streams (Safari browser only)\n        // Ignore DTS when frame durations are irregular. Safari MSE does not handle this leading to gaps.\n        if (maxPtsDelta - minPtsDelta < maxDtsDelta - minDtsDelta && averageSampleDuration / maxDtsDelta < 0.025 && outputSamples[0].cts === 0) {\n          _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].warn('Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.');\n          var dts = firstDTS;\n\n          for (var _i3 = 0, len = outputSamples.length; _i3 < len; _i3++) {\n            var nextDts = dts + outputSamples[_i3].duration;\n\n            var _pts = dts + outputSamples[_i3].cts;\n\n            if (_i3 < len - 1) {\n              var nextPts = nextDts + outputSamples[_i3 + 1].cts;\n              outputSamples[_i3].duration = nextPts - _pts;\n            } else {\n              outputSamples[_i3].duration = _i3 ? outputSamples[_i3 - 1].duration : averageSampleDuration;\n            }\n\n            outputSamples[_i3].cts = 0;\n            dts = nextDts;\n          }\n        }\n      }\n    }\n\n    console.assert(mp4SampleDuration !== null, 'mp4SampleDuration must be computed'); // next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)\n\n    mp4SampleDuration = stretchedLastFrame || !mp4SampleDuration ? averageSampleDuration : mp4SampleDuration;\n    this.nextAvcDts = nextAvcDts = lastDTS + mp4SampleDuration;\n    this.videoSampleDuration = mp4SampleDuration;\n    this.isVideoContiguous = true;\n    var moof = _mp4_generator__WEBPACK_IMPORTED_MODULE_2__[\"default\"].moof(track.sequenceNumber++, firstDTS, _extends({}, track, {\n      samples: outputSamples\n    }));\n    var type = 'video';\n    var data = {\n      data1: moof,\n      data2: mdat,\n      startPTS: minPTS / timeScale,\n      endPTS: (maxPTS + mp4SampleDuration) / timeScale,\n      startDTS: firstDTS / timeScale,\n      endDTS: nextAvcDts / timeScale,\n      type: type,\n      hasAudio: false,\n      hasVideo: true,\n      nb: outputSamples.length,\n      dropped: track.dropped\n    };\n    track.samples = [];\n    track.dropped = 0;\n    console.assert(mdat.length, 'MDAT length must not be zero');\n    return data;\n  };\n\n  _proto.remuxAudio = function remuxAudio(track, timeOffset, contiguous, accurateTimeOffset, videoTimeOffset) {\n    var inputTimeScale = track.inputTimeScale;\n    var mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;\n    var scaleFactor = inputTimeScale / mp4timeScale;\n    var mp4SampleDuration = track.segmentCodec === 'aac' ? AAC_SAMPLES_PER_FRAME : MPEG_AUDIO_SAMPLE_PER_FRAME;\n    var inputSampleDuration = mp4SampleDuration * scaleFactor;\n    var initPTS = this._initPTS;\n    var rawMPEG = track.segmentCodec === 'mp3' && this.typeSupported.mpeg;\n    var outputSamples = [];\n    var alignedWithVideo = videoTimeOffset !== undefined;\n    var inputSamples = track.samples;\n    var offset = rawMPEG ? 0 : 8;\n    var nextAudioPts = this.nextAudioPts || -1; // window.audioSamples ? window.audioSamples.push(inputSamples.map(s => s.pts)) : (window.audioSamples = [inputSamples.map(s => s.pts)]);\n    // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),\n    // for sake of clarity:\n    // consecutive fragments are frags with\n    //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR\n    //  - less than 20 audio frames distance\n    // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n    // this helps ensuring audio continuity\n    // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame\n\n    var timeOffsetMpegTS = timeOffset * inputTimeScale;\n    this.isAudioContiguous = contiguous = contiguous || inputSamples.length && nextAudioPts > 0 && (accurateTimeOffset && Math.abs(timeOffsetMpegTS - nextAudioPts) < 9000 || Math.abs(normalizePts(inputSamples[0].pts - initPTS, timeOffsetMpegTS) - nextAudioPts) < 20 * inputSampleDuration); // compute normalized PTS\n\n    inputSamples.forEach(function (sample) {\n      sample.pts = normalizePts(sample.pts - initPTS, timeOffsetMpegTS);\n    });\n\n    if (!contiguous || nextAudioPts < 0) {\n      // filter out sample with negative PTS that are not playable anyway\n      // if we don't remove these negative samples, they will shift all audio samples forward.\n      // leading to audio overlap between current / next fragment\n      inputSamples = inputSamples.filter(function (sample) {\n        return sample.pts >= 0;\n      }); // in case all samples have negative PTS, and have been filtered out, return now\n\n      if (!inputSamples.length) {\n        return;\n      }\n\n      if (videoTimeOffset === 0) {\n        // Set the start to 0 to match video so that start gaps larger than inputSampleDuration are filled with silence\n        nextAudioPts = 0;\n      } else if (accurateTimeOffset && !alignedWithVideo) {\n        // When not seeking, not live, and LevelDetails.PTSKnown, use fragment start as predicted next audio PTS\n        nextAudioPts = Math.max(0, timeOffsetMpegTS);\n      } else {\n        // if frags are not contiguous and if we cant trust time offset, let's use first sample PTS as next audio PTS\n        nextAudioPts = inputSamples[0].pts;\n      }\n    } // If the audio track is missing samples, the frames seem to get \"left-shifted\" within the\n    // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.\n    // In an effort to prevent this from happening, we inject frames here where there are gaps.\n    // When possible, we inject a silent frame; when that's not possible, we duplicate the last\n    // frame.\n\n\n    if (track.segmentCodec === 'aac') {\n      var maxAudioFramesDrift = this.config.maxAudioFramesDrift;\n\n      for (var i = 0, nextPts = nextAudioPts; i < inputSamples.length; i++) {\n        // First, let's see how far off this frame is from where we expect it to be\n        var sample = inputSamples[i];\n        var pts = sample.pts;\n        var delta = pts - nextPts;\n        var duration = Math.abs(1000 * delta / inputTimeScale); // When remuxing with video, if we're overlapping by more than a duration, drop this sample to stay in sync\n\n        if (delta <= -maxAudioFramesDrift * inputSampleDuration && alignedWithVideo) {\n          if (i === 0) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].warn(\"Audio frame @ \" + (pts / inputTimeScale).toFixed(3) + \"s overlaps nextAudioPts by \" + Math.round(1000 * delta / inputTimeScale) + \" ms.\");\n            this.nextAudioPts = nextAudioPts = nextPts = pts;\n          }\n        } // eslint-disable-line brace-style\n        // Insert missing frames if:\n        // 1: We're more than maxAudioFramesDrift frame away\n        // 2: Not more than MAX_SILENT_FRAME_DURATION away\n        // 3: currentTime (aka nextPtsNorm) is not 0\n        // 4: remuxing with video (videoTimeOffset !== undefined)\n        else if (delta >= maxAudioFramesDrift * inputSampleDuration && duration < MAX_SILENT_FRAME_DURATION && alignedWithVideo) {\n          var missing = Math.round(delta / inputSampleDuration); // Adjust nextPts so that silent samples are aligned with media pts. This will prevent media samples from\n          // later being shifted if nextPts is based on timeOffset and delta is not a multiple of inputSampleDuration.\n\n          nextPts = pts - missing * inputSampleDuration;\n\n          if (nextPts < 0) {\n            missing--;\n            nextPts += inputSampleDuration;\n          }\n\n          if (i === 0) {\n            this.nextAudioPts = nextAudioPts = nextPts;\n          }\n\n          _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].warn(\"[mp4-remuxer]: Injecting \" + missing + \" audio frame @ \" + (nextPts / inputTimeScale).toFixed(3) + \"s due to \" + Math.round(1000 * delta / inputTimeScale) + \" ms gap.\");\n\n          for (var j = 0; j < missing; j++) {\n            var newStamp = Math.max(nextPts, 0);\n            var fillFrame = _aac_helper__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getSilentFrame(track.manifestCodec || track.codec, track.channelCount);\n\n            if (!fillFrame) {\n              _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].log('[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead.');\n              fillFrame = sample.unit.subarray();\n            }\n\n            inputSamples.splice(i, 0, {\n              unit: fillFrame,\n              pts: newStamp\n            });\n            nextPts += inputSampleDuration;\n            i++;\n          }\n        }\n\n        sample.pts = nextPts;\n        nextPts += inputSampleDuration;\n      }\n    }\n\n    var firstPTS = null;\n    var lastPTS = null;\n    var mdat;\n    var mdatSize = 0;\n    var sampleLength = inputSamples.length;\n\n    while (sampleLength--) {\n      mdatSize += inputSamples[sampleLength].unit.byteLength;\n    }\n\n    for (var _j2 = 0, _nbSamples = inputSamples.length; _j2 < _nbSamples; _j2++) {\n      var audioSample = inputSamples[_j2];\n      var unit = audioSample.unit;\n      var _pts2 = audioSample.pts;\n\n      if (lastPTS !== null) {\n        // If we have more than one sample, set the duration of the sample to the \"real\" duration; the PTS diff with\n        // the previous sample\n        var prevSample = outputSamples[_j2 - 1];\n        prevSample.duration = Math.round((_pts2 - lastPTS) / scaleFactor);\n      } else {\n        if (contiguous && track.segmentCodec === 'aac') {\n          // set PTS/DTS to expected PTS/DTS\n          _pts2 = nextAudioPts;\n        } // remember first PTS of our audioSamples\n\n\n        firstPTS = _pts2;\n\n        if (mdatSize > 0) {\n          /* concatenate the audio data and construct the mdat in place\n            (need 8 more bytes to fill length and mdat type) */\n          mdatSize += offset;\n\n          try {\n            mdat = new Uint8Array(mdatSize);\n          } catch (err) {\n            this.observer.emit(_events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].ERROR, _events__WEBPACK_IMPORTED_MODULE_3__[\"Events\"].ERROR, {\n              type: _errors__WEBPACK_IMPORTED_MODULE_4__[\"ErrorTypes\"].MUX_ERROR,\n              details: _errors__WEBPACK_IMPORTED_MODULE_4__[\"ErrorDetails\"].REMUX_ALLOC_ERROR,\n              fatal: false,\n              bytes: mdatSize,\n              reason: \"fail allocating audio mdat \" + mdatSize\n            });\n            return;\n          }\n\n          if (!rawMPEG) {\n            var view = new DataView(mdat.buffer);\n            view.setUint32(0, mdatSize);\n            mdat.set(_mp4_generator__WEBPACK_IMPORTED_MODULE_2__[\"default\"].types.mdat, 4);\n          }\n        } else {\n          // no audio samples\n          return;\n        }\n      }\n\n      mdat.set(unit, offset);\n      var unitLen = unit.byteLength;\n      offset += unitLen; // Default the sample's duration to the computed mp4SampleDuration, which will either be 1024 for AAC or 1152 for MPEG\n      // In the case that we have 1 sample, this will be the duration. If we have more than one sample, the duration\n      // becomes the PTS diff with the previous sample\n\n      outputSamples.push(new Mp4Sample(true, mp4SampleDuration, unitLen, 0));\n      lastPTS = _pts2;\n    } // We could end up with no audio samples if all input samples were overlapping with the previously remuxed ones\n\n\n    var nbSamples = outputSamples.length;\n\n    if (!nbSamples) {\n      return;\n    } // The next audio sample PTS should be equal to last sample PTS + duration\n\n\n    var lastSample = outputSamples[outputSamples.length - 1];\n    this.nextAudioPts = nextAudioPts = lastPTS + scaleFactor * lastSample.duration; // Set the track samples from inputSamples to outputSamples before remuxing\n\n    var moof = rawMPEG ? new Uint8Array(0) : _mp4_generator__WEBPACK_IMPORTED_MODULE_2__[\"default\"].moof(track.sequenceNumber++, firstPTS / scaleFactor, _extends({}, track, {\n      samples: outputSamples\n    })); // Clear the track samples. This also clears the samples array in the demuxer, since the reference is shared\n\n    track.samples = [];\n    var start = firstPTS / inputTimeScale;\n    var end = nextAudioPts / inputTimeScale;\n    var type = 'audio';\n    var audioData = {\n      data1: moof,\n      data2: mdat,\n      startPTS: start,\n      endPTS: end,\n      startDTS: start,\n      endDTS: end,\n      type: type,\n      hasAudio: true,\n      hasVideo: false,\n      nb: nbSamples\n    };\n    this.isAudioContiguous = true;\n    console.assert(mdat.length, 'MDAT length must not be zero');\n    return audioData;\n  };\n\n  _proto.remuxEmptyAudio = function remuxEmptyAudio(track, timeOffset, contiguous, videoData) {\n    var inputTimeScale = track.inputTimeScale;\n    var mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;\n    var scaleFactor = inputTimeScale / mp4timeScale;\n    var nextAudioPts = this.nextAudioPts; // sync with video's timestamp\n\n    var startDTS = (nextAudioPts !== null ? nextAudioPts : videoData.startDTS * inputTimeScale) + this._initDTS;\n    var endDTS = videoData.endDTS * inputTimeScale + this._initDTS; // one sample's duration value\n\n    var frameDuration = scaleFactor * AAC_SAMPLES_PER_FRAME; // samples count of this segment's duration\n\n    var nbSamples = Math.ceil((endDTS - startDTS) / frameDuration); // silent frame\n\n    var silentFrame = _aac_helper__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getSilentFrame(track.manifestCodec || track.codec, track.channelCount);\n    _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].warn('[mp4-remuxer]: remux empty Audio'); // Can't remux if we can't generate a silent frame...\n\n    if (!silentFrame) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_5__[\"logger\"].trace('[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec');\n      return;\n    }\n\n    var samples = [];\n\n    for (var i = 0; i < nbSamples; i++) {\n      var stamp = startDTS + i * frameDuration;\n      samples.push({\n        unit: silentFrame,\n        pts: stamp,\n        dts: stamp\n      });\n    }\n\n    track.samples = samples;\n    return this.remuxAudio(track, timeOffset, contiguous, false);\n  };\n\n  return MP4Remuxer;\n}();\n\n\nfunction normalizePts(value, reference) {\n  var offset;\n\n  if (reference === null) {\n    return value;\n  }\n\n  if (reference < value) {\n    // - 2^33\n    offset = -8589934592;\n  } else {\n    // + 2^33\n    offset = 8589934592;\n  }\n  /* PTS is 33bit (from 0 to 2^33 -1)\n    if diff between value and reference is bigger than half of the amplitude (2^32) then it means that\n    PTS looping occured. fill the gap */\n\n\n  while (Math.abs(value - reference) > 4294967296) {\n    value += offset;\n  }\n\n  return value;\n}\n\nfunction findKeyframeIndex(samples) {\n  for (var i = 0; i < samples.length; i++) {\n    if (samples[i].key) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction flushTextTrackMetadataCueSamples(track, timeOffset, initPTS, initDTS) {\n  var length = track.samples.length;\n\n  if (!length) {\n    return;\n  }\n\n  var inputTimeScale = track.inputTimeScale;\n\n  for (var index = 0; index < length; index++) {\n    var sample = track.samples[index]; // setting id3 pts, dts to relative time\n    // using this._initPTS and this._initDTS to calculate relative time\n\n    sample.pts = normalizePts(sample.pts - initPTS, timeOffset * inputTimeScale) / inputTimeScale;\n    sample.dts = normalizePts(sample.dts - initDTS, timeOffset * inputTimeScale) / inputTimeScale;\n  }\n\n  var samples = track.samples;\n  track.samples = [];\n  return {\n    samples: samples\n  };\n}\nfunction flushTextTrackUserdataCueSamples(track, timeOffset, initPTS) {\n  var length = track.samples.length;\n\n  if (!length) {\n    return;\n  }\n\n  var inputTimeScale = track.inputTimeScale;\n\n  for (var index = 0; index < length; index++) {\n    var sample = track.samples[index]; // setting text pts, dts to relative time\n    // using this._initPTS and this._initDTS to calculate relative time\n\n    sample.pts = normalizePts(sample.pts - initPTS, timeOffset * inputTimeScale) / inputTimeScale;\n  }\n\n  track.samples.sort(function (a, b) {\n    return a.pts - b.pts;\n  });\n  var samples = track.samples;\n  track.samples = [];\n  return {\n    samples: samples\n  };\n}\n\nvar Mp4Sample = function Mp4Sample(isKeyframe, duration, size, cts) {\n  this.size = void 0;\n  this.duration = void 0;\n  this.cts = void 0;\n  this.flags = void 0;\n  this.duration = duration;\n  this.size = size;\n  this.cts = cts;\n  this.flags = new Mp4SampleFlags(isKeyframe);\n};\n\nvar Mp4SampleFlags = function Mp4SampleFlags(isKeyframe) {\n  this.isLeading = 0;\n  this.isDependedOn = 0;\n  this.hasRedundancy = 0;\n  this.degradPrio = 0;\n  this.dependsOn = 1;\n  this.isNonSync = 1;\n  this.dependsOn = isKeyframe ? 2 : 1;\n  this.isNonSync = isKeyframe ? 0 : 1;\n};\n\n/***/ }),\n\n/***/ \"./src/remux/passthrough-remuxer.ts\":\n/*!******************************************!*\\\n  !*** ./src/remux/passthrough-remuxer.ts ***!\n  \\******************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_841199__) {\n\n\"use strict\";\n__nested_webpack_require_841199__.r(__webpack_exports__);\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_841199__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _mp4_remuxer__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_841199__(/*! ./mp4-remuxer */ \"./src/remux/mp4-remuxer.ts\");\n/* harmony import */ var _utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_841199__(/*! ../utils/mp4-tools */ \"./src/utils/mp4-tools.ts\");\n/* harmony import */ var _loader_fragment__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_841199__(/*! ../loader/fragment */ \"./src/loader/fragment.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_841199__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n\n\n\n\n\n\n\nvar PassThroughRemuxer = /*#__PURE__*/function () {\n  function PassThroughRemuxer() {\n    this.emitInitSegment = false;\n    this.audioCodec = void 0;\n    this.videoCodec = void 0;\n    this.initData = void 0;\n    this.initPTS = void 0;\n    this.initTracks = void 0;\n    this.lastEndTime = null;\n  }\n\n  var _proto = PassThroughRemuxer.prototype;\n\n  _proto.destroy = function destroy() {};\n\n  _proto.resetTimeStamp = function resetTimeStamp(defaultInitPTS) {\n    this.initPTS = defaultInitPTS;\n    this.lastEndTime = null;\n  };\n\n  _proto.resetNextTimestamp = function resetNextTimestamp() {\n    this.lastEndTime = null;\n  };\n\n  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec) {\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this.generateInitSegment(initSegment);\n    this.emitInitSegment = true;\n  };\n\n  _proto.generateInitSegment = function generateInitSegment(initSegment) {\n    var audioCodec = this.audioCodec,\n        videoCodec = this.videoCodec;\n\n    if (!initSegment || !initSegment.byteLength) {\n      this.initTracks = undefined;\n      this.initData = undefined;\n      return;\n    }\n\n    var initData = this.initData = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__[\"parseInitSegment\"])(initSegment); // Get codec from initSegment or fallback to default\n\n    if (!audioCodec) {\n      audioCodec = getParsedTrackCodec(initData.audio, _loader_fragment__WEBPACK_IMPORTED_MODULE_3__[\"ElementaryStreamTypes\"].AUDIO);\n    }\n\n    if (!videoCodec) {\n      videoCodec = getParsedTrackCodec(initData.video, _loader_fragment__WEBPACK_IMPORTED_MODULE_3__[\"ElementaryStreamTypes\"].VIDEO);\n    }\n\n    var tracks = {};\n\n    if (initData.audio && initData.video) {\n      tracks.audiovideo = {\n        container: 'video/mp4',\n        codec: audioCodec + ',' + videoCodec,\n        initSegment: initSegment,\n        id: 'main'\n      };\n    } else if (initData.audio) {\n      tracks.audio = {\n        container: 'audio/mp4',\n        codec: audioCodec,\n        initSegment: initSegment,\n        id: 'audio'\n      };\n    } else if (initData.video) {\n      tracks.video = {\n        container: 'video/mp4',\n        codec: videoCodec,\n        initSegment: initSegment,\n        id: 'main'\n      };\n    } else {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_4__[\"logger\"].warn('[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes.');\n    }\n\n    this.initTracks = tracks;\n  };\n\n  _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset) {\n    var _this$initPTS;\n\n    var initPTS = this.initPTS,\n        lastEndTime = this.lastEndTime;\n    var result = {\n      audio: undefined,\n      video: undefined,\n      text: textTrack,\n      id3: id3Track,\n      initSegment: undefined\n    }; // If we haven't yet set a lastEndDTS, or it was reset, set it to the provided timeOffset. We want to use the\n    // lastEndDTS over timeOffset whenever possible; during progressive playback, the media source will not update\n    // the media duration (which is what timeOffset is provided as) before we need to process the next chunk.\n\n    if (!Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(lastEndTime)) {\n      lastEndTime = this.lastEndTime = timeOffset || 0;\n    } // The binary segment data is added to the videoTrack in the mp4demuxer. We don't check to see if the data is only\n    // audio or video (or both); adding it to video was an arbitrary choice.\n\n\n    var data = videoTrack.samples;\n\n    if (!data || !data.length) {\n      return result;\n    }\n\n    var initSegment = {\n      initPTS: undefined,\n      timescale: 1\n    };\n    var initData = this.initData;\n\n    if (!initData || !initData.length) {\n      this.generateInitSegment(data);\n      initData = this.initData;\n    }\n\n    if (!initData || !initData.length) {\n      // We can't remux if the initSegment could not be generated\n      _utils_logger__WEBPACK_IMPORTED_MODULE_4__[\"logger\"].warn('[passthrough-remuxer.ts]: Failed to generate initSegment.');\n      return result;\n    }\n\n    if (this.emitInitSegment) {\n      initSegment.tracks = this.initTracks;\n      this.emitInitSegment = false;\n    }\n\n    var startDTS = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__[\"getStartDTS\"])(initData, data);\n\n    if (!Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(initPTS)) {\n      this.initPTS = initSegment.initPTS = initPTS = startDTS - timeOffset;\n    }\n\n    var duration = Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__[\"getDuration\"])(data, initData);\n    var startTime = audioTrack ? startDTS - initPTS : lastEndTime;\n    var endTime = startTime + duration;\n    Object(_utils_mp4_tools__WEBPACK_IMPORTED_MODULE_2__[\"offsetStartDTS\"])(initData, data, initPTS);\n\n    if (duration > 0) {\n      this.lastEndTime = endTime;\n    } else {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_4__[\"logger\"].warn('Duration parsed from mp4 should be greater than zero');\n      this.resetNextTimestamp();\n    }\n\n    var hasAudio = !!initData.audio;\n    var hasVideo = !!initData.video;\n    var type = '';\n\n    if (hasAudio) {\n      type += 'audio';\n    }\n\n    if (hasVideo) {\n      type += 'video';\n    }\n\n    var track = {\n      data1: data,\n      startPTS: startTime,\n      startDTS: startTime,\n      endPTS: endTime,\n      endDTS: endTime,\n      type: type,\n      hasAudio: hasAudio,\n      hasVideo: hasVideo,\n      nb: 1,\n      dropped: 0\n    };\n    result.audio = track.type === 'audio' ? track : undefined;\n    result.video = track.type !== 'audio' ? track : undefined;\n    result.initSegment = initSegment;\n    var initPtsNum = (_this$initPTS = this.initPTS) != null ? _this$initPTS : 0;\n    result.id3 = Object(_mp4_remuxer__WEBPACK_IMPORTED_MODULE_1__[\"flushTextTrackMetadataCueSamples\"])(id3Track, timeOffset, initPtsNum, initPtsNum);\n\n    if (textTrack.samples.length) {\n      result.text = Object(_mp4_remuxer__WEBPACK_IMPORTED_MODULE_1__[\"flushTextTrackUserdataCueSamples\"])(textTrack, timeOffset, initPtsNum);\n    }\n\n    return result;\n  };\n\n  return PassThroughRemuxer;\n}();\n\nfunction getParsedTrackCodec(track, type) {\n  var parsedCodec = track === null || track === void 0 ? void 0 : track.codec;\n\n  if (parsedCodec && parsedCodec.length > 4) {\n    return parsedCodec;\n  } // Since mp4-tools cannot parse full codec string (see 'TODO: Parse codec details'... in mp4-tools)\n  // Provide defaults based on codec type\n  // This allows for some playback of some fmp4 playlists without CODECS defined in manifest\n\n\n  if (parsedCodec === 'hvc1' || parsedCodec === 'hev1') {\n    return 'hvc1.1.c.L120.90';\n  }\n\n  if (parsedCodec === 'av01') {\n    return 'av01.0.04M.08';\n  }\n\n  if (parsedCodec === 'avc1' || type === _loader_fragment__WEBPACK_IMPORTED_MODULE_3__[\"ElementaryStreamTypes\"].VIDEO) {\n    return 'avc1.42e01e';\n  }\n\n  return 'mp4a.40.5';\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PassThroughRemuxer);\n\n/***/ }),\n\n/***/ \"./src/task-loop.ts\":\n/*!**************************!*\\\n  !*** ./src/task-loop.ts ***!\n  \\**************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_849261__) {\n\n\"use strict\";\n__nested_webpack_require_849261__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_849261__.d(__webpack_exports__, \"default\", function() { return TaskLoop; });\n/**\n * Sub-class specialization of EventHandler base class.\n *\n * TaskLoop allows to schedule a task function being called (optionnaly repeatedly) on the main loop,\n * scheduled asynchroneously, avoiding recursive calls in the same tick.\n *\n * The task itself is implemented in `doTick`. It can be requested and called for single execution\n * using the `tick` method.\n *\n * It will be assured that the task execution method (`tick`) only gets called once per main loop \"tick\",\n * no matter how often it gets requested for execution. Execution in further ticks will be scheduled accordingly.\n *\n * If further execution requests have already been scheduled on the next tick, it can be checked with `hasNextTick`,\n * and cancelled with `clearNextTick`.\n *\n * The task can be scheduled as an interval repeatedly with a period as parameter (see `setInterval`, `clearInterval`).\n *\n * Sub-classes need to implement the `doTick` method which will effectively have the task execution routine.\n *\n * Further explanations:\n *\n * The baseclass has a `tick` method that will schedule the doTick call. It may be called synchroneously\n * only for a stack-depth of one. On re-entrant calls, sub-sequent calls are scheduled for next main loop ticks.\n *\n * When the task execution (`tick` method) is called in re-entrant way this is detected and\n * we are limiting the task execution per call stack to exactly one, but scheduling/post-poning further\n * task processing on the next main loop iteration (also known as \"next tick\" in the Node/JS runtime lingo).\n */\nvar TaskLoop = /*#__PURE__*/function () {\n  function TaskLoop() {\n    this._boundTick = void 0;\n    this._tickTimer = null;\n    this._tickInterval = null;\n    this._tickCallCount = 0;\n    this._boundTick = this.tick.bind(this);\n  }\n\n  var _proto = TaskLoop.prototype;\n\n  _proto.destroy = function destroy() {\n    this.onHandlerDestroying();\n    this.onHandlerDestroyed();\n  };\n\n  _proto.onHandlerDestroying = function onHandlerDestroying() {\n    // clear all timers before unregistering from event bus\n    this.clearNextTick();\n    this.clearInterval();\n  };\n\n  _proto.onHandlerDestroyed = function onHandlerDestroyed() {}\n  /**\n   * @returns {boolean}\n   */\n  ;\n\n  _proto.hasInterval = function hasInterval() {\n    return !!this._tickInterval;\n  }\n  /**\n   * @returns {boolean}\n   */\n  ;\n\n  _proto.hasNextTick = function hasNextTick() {\n    return !!this._tickTimer;\n  }\n  /**\n   * @param {number} millis Interval time (ms)\n   * @returns {boolean} True when interval has been scheduled, false when already scheduled (no effect)\n   */\n  ;\n\n  _proto.setInterval = function setInterval(millis) {\n    if (!this._tickInterval) {\n      this._tickInterval = self.setInterval(this._boundTick, millis);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * @returns {boolean} True when interval was cleared, false when none was set (no effect)\n   */\n  ;\n\n  _proto.clearInterval = function clearInterval() {\n    if (this._tickInterval) {\n      self.clearInterval(this._tickInterval);\n      this._tickInterval = null;\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * @returns {boolean} True when timeout was cleared, false when none was set (no effect)\n   */\n  ;\n\n  _proto.clearNextTick = function clearNextTick() {\n    if (this._tickTimer) {\n      self.clearTimeout(this._tickTimer);\n      this._tickTimer = null;\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Will call the subclass doTick implementation in this main loop tick\n   * or in the next one (via setTimeout(,0)) in case it has already been called\n   * in this tick (in case this is a re-entrant call).\n   */\n  ;\n\n  _proto.tick = function tick() {\n    this._tickCallCount++;\n\n    if (this._tickCallCount === 1) {\n      this.doTick(); // re-entrant call to tick from previous doTick call stack\n      // -> schedule a call on the next main loop iteration to process this task processing request\n\n      if (this._tickCallCount > 1) {\n        // make sure only one timer exists at any time at max\n        this.tickImmediate();\n      }\n\n      this._tickCallCount = 0;\n    }\n  };\n\n  _proto.tickImmediate = function tickImmediate() {\n    this.clearNextTick();\n    this._tickTimer = self.setTimeout(this._boundTick, 0);\n  }\n  /**\n   * For subclass to implement task logic\n   * @abstract\n   */\n  ;\n\n  _proto.doTick = function doTick() {};\n\n  return TaskLoop;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/types/cmcd.ts\":\n/*!***************************!*\\\n  !*** ./src/types/cmcd.ts ***!\n  \\***************************/\n/*! exports provided: CMCDVersion, CMCDObjectType, CMCDStreamingFormat, CMCDStreamType */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_854118__) {\n\n\"use strict\";\n__nested_webpack_require_854118__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_854118__.d(__webpack_exports__, \"CMCDVersion\", function() { return CMCDVersion; });\n/* harmony export (binding) */ __nested_webpack_require_854118__.d(__webpack_exports__, \"CMCDObjectType\", function() { return CMCDObjectType; });\n/* harmony export (binding) */ __nested_webpack_require_854118__.d(__webpack_exports__, \"CMCDStreamingFormat\", function() { return CMCDStreamingFormat; });\n/* harmony export (binding) */ __nested_webpack_require_854118__.d(__webpack_exports__, \"CMCDStreamType\", function() { return CMCDStreamType; });\n/**\n * CMCD spec version\n */\nvar CMCDVersion = 1;\n/**\n * CMCD Object Type\n */\n\nvar CMCDObjectType;\n/**\n * CMCD Streaming Format\n */\n\n(function (CMCDObjectType) {\n  CMCDObjectType[\"MANIFEST\"] = \"m\";\n  CMCDObjectType[\"AUDIO\"] = \"a\";\n  CMCDObjectType[\"VIDEO\"] = \"v\";\n  CMCDObjectType[\"MUXED\"] = \"av\";\n  CMCDObjectType[\"INIT\"] = \"i\";\n  CMCDObjectType[\"CAPTION\"] = \"c\";\n  CMCDObjectType[\"TIMED_TEXT\"] = \"tt\";\n  CMCDObjectType[\"KEY\"] = \"k\";\n  CMCDObjectType[\"OTHER\"] = \"o\";\n})(CMCDObjectType || (CMCDObjectType = {}));\n\nvar CMCDStreamingFormat;\n/**\n * CMCD Streaming Type\n */\n\n(function (CMCDStreamingFormat) {\n  CMCDStreamingFormat[\"DASH\"] = \"d\";\n  CMCDStreamingFormat[\"HLS\"] = \"h\";\n  CMCDStreamingFormat[\"SMOOTH\"] = \"s\";\n  CMCDStreamingFormat[\"OTHER\"] = \"o\";\n})(CMCDStreamingFormat || (CMCDStreamingFormat = {}));\n\nvar CMCDStreamType;\n/**\n * CMCD Headers\n */\n\n(function (CMCDStreamType) {\n  CMCDStreamType[\"VOD\"] = \"v\";\n  CMCDStreamType[\"LIVE\"] = \"l\";\n})(CMCDStreamType || (CMCDStreamType = {}));\n\n/***/ }),\n\n/***/ \"./src/types/demuxer.ts\":\n/*!******************************!*\\\n  !*** ./src/types/demuxer.ts ***!\n  \\******************************/\n/*! exports provided: MetadataSchema */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_855961__) {\n\n\"use strict\";\n__nested_webpack_require_855961__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_855961__.d(__webpack_exports__, \"MetadataSchema\", function() { return MetadataSchema; });\nvar MetadataSchema;\n\n(function (MetadataSchema) {\n  MetadataSchema[\"audioId3\"] = \"org.id3\";\n  MetadataSchema[\"dateRange\"] = \"com.apple.quicktime.HLS\";\n  MetadataSchema[\"emsg\"] = \"https://aomedia.org/emsg/ID3\";\n})(MetadataSchema || (MetadataSchema = {}));\n\n/***/ }),\n\n/***/ \"./src/types/level.ts\":\n/*!****************************!*\\\n  !*** ./src/types/level.ts ***!\n  \\****************************/\n/*! exports provided: HlsSkip, getSkipValue, HlsUrlParameters, Level */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_856690__) {\n\n\"use strict\";\n__nested_webpack_require_856690__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_856690__.d(__webpack_exports__, \"HlsSkip\", function() { return HlsSkip; });\n/* harmony export (binding) */ __nested_webpack_require_856690__.d(__webpack_exports__, \"getSkipValue\", function() { return getSkipValue; });\n/* harmony export (binding) */ __nested_webpack_require_856690__.d(__webpack_exports__, \"HlsUrlParameters\", function() { return HlsUrlParameters; });\n/* harmony export (binding) */ __nested_webpack_require_856690__.d(__webpack_exports__, \"Level\", function() { return Level; });\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar HlsSkip;\n\n(function (HlsSkip) {\n  HlsSkip[\"No\"] = \"\";\n  HlsSkip[\"Yes\"] = \"YES\";\n  HlsSkip[\"v2\"] = \"v2\";\n})(HlsSkip || (HlsSkip = {}));\n\nfunction getSkipValue(details, msn) {\n  var canSkipUntil = details.canSkipUntil,\n      canSkipDateRanges = details.canSkipDateRanges,\n      endSN = details.endSN;\n  var snChangeGoal = msn !== undefined ? msn - endSN : 0;\n\n  if (canSkipUntil && snChangeGoal < canSkipUntil) {\n    if (canSkipDateRanges) {\n      return HlsSkip.v2;\n    }\n\n    return HlsSkip.Yes;\n  }\n\n  return HlsSkip.No;\n}\nvar HlsUrlParameters = /*#__PURE__*/function () {\n  function HlsUrlParameters(msn, part, skip) {\n    this.msn = void 0;\n    this.part = void 0;\n    this.skip = void 0;\n    this.msn = msn;\n    this.part = part;\n    this.skip = skip;\n  }\n\n  var _proto = HlsUrlParameters.prototype;\n\n  _proto.addDirectives = function addDirectives(uri) {\n    var url = new self.URL(uri);\n\n    if (this.msn !== undefined) {\n      url.searchParams.set('_HLS_msn', this.msn.toString());\n    }\n\n    if (this.part !== undefined) {\n      url.searchParams.set('_HLS_part', this.part.toString());\n    }\n\n    if (this.skip) {\n      url.searchParams.set('_HLS_skip', this.skip);\n    }\n\n    return url.toString();\n  };\n\n  return HlsUrlParameters;\n}();\nvar Level = /*#__PURE__*/function () {\n  function Level(data) {\n    this.attrs = void 0;\n    this.audioCodec = void 0;\n    this.bitrate = void 0;\n    this.codecSet = void 0;\n    this.height = void 0;\n    this.id = void 0;\n    this.name = void 0;\n    this.videoCodec = void 0;\n    this.width = void 0;\n    this.unknownCodecs = void 0;\n    this.audioGroupIds = void 0;\n    this.details = void 0;\n    this.fragmentError = 0;\n    this.loadError = 0;\n    this.loaded = void 0;\n    this.realBitrate = 0;\n    this.textGroupIds = void 0;\n    this.url = void 0;\n    this._urlId = 0;\n    this.url = [data.url];\n    this.attrs = data.attrs;\n    this.bitrate = data.bitrate;\n\n    if (data.details) {\n      this.details = data.details;\n    }\n\n    this.id = data.id || 0;\n    this.name = data.name;\n    this.width = data.width || 0;\n    this.height = data.height || 0;\n    this.audioCodec = data.audioCodec;\n    this.videoCodec = data.videoCodec;\n    this.unknownCodecs = data.unknownCodecs;\n    this.codecSet = [data.videoCodec, data.audioCodec].filter(function (c) {\n      return c;\n    }).join(',').replace(/\\.[^.,]+/g, '');\n  }\n\n  _createClass(Level, [{\n    key: \"maxBitrate\",\n    get: function get() {\n      return Math.max(this.realBitrate, this.bitrate);\n    }\n  }, {\n    key: \"uri\",\n    get: function get() {\n      return this.url[this._urlId] || '';\n    }\n  }, {\n    key: \"urlId\",\n    get: function get() {\n      return this._urlId;\n    },\n    set: function set(value) {\n      var newValue = value % this.url.length;\n\n      if (this._urlId !== newValue) {\n        this.details = undefined;\n        this._urlId = newValue;\n      }\n    }\n  }]);\n\n  return Level;\n}();\n\n/***/ }),\n\n/***/ \"./src/types/loader.ts\":\n/*!*****************************!*\\\n  !*** ./src/types/loader.ts ***!\n  \\*****************************/\n/*! exports provided: PlaylistContextType, PlaylistLevelType */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_861040__) {\n\n\"use strict\";\n__nested_webpack_require_861040__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_861040__.d(__webpack_exports__, \"PlaylistContextType\", function() { return PlaylistContextType; });\n/* harmony export (binding) */ __nested_webpack_require_861040__.d(__webpack_exports__, \"PlaylistLevelType\", function() { return PlaylistLevelType; });\nvar PlaylistContextType;\n\n(function (PlaylistContextType) {\n  PlaylistContextType[\"MANIFEST\"] = \"manifest\";\n  PlaylistContextType[\"LEVEL\"] = \"level\";\n  PlaylistContextType[\"AUDIO_TRACK\"] = \"audioTrack\";\n  PlaylistContextType[\"SUBTITLE_TRACK\"] = \"subtitleTrack\";\n})(PlaylistContextType || (PlaylistContextType = {}));\n\nvar PlaylistLevelType;\n\n(function (PlaylistLevelType) {\n  PlaylistLevelType[\"MAIN\"] = \"main\";\n  PlaylistLevelType[\"AUDIO\"] = \"audio\";\n  PlaylistLevelType[\"SUBTITLE\"] = \"subtitle\";\n})(PlaylistLevelType || (PlaylistLevelType = {}));\n\n/***/ }),\n\n/***/ \"./src/types/transmuxer.ts\":\n/*!*********************************!*\\\n  !*** ./src/types/transmuxer.ts ***!\n  \\*********************************/\n/*! exports provided: ChunkMetadata */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_862198__) {\n\n\"use strict\";\n__nested_webpack_require_862198__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_862198__.d(__webpack_exports__, \"ChunkMetadata\", function() { return ChunkMetadata; });\nvar ChunkMetadata = function ChunkMetadata(level, sn, id, size, part, partial) {\n  if (size === void 0) {\n    size = 0;\n  }\n\n  if (part === void 0) {\n    part = -1;\n  }\n\n  if (partial === void 0) {\n    partial = false;\n  }\n\n  this.level = void 0;\n  this.sn = void 0;\n  this.part = void 0;\n  this.id = void 0;\n  this.size = void 0;\n  this.partial = void 0;\n  this.transmuxing = getNewPerformanceTiming();\n  this.buffering = {\n    audio: getNewPerformanceTiming(),\n    video: getNewPerformanceTiming(),\n    audiovideo: getNewPerformanceTiming()\n  };\n  this.level = level;\n  this.sn = sn;\n  this.id = id;\n  this.size = size;\n  this.part = part;\n  this.partial = partial;\n};\n\nfunction getNewPerformanceTiming() {\n  return {\n    start: 0,\n    executeStart: 0,\n    executeEnd: 0,\n    end: 0\n  };\n}\n\n/***/ }),\n\n/***/ \"./src/utils/attr-list.ts\":\n/*!********************************!*\\\n  !*** ./src/utils/attr-list.ts ***!\n  \\********************************/\n/*! exports provided: AttrList */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_863440__) {\n\n\"use strict\";\n__nested_webpack_require_863440__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_863440__.d(__webpack_exports__, \"AttrList\", function() { return AttrList; });\nvar DECIMAL_RESOLUTION_REGEX = /^(\\d+)x(\\d+)$/; // eslint-disable-line no-useless-escape\n\nvar ATTR_LIST_REGEX = /\\s*(.+?)\\s*=((?:\\\".*?\\\")|.*?)(?:,|$)/g; // eslint-disable-line no-useless-escape\n// adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js\n\nvar AttrList = /*#__PURE__*/function () {\n  function AttrList(attrs) {\n    if (typeof attrs === 'string') {\n      attrs = AttrList.parseAttrList(attrs);\n    }\n\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        this[attr] = attrs[attr];\n      }\n    }\n  }\n\n  var _proto = AttrList.prototype;\n\n  _proto.decimalInteger = function decimalInteger(attrName) {\n    var intValue = parseInt(this[attrName], 10);\n\n    if (intValue > Number.MAX_SAFE_INTEGER) {\n      return Infinity;\n    }\n\n    return intValue;\n  };\n\n  _proto.hexadecimalInteger = function hexadecimalInteger(attrName) {\n    if (this[attrName]) {\n      var stringValue = (this[attrName] || '0x').slice(2);\n      stringValue = (stringValue.length & 1 ? '0' : '') + stringValue;\n      var value = new Uint8Array(stringValue.length / 2);\n\n      for (var i = 0; i < stringValue.length / 2; i++) {\n        value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);\n      }\n\n      return value;\n    } else {\n      return null;\n    }\n  };\n\n  _proto.hexadecimalIntegerAsNumber = function hexadecimalIntegerAsNumber(attrName) {\n    var intValue = parseInt(this[attrName], 16);\n\n    if (intValue > Number.MAX_SAFE_INTEGER) {\n      return Infinity;\n    }\n\n    return intValue;\n  };\n\n  _proto.decimalFloatingPoint = function decimalFloatingPoint(attrName) {\n    return parseFloat(this[attrName]);\n  };\n\n  _proto.optionalFloat = function optionalFloat(attrName, defaultValue) {\n    var value = this[attrName];\n    return value ? parseFloat(value) : defaultValue;\n  };\n\n  _proto.enumeratedString = function enumeratedString(attrName) {\n    return this[attrName];\n  };\n\n  _proto.bool = function bool(attrName) {\n    return this[attrName] === 'YES';\n  };\n\n  _proto.decimalResolution = function decimalResolution(attrName) {\n    var res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);\n\n    if (res === null) {\n      return undefined;\n    }\n\n    return {\n      width: parseInt(res[1], 10),\n      height: parseInt(res[2], 10)\n    };\n  };\n\n  AttrList.parseAttrList = function parseAttrList(input) {\n    var match;\n    var attrs = {};\n    var quote = '\"';\n    ATTR_LIST_REGEX.lastIndex = 0;\n\n    while ((match = ATTR_LIST_REGEX.exec(input)) !== null) {\n      var value = match[2];\n\n      if (value.indexOf(quote) === 0 && value.lastIndexOf(quote) === value.length - 1) {\n        value = value.slice(1, -1);\n      }\n\n      attrs[match[1]] = value;\n    }\n\n    return attrs;\n  };\n\n  return AttrList;\n}();\n\n/***/ }),\n\n/***/ \"./src/utils/binary-search.ts\":\n/*!************************************!*\\\n  !*** ./src/utils/binary-search.ts ***!\n  \\************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_866641__) {\n\n\"use strict\";\n__nested_webpack_require_866641__.r(__webpack_exports__);\nvar BinarySearch = {\n  /**\n   * Searches for an item in an array which matches a certain condition.\n   * This requires the condition to only match one item in the array,\n   * and for the array to be ordered.\n   *\n   * @param {Array<T>} list The array to search.\n   * @param {BinarySearchComparison<T>} comparisonFn\n   *      Called and provided a candidate item as the first argument.\n   *      Should return:\n   *          > -1 if the item should be located at a lower index than the provided item.\n   *          > 1 if the item should be located at a higher index than the provided item.\n   *          > 0 if the item is the item you're looking for.\n   *\n   * @return {T | null} The object if it is found or null otherwise.\n   */\n  search: function search(list, comparisonFn) {\n    var minIndex = 0;\n    var maxIndex = list.length - 1;\n    var currentIndex = null;\n    var currentElement = null;\n\n    while (minIndex <= maxIndex) {\n      currentIndex = (minIndex + maxIndex) / 2 | 0;\n      currentElement = list[currentIndex];\n      var comparisonResult = comparisonFn(currentElement);\n\n      if (comparisonResult > 0) {\n        minIndex = currentIndex + 1;\n      } else if (comparisonResult < 0) {\n        maxIndex = currentIndex - 1;\n      } else {\n        return currentElement;\n      }\n    }\n\n    return null;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (BinarySearch);\n\n/***/ }),\n\n/***/ \"./src/utils/buffer-helper.ts\":\n/*!************************************!*\\\n  !*** ./src/utils/buffer-helper.ts ***!\n  \\************************************/\n/*! exports provided: BufferHelper */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_868382__) {\n\n\"use strict\";\n__nested_webpack_require_868382__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_868382__.d(__webpack_exports__, \"BufferHelper\", function() { return BufferHelper; });\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_868382__(/*! ./logger */ \"./src/utils/logger.ts\");\n/**\n * @module BufferHelper\n *\n * Providing methods dealing with buffer length retrieval for example.\n *\n * In general, a helper around HTML5 MediaElement TimeRanges gathered from `buffered` property.\n *\n * Also @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered\n */\n\nvar noopBuffered = {\n  length: 0,\n  start: function start() {\n    return 0;\n  },\n  end: function end() {\n    return 0;\n  }\n};\nvar BufferHelper = /*#__PURE__*/function () {\n  function BufferHelper() {}\n\n  /**\n   * Return true if `media`'s buffered include `position`\n   * @param {Bufferable} media\n   * @param {number} position\n   * @returns {boolean}\n   */\n  BufferHelper.isBuffered = function isBuffered(media, position) {\n    try {\n      if (media) {\n        var buffered = BufferHelper.getBuffered(media);\n\n        for (var i = 0; i < buffered.length; i++) {\n          if (position >= buffered.start(i) && position <= buffered.end(i)) {\n            return true;\n          }\n        }\n      }\n    } catch (error) {// this is to catch\n      // InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':\n      // This SourceBuffer has been removed from the parent media source\n    }\n\n    return false;\n  };\n\n  BufferHelper.bufferInfo = function bufferInfo(media, pos, maxHoleDuration) {\n    try {\n      if (media) {\n        var vbuffered = BufferHelper.getBuffered(media);\n        var buffered = [];\n        var i;\n\n        for (i = 0; i < vbuffered.length; i++) {\n          buffered.push({\n            start: vbuffered.start(i),\n            end: vbuffered.end(i)\n          });\n        }\n\n        return this.bufferedInfo(buffered, pos, maxHoleDuration);\n      }\n    } catch (error) {// this is to catch\n      // InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':\n      // This SourceBuffer has been removed from the parent media source\n    }\n\n    return {\n      len: 0,\n      start: pos,\n      end: pos,\n      nextStart: undefined\n    };\n  };\n\n  BufferHelper.bufferedInfo = function bufferedInfo(buffered, pos, maxHoleDuration) {\n    pos = Math.max(0, pos); // sort on buffer.start/smaller end (IE does not always return sorted buffered range)\n\n    buffered.sort(function (a, b) {\n      var diff = a.start - b.start;\n\n      if (diff) {\n        return diff;\n      } else {\n        return b.end - a.end;\n      }\n    });\n    var buffered2 = [];\n\n    if (maxHoleDuration) {\n      // there might be some small holes between buffer time range\n      // consider that holes smaller than maxHoleDuration are irrelevant and build another\n      // buffer time range representations that discards those holes\n      for (var i = 0; i < buffered.length; i++) {\n        var buf2len = buffered2.length;\n\n        if (buf2len) {\n          var buf2end = buffered2[buf2len - 1].end; // if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)\n\n          if (buffered[i].start - buf2end < maxHoleDuration) {\n            // merge overlapping time ranges\n            // update lastRange.end only if smaller than item.end\n            // e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)\n            // whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])\n            if (buffered[i].end > buf2end) {\n              buffered2[buf2len - 1].end = buffered[i].end;\n            }\n          } else {\n            // big hole\n            buffered2.push(buffered[i]);\n          }\n        } else {\n          // first value\n          buffered2.push(buffered[i]);\n        }\n      }\n    } else {\n      buffered2 = buffered;\n    }\n\n    var bufferLen = 0; // bufferStartNext can possibly be undefined based on the conditional logic below\n\n    var bufferStartNext; // bufferStart and bufferEnd are buffer boundaries around current video position\n\n    var bufferStart = pos;\n    var bufferEnd = pos;\n\n    for (var _i = 0; _i < buffered2.length; _i++) {\n      var start = buffered2[_i].start;\n      var end = buffered2[_i].end; // logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));\n\n      if (pos + maxHoleDuration >= start && pos < end) {\n        // play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length\n        bufferStart = start;\n        bufferEnd = end;\n        bufferLen = bufferEnd - pos;\n      } else if (pos + maxHoleDuration < start) {\n        bufferStartNext = start;\n        break;\n      }\n    }\n\n    return {\n      len: bufferLen,\n      start: bufferStart || 0,\n      end: bufferEnd || 0,\n      nextStart: bufferStartNext\n    };\n  }\n  /**\n   * Safe method to get buffered property.\n   * SourceBuffer.buffered may throw if SourceBuffer is removed from it's MediaSource\n   */\n  ;\n\n  BufferHelper.getBuffered = function getBuffered(media) {\n    try {\n      return media.buffered;\n    } catch (e) {\n      _logger__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].log('failed to get media.buffered', e);\n      return noopBuffered;\n    }\n  };\n\n  return BufferHelper;\n}();\n\n/***/ }),\n\n/***/ \"./src/utils/cea-608-parser.ts\":\n/*!*************************************!*\\\n  !*** ./src/utils/cea-608-parser.ts ***!\n  \\*************************************/\n/*! exports provided: Row, CaptionScreen, default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_874012__) {\n\n\"use strict\";\n__nested_webpack_require_874012__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_874012__.d(__webpack_exports__, \"Row\", function() { return Row; });\n/* harmony export (binding) */ __nested_webpack_require_874012__.d(__webpack_exports__, \"CaptionScreen\", function() { return CaptionScreen; });\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_874012__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n\n/**\n *\n * This code was ported from the dash.js project at:\n *   https://github.com/Dash-Industry-Forum/dash.js/blob/development/externals/cea608-parser.js\n *   https://github.com/Dash-Industry-Forum/dash.js/commit/8269b26a761e0853bb21d78780ed945144ecdd4d#diff-71bc295a2d6b6b7093a1d3290d53a4b2\n *\n * The original copyright appears below:\n *\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2015-2016, DASH Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  1. Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  2. Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes\n */\n\nvar specialCea608CharsCodes = {\n  0x2a: 0xe1,\n  // lowercase a, acute accent\n  0x5c: 0xe9,\n  // lowercase e, acute accent\n  0x5e: 0xed,\n  // lowercase i, acute accent\n  0x5f: 0xf3,\n  // lowercase o, acute accent\n  0x60: 0xfa,\n  // lowercase u, acute accent\n  0x7b: 0xe7,\n  // lowercase c with cedilla\n  0x7c: 0xf7,\n  // division symbol\n  0x7d: 0xd1,\n  // uppercase N tilde\n  0x7e: 0xf1,\n  // lowercase n tilde\n  0x7f: 0x2588,\n  // Full block\n  // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n  // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F\n  // THIS MEANS THAT \\x50 MUST BE ADDED TO THE VALUES\n  0x80: 0xae,\n  // Registered symbol (R)\n  0x81: 0xb0,\n  // degree sign\n  0x82: 0xbd,\n  // 1/2 symbol\n  0x83: 0xbf,\n  // Inverted (open) question mark\n  0x84: 0x2122,\n  // Trademark symbol (TM)\n  0x85: 0xa2,\n  // Cents symbol\n  0x86: 0xa3,\n  // Pounds sterling\n  0x87: 0x266a,\n  // Music 8'th note\n  0x88: 0xe0,\n  // lowercase a, grave accent\n  0x89: 0x20,\n  // transparent space (regular)\n  0x8a: 0xe8,\n  // lowercase e, grave accent\n  0x8b: 0xe2,\n  // lowercase a, circumflex accent\n  0x8c: 0xea,\n  // lowercase e, circumflex accent\n  0x8d: 0xee,\n  // lowercase i, circumflex accent\n  0x8e: 0xf4,\n  // lowercase o, circumflex accent\n  0x8f: 0xfb,\n  // lowercase u, circumflex accent\n  // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n  // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F\n  0x90: 0xc1,\n  // capital letter A with acute\n  0x91: 0xc9,\n  // capital letter E with acute\n  0x92: 0xd3,\n  // capital letter O with acute\n  0x93: 0xda,\n  // capital letter U with acute\n  0x94: 0xdc,\n  // capital letter U with diaresis\n  0x95: 0xfc,\n  // lowercase letter U with diaeresis\n  0x96: 0x2018,\n  // opening single quote\n  0x97: 0xa1,\n  // inverted exclamation mark\n  0x98: 0x2a,\n  // asterisk\n  0x99: 0x2019,\n  // closing single quote\n  0x9a: 0x2501,\n  // box drawings heavy horizontal\n  0x9b: 0xa9,\n  // copyright sign\n  0x9c: 0x2120,\n  // Service mark\n  0x9d: 0x2022,\n  // (round) bullet\n  0x9e: 0x201c,\n  // Left double quotation mark\n  0x9f: 0x201d,\n  // Right double quotation mark\n  0xa0: 0xc0,\n  // uppercase A, grave accent\n  0xa1: 0xc2,\n  // uppercase A, circumflex\n  0xa2: 0xc7,\n  // uppercase C with cedilla\n  0xa3: 0xc8,\n  // uppercase E, grave accent\n  0xa4: 0xca,\n  // uppercase E, circumflex\n  0xa5: 0xcb,\n  // capital letter E with diaresis\n  0xa6: 0xeb,\n  // lowercase letter e with diaresis\n  0xa7: 0xce,\n  // uppercase I, circumflex\n  0xa8: 0xcf,\n  // uppercase I, with diaresis\n  0xa9: 0xef,\n  // lowercase i, with diaresis\n  0xaa: 0xd4,\n  // uppercase O, circumflex\n  0xab: 0xd9,\n  // uppercase U, grave accent\n  0xac: 0xf9,\n  // lowercase u, grave accent\n  0xad: 0xdb,\n  // uppercase U, circumflex\n  0xae: 0xab,\n  // left-pointing double angle quotation mark\n  0xaf: 0xbb,\n  // right-pointing double angle quotation mark\n  // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n  // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F\n  0xb0: 0xc3,\n  // Uppercase A, tilde\n  0xb1: 0xe3,\n  // Lowercase a, tilde\n  0xb2: 0xcd,\n  // Uppercase I, acute accent\n  0xb3: 0xcc,\n  // Uppercase I, grave accent\n  0xb4: 0xec,\n  // Lowercase i, grave accent\n  0xb5: 0xd2,\n  // Uppercase O, grave accent\n  0xb6: 0xf2,\n  // Lowercase o, grave accent\n  0xb7: 0xd5,\n  // Uppercase O, tilde\n  0xb8: 0xf5,\n  // Lowercase o, tilde\n  0xb9: 0x7b,\n  // Open curly brace\n  0xba: 0x7d,\n  // Closing curly brace\n  0xbb: 0x5c,\n  // Backslash\n  0xbc: 0x5e,\n  // Caret\n  0xbd: 0x5f,\n  // Underscore\n  0xbe: 0x7c,\n  // Pipe (vertical line)\n  0xbf: 0x223c,\n  // Tilde operator\n  0xc0: 0xc4,\n  // Uppercase A, umlaut\n  0xc1: 0xe4,\n  // Lowercase A, umlaut\n  0xc2: 0xd6,\n  // Uppercase O, umlaut\n  0xc3: 0xf6,\n  // Lowercase o, umlaut\n  0xc4: 0xdf,\n  // Esszett (sharp S)\n  0xc5: 0xa5,\n  // Yen symbol\n  0xc6: 0xa4,\n  // Generic currency sign\n  0xc7: 0x2503,\n  // Box drawings heavy vertical\n  0xc8: 0xc5,\n  // Uppercase A, ring\n  0xc9: 0xe5,\n  // Lowercase A, ring\n  0xca: 0xd8,\n  // Uppercase O, stroke\n  0xcb: 0xf8,\n  // Lowercase o, strok\n  0xcc: 0x250f,\n  // Box drawings heavy down and right\n  0xcd: 0x2513,\n  // Box drawings heavy down and left\n  0xce: 0x2517,\n  // Box drawings heavy up and right\n  0xcf: 0x251b // Box drawings heavy up and left\n\n};\n/**\n * Utils\n */\n\nvar getCharForByte = function getCharForByte(_byte) {\n  var charCode = _byte;\n\n  if (specialCea608CharsCodes.hasOwnProperty(_byte)) {\n    charCode = specialCea608CharsCodes[_byte];\n  }\n\n  return String.fromCharCode(charCode);\n};\n\nvar NR_ROWS = 15;\nvar NR_COLS = 100; // Tables to look up row from PAC data\n\nvar rowsLowCh1 = {\n  0x11: 1,\n  0x12: 3,\n  0x15: 5,\n  0x16: 7,\n  0x17: 9,\n  0x10: 11,\n  0x13: 12,\n  0x14: 14\n};\nvar rowsHighCh1 = {\n  0x11: 2,\n  0x12: 4,\n  0x15: 6,\n  0x16: 8,\n  0x17: 10,\n  0x13: 13,\n  0x14: 15\n};\nvar rowsLowCh2 = {\n  0x19: 1,\n  0x1a: 3,\n  0x1d: 5,\n  0x1e: 7,\n  0x1f: 9,\n  0x18: 11,\n  0x1b: 12,\n  0x1c: 14\n};\nvar rowsHighCh2 = {\n  0x19: 2,\n  0x1a: 4,\n  0x1d: 6,\n  0x1e: 8,\n  0x1f: 10,\n  0x1b: 13,\n  0x1c: 15\n};\nvar backgroundColors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'black', 'transparent'];\nvar VerboseLevel;\n\n(function (VerboseLevel) {\n  VerboseLevel[VerboseLevel[\"ERROR\"] = 0] = \"ERROR\";\n  VerboseLevel[VerboseLevel[\"TEXT\"] = 1] = \"TEXT\";\n  VerboseLevel[VerboseLevel[\"WARNING\"] = 2] = \"WARNING\";\n  VerboseLevel[VerboseLevel[\"INFO\"] = 2] = \"INFO\";\n  VerboseLevel[VerboseLevel[\"DEBUG\"] = 3] = \"DEBUG\";\n  VerboseLevel[VerboseLevel[\"DATA\"] = 3] = \"DATA\";\n})(VerboseLevel || (VerboseLevel = {}));\n\nvar CaptionsLogger = /*#__PURE__*/function () {\n  function CaptionsLogger() {\n    this.time = null;\n    this.verboseLevel = VerboseLevel.ERROR;\n  }\n\n  var _proto = CaptionsLogger.prototype;\n\n  _proto.log = function log(severity, msg) {\n    if (this.verboseLevel >= severity) {\n      _utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].log(this.time + \" [\" + severity + \"] \" + msg);\n    }\n  };\n\n  return CaptionsLogger;\n}();\n\nvar numArrayToHexArray = function numArrayToHexArray(numArray) {\n  var hexArray = [];\n\n  for (var j = 0; j < numArray.length; j++) {\n    hexArray.push(numArray[j].toString(16));\n  }\n\n  return hexArray;\n};\n\nvar PenState = /*#__PURE__*/function () {\n  function PenState(foreground, underline, italics, background, flash) {\n    this.foreground = void 0;\n    this.underline = void 0;\n    this.italics = void 0;\n    this.background = void 0;\n    this.flash = void 0;\n    this.foreground = foreground || 'white';\n    this.underline = underline || false;\n    this.italics = italics || false;\n    this.background = background || 'black';\n    this.flash = flash || false;\n  }\n\n  var _proto2 = PenState.prototype;\n\n  _proto2.reset = function reset() {\n    this.foreground = 'white';\n    this.underline = false;\n    this.italics = false;\n    this.background = 'black';\n    this.flash = false;\n  };\n\n  _proto2.setStyles = function setStyles(styles) {\n    var attribs = ['foreground', 'underline', 'italics', 'background', 'flash'];\n\n    for (var i = 0; i < attribs.length; i++) {\n      var style = attribs[i];\n\n      if (styles.hasOwnProperty(style)) {\n        this[style] = styles[style];\n      }\n    }\n  };\n\n  _proto2.isDefault = function isDefault() {\n    return this.foreground === 'white' && !this.underline && !this.italics && this.background === 'black' && !this.flash;\n  };\n\n  _proto2.equals = function equals(other) {\n    return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;\n  };\n\n  _proto2.copy = function copy(newPenState) {\n    this.foreground = newPenState.foreground;\n    this.underline = newPenState.underline;\n    this.italics = newPenState.italics;\n    this.background = newPenState.background;\n    this.flash = newPenState.flash;\n  };\n\n  _proto2.toString = function toString() {\n    return 'color=' + this.foreground + ', underline=' + this.underline + ', italics=' + this.italics + ', background=' + this.background + ', flash=' + this.flash;\n  };\n\n  return PenState;\n}();\n/**\n * Unicode character with styling and background.\n * @constructor\n */\n\n\nvar StyledUnicodeChar = /*#__PURE__*/function () {\n  function StyledUnicodeChar(uchar, foreground, underline, italics, background, flash) {\n    this.uchar = void 0;\n    this.penState = void 0;\n    this.uchar = uchar || ' '; // unicode character\n\n    this.penState = new PenState(foreground, underline, italics, background, flash);\n  }\n\n  var _proto3 = StyledUnicodeChar.prototype;\n\n  _proto3.reset = function reset() {\n    this.uchar = ' ';\n    this.penState.reset();\n  };\n\n  _proto3.setChar = function setChar(uchar, newPenState) {\n    this.uchar = uchar;\n    this.penState.copy(newPenState);\n  };\n\n  _proto3.setPenState = function setPenState(newPenState) {\n    this.penState.copy(newPenState);\n  };\n\n  _proto3.equals = function equals(other) {\n    return this.uchar === other.uchar && this.penState.equals(other.penState);\n  };\n\n  _proto3.copy = function copy(newChar) {\n    this.uchar = newChar.uchar;\n    this.penState.copy(newChar.penState);\n  };\n\n  _proto3.isEmpty = function isEmpty() {\n    return this.uchar === ' ' && this.penState.isDefault();\n  };\n\n  return StyledUnicodeChar;\n}();\n/**\n * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.\n * @constructor\n */\n\n\nvar Row = /*#__PURE__*/function () {\n  function Row(logger) {\n    this.chars = void 0;\n    this.pos = void 0;\n    this.currPenState = void 0;\n    this.cueStartTime = void 0;\n    this.logger = void 0;\n    this.chars = [];\n\n    for (var i = 0; i < NR_COLS; i++) {\n      this.chars.push(new StyledUnicodeChar());\n    }\n\n    this.logger = logger;\n    this.pos = 0;\n    this.currPenState = new PenState();\n  }\n\n  var _proto4 = Row.prototype;\n\n  _proto4.equals = function equals(other) {\n    var equal = true;\n\n    for (var i = 0; i < NR_COLS; i++) {\n      if (!this.chars[i].equals(other.chars[i])) {\n        equal = false;\n        break;\n      }\n    }\n\n    return equal;\n  };\n\n  _proto4.copy = function copy(other) {\n    for (var i = 0; i < NR_COLS; i++) {\n      this.chars[i].copy(other.chars[i]);\n    }\n  };\n\n  _proto4.isEmpty = function isEmpty() {\n    var empty = true;\n\n    for (var i = 0; i < NR_COLS; i++) {\n      if (!this.chars[i].isEmpty()) {\n        empty = false;\n        break;\n      }\n    }\n\n    return empty;\n  }\n  /**\n   *  Set the cursor to a valid column.\n   */\n  ;\n\n  _proto4.setCursor = function setCursor(absPos) {\n    if (this.pos !== absPos) {\n      this.pos = absPos;\n    }\n\n    if (this.pos < 0) {\n      this.logger.log(VerboseLevel.DEBUG, 'Negative cursor position ' + this.pos);\n      this.pos = 0;\n    } else if (this.pos > NR_COLS) {\n      this.logger.log(VerboseLevel.DEBUG, 'Too large cursor position ' + this.pos);\n      this.pos = NR_COLS;\n    }\n  }\n  /**\n   * Move the cursor relative to current position.\n   */\n  ;\n\n  _proto4.moveCursor = function moveCursor(relPos) {\n    var newPos = this.pos + relPos;\n\n    if (relPos > 1) {\n      for (var i = this.pos + 1; i < newPos + 1; i++) {\n        this.chars[i].setPenState(this.currPenState);\n      }\n    }\n\n    this.setCursor(newPos);\n  }\n  /**\n   * Backspace, move one step back and clear character.\n   */\n  ;\n\n  _proto4.backSpace = function backSpace() {\n    this.moveCursor(-1);\n    this.chars[this.pos].setChar(' ', this.currPenState);\n  };\n\n  _proto4.insertChar = function insertChar(_byte2) {\n    if (_byte2 >= 0x90) {\n      // Extended char\n      this.backSpace();\n    }\n\n    var _char = getCharForByte(_byte2);\n\n    if (this.pos >= NR_COLS) {\n      this.logger.log(VerboseLevel.ERROR, 'Cannot insert ' + _byte2.toString(16) + ' (' + _char + ') at position ' + this.pos + '. Skipping it!');\n      return;\n    }\n\n    this.chars[this.pos].setChar(_char, this.currPenState);\n    this.moveCursor(1);\n  };\n\n  _proto4.clearFromPos = function clearFromPos(startPos) {\n    var i;\n\n    for (i = startPos; i < NR_COLS; i++) {\n      this.chars[i].reset();\n    }\n  };\n\n  _proto4.clear = function clear() {\n    this.clearFromPos(0);\n    this.pos = 0;\n    this.currPenState.reset();\n  };\n\n  _proto4.clearToEndOfRow = function clearToEndOfRow() {\n    this.clearFromPos(this.pos);\n  };\n\n  _proto4.getTextString = function getTextString() {\n    var chars = [];\n    var empty = true;\n\n    for (var i = 0; i < NR_COLS; i++) {\n      var _char2 = this.chars[i].uchar;\n\n      if (_char2 !== ' ') {\n        empty = false;\n      }\n\n      chars.push(_char2);\n    }\n\n    if (empty) {\n      return '';\n    } else {\n      return chars.join('');\n    }\n  };\n\n  _proto4.setPenStyles = function setPenStyles(styles) {\n    this.currPenState.setStyles(styles);\n    var currChar = this.chars[this.pos];\n    currChar.setPenState(this.currPenState);\n  };\n\n  return Row;\n}();\n/**\n * Keep a CEA-608 screen of 32x15 styled characters\n * @constructor\n */\n\nvar CaptionScreen = /*#__PURE__*/function () {\n  function CaptionScreen(logger) {\n    this.rows = void 0;\n    this.currRow = void 0;\n    this.nrRollUpRows = void 0;\n    this.lastOutputScreen = void 0;\n    this.logger = void 0;\n    this.rows = [];\n\n    for (var i = 0; i < NR_ROWS; i++) {\n      this.rows.push(new Row(logger));\n    } // Note that we use zero-based numbering (0-14)\n\n\n    this.logger = logger;\n    this.currRow = NR_ROWS - 1;\n    this.nrRollUpRows = null;\n    this.lastOutputScreen = null;\n    this.reset();\n  }\n\n  var _proto5 = CaptionScreen.prototype;\n\n  _proto5.reset = function reset() {\n    for (var i = 0; i < NR_ROWS; i++) {\n      this.rows[i].clear();\n    }\n\n    this.currRow = NR_ROWS - 1;\n  };\n\n  _proto5.equals = function equals(other) {\n    var equal = true;\n\n    for (var i = 0; i < NR_ROWS; i++) {\n      if (!this.rows[i].equals(other.rows[i])) {\n        equal = false;\n        break;\n      }\n    }\n\n    return equal;\n  };\n\n  _proto5.copy = function copy(other) {\n    for (var i = 0; i < NR_ROWS; i++) {\n      this.rows[i].copy(other.rows[i]);\n    }\n  };\n\n  _proto5.isEmpty = function isEmpty() {\n    var empty = true;\n\n    for (var i = 0; i < NR_ROWS; i++) {\n      if (!this.rows[i].isEmpty()) {\n        empty = false;\n        break;\n      }\n    }\n\n    return empty;\n  };\n\n  _proto5.backSpace = function backSpace() {\n    var row = this.rows[this.currRow];\n    row.backSpace();\n  };\n\n  _proto5.clearToEndOfRow = function clearToEndOfRow() {\n    var row = this.rows[this.currRow];\n    row.clearToEndOfRow();\n  }\n  /**\n   * Insert a character (without styling) in the current row.\n   */\n  ;\n\n  _proto5.insertChar = function insertChar(_char3) {\n    var row = this.rows[this.currRow];\n    row.insertChar(_char3);\n  };\n\n  _proto5.setPen = function setPen(styles) {\n    var row = this.rows[this.currRow];\n    row.setPenStyles(styles);\n  };\n\n  _proto5.moveCursor = function moveCursor(relPos) {\n    var row = this.rows[this.currRow];\n    row.moveCursor(relPos);\n  };\n\n  _proto5.setCursor = function setCursor(absPos) {\n    this.logger.log(VerboseLevel.INFO, 'setCursor: ' + absPos);\n    var row = this.rows[this.currRow];\n    row.setCursor(absPos);\n  };\n\n  _proto5.setPAC = function setPAC(pacData) {\n    this.logger.log(VerboseLevel.INFO, 'pacData = ' + JSON.stringify(pacData));\n    var newRow = pacData.row - 1;\n\n    if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) {\n      newRow = this.nrRollUpRows - 1;\n    } // Make sure this only affects Roll-up Captions by checking this.nrRollUpRows\n\n\n    if (this.nrRollUpRows && this.currRow !== newRow) {\n      // clear all rows first\n      for (var i = 0; i < NR_ROWS; i++) {\n        this.rows[i].clear();\n      } // Copy this.nrRollUpRows rows from lastOutputScreen and place it in the newRow location\n      // topRowIndex - the start of rows to copy (inclusive index)\n\n\n      var topRowIndex = this.currRow + 1 - this.nrRollUpRows; // We only copy if the last position was already shown.\n      // We use the cueStartTime value to check this.\n\n      var lastOutputScreen = this.lastOutputScreen;\n\n      if (lastOutputScreen) {\n        var prevLineTime = lastOutputScreen.rows[topRowIndex].cueStartTime;\n        var time = this.logger.time;\n\n        if (prevLineTime && time !== null && prevLineTime < time) {\n          for (var _i = 0; _i < this.nrRollUpRows; _i++) {\n            this.rows[newRow - this.nrRollUpRows + _i + 1].copy(lastOutputScreen.rows[topRowIndex + _i]);\n          }\n        }\n      }\n    }\n\n    this.currRow = newRow;\n    var row = this.rows[this.currRow];\n\n    if (pacData.indent !== null) {\n      var indent = pacData.indent;\n      var prevPos = Math.max(indent - 1, 0);\n      row.setCursor(pacData.indent);\n      pacData.color = row.chars[prevPos].penState.foreground;\n    }\n\n    var styles = {\n      foreground: pacData.color,\n      underline: pacData.underline,\n      italics: pacData.italics,\n      background: 'black',\n      flash: false\n    };\n    this.setPen(styles);\n  }\n  /**\n   * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).\n   */\n  ;\n\n  _proto5.setBkgData = function setBkgData(bkgData) {\n    this.logger.log(VerboseLevel.INFO, 'bkgData = ' + JSON.stringify(bkgData));\n    this.backSpace();\n    this.setPen(bkgData);\n    this.insertChar(0x20); // Space\n  };\n\n  _proto5.setRollUpRows = function setRollUpRows(nrRows) {\n    this.nrRollUpRows = nrRows;\n  };\n\n  _proto5.rollUp = function rollUp() {\n    if (this.nrRollUpRows === null) {\n      this.logger.log(VerboseLevel.DEBUG, 'roll_up but nrRollUpRows not set yet');\n      return; // Not properly setup\n    }\n\n    this.logger.log(VerboseLevel.TEXT, this.getDisplayText());\n    var topRowIndex = this.currRow + 1 - this.nrRollUpRows;\n    var topRow = this.rows.splice(topRowIndex, 1)[0];\n    topRow.clear();\n    this.rows.splice(this.currRow, 0, topRow);\n    this.logger.log(VerboseLevel.INFO, 'Rolling up'); // this.logger.log(VerboseLevel.TEXT, this.get_display_text())\n  }\n  /**\n   * Get all non-empty rows with as unicode text.\n   */\n  ;\n\n  _proto5.getDisplayText = function getDisplayText(asOneRow) {\n    asOneRow = asOneRow || false;\n    var displayText = [];\n    var text = '';\n    var rowNr = -1;\n\n    for (var i = 0; i < NR_ROWS; i++) {\n      var rowText = this.rows[i].getTextString();\n\n      if (rowText) {\n        rowNr = i + 1;\n\n        if (asOneRow) {\n          displayText.push('Row ' + rowNr + \": '\" + rowText + \"'\");\n        } else {\n          displayText.push(rowText.trim());\n        }\n      }\n    }\n\n    if (displayText.length > 0) {\n      if (asOneRow) {\n        text = '[' + displayText.join(' | ') + ']';\n      } else {\n        text = displayText.join('\\n');\n      }\n    }\n\n    return text;\n  };\n\n  _proto5.getTextAndFormat = function getTextAndFormat() {\n    return this.rows;\n  };\n\n  return CaptionScreen;\n}(); // var modes = ['MODE_ROLL-UP', 'MODE_POP-ON', 'MODE_PAINT-ON', 'MODE_TEXT'];\n\nvar Cea608Channel = /*#__PURE__*/function () {\n  function Cea608Channel(channelNumber, outputFilter, logger) {\n    this.chNr = void 0;\n    this.outputFilter = void 0;\n    this.mode = void 0;\n    this.verbose = void 0;\n    this.displayedMemory = void 0;\n    this.nonDisplayedMemory = void 0;\n    this.lastOutputScreen = void 0;\n    this.currRollUpRow = void 0;\n    this.writeScreen = void 0;\n    this.cueStartTime = void 0;\n    this.logger = void 0;\n    this.chNr = channelNumber;\n    this.outputFilter = outputFilter;\n    this.mode = null;\n    this.verbose = 0;\n    this.displayedMemory = new CaptionScreen(logger);\n    this.nonDisplayedMemory = new CaptionScreen(logger);\n    this.lastOutputScreen = new CaptionScreen(logger);\n    this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];\n    this.writeScreen = this.displayedMemory;\n    this.mode = null;\n    this.cueStartTime = null; // Keeps track of where a cue started.\n\n    this.logger = logger;\n  }\n\n  var _proto6 = Cea608Channel.prototype;\n\n  _proto6.reset = function reset() {\n    this.mode = null;\n    this.displayedMemory.reset();\n    this.nonDisplayedMemory.reset();\n    this.lastOutputScreen.reset();\n    this.outputFilter.reset();\n    this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];\n    this.writeScreen = this.displayedMemory;\n    this.mode = null;\n    this.cueStartTime = null;\n  };\n\n  _proto6.getHandler = function getHandler() {\n    return this.outputFilter;\n  };\n\n  _proto6.setHandler = function setHandler(newHandler) {\n    this.outputFilter = newHandler;\n  };\n\n  _proto6.setPAC = function setPAC(pacData) {\n    this.writeScreen.setPAC(pacData);\n  };\n\n  _proto6.setBkgData = function setBkgData(bkgData) {\n    this.writeScreen.setBkgData(bkgData);\n  };\n\n  _proto6.setMode = function setMode(newMode) {\n    if (newMode === this.mode) {\n      return;\n    }\n\n    this.mode = newMode;\n    this.logger.log(VerboseLevel.INFO, 'MODE=' + newMode);\n\n    if (this.mode === 'MODE_POP-ON') {\n      this.writeScreen = this.nonDisplayedMemory;\n    } else {\n      this.writeScreen = this.displayedMemory;\n      this.writeScreen.reset();\n    }\n\n    if (this.mode !== 'MODE_ROLL-UP') {\n      this.displayedMemory.nrRollUpRows = null;\n      this.nonDisplayedMemory.nrRollUpRows = null;\n    }\n\n    this.mode = newMode;\n  };\n\n  _proto6.insertChars = function insertChars(chars) {\n    for (var i = 0; i < chars.length; i++) {\n      this.writeScreen.insertChar(chars[i]);\n    }\n\n    var screen = this.writeScreen === this.displayedMemory ? 'DISP' : 'NON_DISP';\n    this.logger.log(VerboseLevel.INFO, screen + ': ' + this.writeScreen.getDisplayText(true));\n\n    if (this.mode === 'MODE_PAINT-ON' || this.mode === 'MODE_ROLL-UP') {\n      this.logger.log(VerboseLevel.TEXT, 'DISPLAYED: ' + this.displayedMemory.getDisplayText(true));\n      this.outputDataUpdate();\n    }\n  };\n\n  _proto6.ccRCL = function ccRCL() {\n    // Resume Caption Loading (switch mode to Pop On)\n    this.logger.log(VerboseLevel.INFO, 'RCL - Resume Caption Loading');\n    this.setMode('MODE_POP-ON');\n  };\n\n  _proto6.ccBS = function ccBS() {\n    // BackSpace\n    this.logger.log(VerboseLevel.INFO, 'BS - BackSpace');\n\n    if (this.mode === 'MODE_TEXT') {\n      return;\n    }\n\n    this.writeScreen.backSpace();\n\n    if (this.writeScreen === this.displayedMemory) {\n      this.outputDataUpdate();\n    }\n  };\n\n  _proto6.ccAOF = function ccAOF() {// Reserved (formerly Alarm Off)\n  };\n\n  _proto6.ccAON = function ccAON() {// Reserved (formerly Alarm On)\n  };\n\n  _proto6.ccDER = function ccDER() {\n    // Delete to End of Row\n    this.logger.log(VerboseLevel.INFO, 'DER- Delete to End of Row');\n    this.writeScreen.clearToEndOfRow();\n    this.outputDataUpdate();\n  };\n\n  _proto6.ccRU = function ccRU(nrRows) {\n    // Roll-Up Captions-2,3,or 4 Rows\n    this.logger.log(VerboseLevel.INFO, 'RU(' + nrRows + ') - Roll Up');\n    this.writeScreen = this.displayedMemory;\n    this.setMode('MODE_ROLL-UP');\n    this.writeScreen.setRollUpRows(nrRows);\n  };\n\n  _proto6.ccFON = function ccFON() {\n    // Flash On\n    this.logger.log(VerboseLevel.INFO, 'FON - Flash On');\n    this.writeScreen.setPen({\n      flash: true\n    });\n  };\n\n  _proto6.ccRDC = function ccRDC() {\n    // Resume Direct Captioning (switch mode to PaintOn)\n    this.logger.log(VerboseLevel.INFO, 'RDC - Resume Direct Captioning');\n    this.setMode('MODE_PAINT-ON');\n  };\n\n  _proto6.ccTR = function ccTR() {\n    // Text Restart in text mode (not supported, however)\n    this.logger.log(VerboseLevel.INFO, 'TR');\n    this.setMode('MODE_TEXT');\n  };\n\n  _proto6.ccRTD = function ccRTD() {\n    // Resume Text Display in Text mode (not supported, however)\n    this.logger.log(VerboseLevel.INFO, 'RTD');\n    this.setMode('MODE_TEXT');\n  };\n\n  _proto6.ccEDM = function ccEDM() {\n    // Erase Displayed Memory\n    this.logger.log(VerboseLevel.INFO, 'EDM - Erase Displayed Memory');\n    this.displayedMemory.reset();\n    this.outputDataUpdate(true);\n  };\n\n  _proto6.ccCR = function ccCR() {\n    // Carriage Return\n    this.logger.log(VerboseLevel.INFO, 'CR - Carriage Return');\n    this.writeScreen.rollUp();\n    this.outputDataUpdate(true);\n  };\n\n  _proto6.ccENM = function ccENM() {\n    // Erase Non-Displayed Memory\n    this.logger.log(VerboseLevel.INFO, 'ENM - Erase Non-displayed Memory');\n    this.nonDisplayedMemory.reset();\n  };\n\n  _proto6.ccEOC = function ccEOC() {\n    // End of Caption (Flip Memories)\n    this.logger.log(VerboseLevel.INFO, 'EOC - End Of Caption');\n\n    if (this.mode === 'MODE_POP-ON') {\n      var tmp = this.displayedMemory;\n      this.displayedMemory = this.nonDisplayedMemory;\n      this.nonDisplayedMemory = tmp;\n      this.writeScreen = this.nonDisplayedMemory;\n      this.logger.log(VerboseLevel.TEXT, 'DISP: ' + this.displayedMemory.getDisplayText());\n    }\n\n    this.outputDataUpdate(true);\n  };\n\n  _proto6.ccTO = function ccTO(nrCols) {\n    // Tab Offset 1,2, or 3 columns\n    this.logger.log(VerboseLevel.INFO, 'TO(' + nrCols + ') - Tab Offset');\n    this.writeScreen.moveCursor(nrCols);\n  };\n\n  _proto6.ccMIDROW = function ccMIDROW(secondByte) {\n    // Parse MIDROW command\n    var styles = {\n      flash: false\n    };\n    styles.underline = secondByte % 2 === 1;\n    styles.italics = secondByte >= 0x2e;\n\n    if (!styles.italics) {\n      var colorIndex = Math.floor(secondByte / 2) - 0x10;\n      var colors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta'];\n      styles.foreground = colors[colorIndex];\n    } else {\n      styles.foreground = 'white';\n    }\n\n    this.logger.log(VerboseLevel.INFO, 'MIDROW: ' + JSON.stringify(styles));\n    this.writeScreen.setPen(styles);\n  };\n\n  _proto6.outputDataUpdate = function outputDataUpdate(dispatch) {\n    if (dispatch === void 0) {\n      dispatch = false;\n    }\n\n    var time = this.logger.time;\n\n    if (time === null) {\n      return;\n    }\n\n    if (this.outputFilter) {\n      if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) {\n        // Start of a new cue\n        this.cueStartTime = time;\n      } else {\n        if (!this.displayedMemory.equals(this.lastOutputScreen)) {\n          this.outputFilter.newCue(this.cueStartTime, time, this.lastOutputScreen);\n\n          if (dispatch && this.outputFilter.dispatchCue) {\n            this.outputFilter.dispatchCue();\n          }\n\n          this.cueStartTime = this.displayedMemory.isEmpty() ? null : time;\n        }\n      }\n\n      this.lastOutputScreen.copy(this.displayedMemory);\n    }\n  };\n\n  _proto6.cueSplitAtTime = function cueSplitAtTime(t) {\n    if (this.outputFilter) {\n      if (!this.displayedMemory.isEmpty()) {\n        if (this.outputFilter.newCue) {\n          this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory);\n        }\n\n        this.cueStartTime = t;\n      }\n    }\n  };\n\n  return Cea608Channel;\n}();\n\nvar Cea608Parser = /*#__PURE__*/function () {\n  function Cea608Parser(field, out1, out2) {\n    this.channels = void 0;\n    this.currentChannel = 0;\n    this.cmdHistory = void 0;\n    this.logger = void 0;\n    var logger = new CaptionsLogger();\n    this.channels = [null, new Cea608Channel(field, out1, logger), new Cea608Channel(field + 1, out2, logger)];\n    this.cmdHistory = createCmdHistory();\n    this.logger = logger;\n  }\n\n  var _proto7 = Cea608Parser.prototype;\n\n  _proto7.getHandler = function getHandler(channel) {\n    return this.channels[channel].getHandler();\n  };\n\n  _proto7.setHandler = function setHandler(channel, newHandler) {\n    this.channels[channel].setHandler(newHandler);\n  }\n  /**\n   * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.\n   */\n  ;\n\n  _proto7.addData = function addData(time, byteList) {\n    var cmdFound;\n    var a;\n    var b;\n    var charsFound = false;\n    this.logger.time = time;\n\n    for (var i = 0; i < byteList.length; i += 2) {\n      a = byteList[i] & 0x7f;\n      b = byteList[i + 1] & 0x7f;\n\n      if (a === 0 && b === 0) {\n        continue;\n      } else {\n        this.logger.log(VerboseLevel.DATA, '[' + numArrayToHexArray([byteList[i], byteList[i + 1]]) + '] -> (' + numArrayToHexArray([a, b]) + ')');\n      }\n\n      cmdFound = this.parseCmd(a, b);\n\n      if (!cmdFound) {\n        cmdFound = this.parseMidrow(a, b);\n      }\n\n      if (!cmdFound) {\n        cmdFound = this.parsePAC(a, b);\n      }\n\n      if (!cmdFound) {\n        cmdFound = this.parseBackgroundAttributes(a, b);\n      }\n\n      if (!cmdFound) {\n        charsFound = this.parseChars(a, b);\n\n        if (charsFound) {\n          var currChNr = this.currentChannel;\n\n          if (currChNr && currChNr > 0) {\n            var channel = this.channels[currChNr];\n            channel.insertChars(charsFound);\n          } else {\n            this.logger.log(VerboseLevel.WARNING, 'No channel found yet. TEXT-MODE?');\n          }\n        }\n      }\n\n      if (!cmdFound && !charsFound) {\n        this.logger.log(VerboseLevel.WARNING, \"Couldn't parse cleaned data \" + numArrayToHexArray([a, b]) + ' orig: ' + numArrayToHexArray([byteList[i], byteList[i + 1]]));\n      }\n    }\n  }\n  /**\n   * Parse Command.\n   * @returns {Boolean} Tells if a command was found\n   */\n  ;\n\n  _proto7.parseCmd = function parseCmd(a, b) {\n    var cmdHistory = this.cmdHistory;\n    var cond1 = (a === 0x14 || a === 0x1c || a === 0x15 || a === 0x1d) && b >= 0x20 && b <= 0x2f;\n    var cond2 = (a === 0x17 || a === 0x1f) && b >= 0x21 && b <= 0x23;\n\n    if (!(cond1 || cond2)) {\n      return false;\n    }\n\n    if (hasCmdRepeated(a, b, cmdHistory)) {\n      setLastCmd(null, null, cmdHistory);\n      this.logger.log(VerboseLevel.DEBUG, 'Repeated command (' + numArrayToHexArray([a, b]) + ') is dropped');\n      return true;\n    }\n\n    var chNr = a === 0x14 || a === 0x15 || a === 0x17 ? 1 : 2;\n    var channel = this.channels[chNr];\n\n    if (a === 0x14 || a === 0x15 || a === 0x1c || a === 0x1d) {\n      if (b === 0x20) {\n        channel.ccRCL();\n      } else if (b === 0x21) {\n        channel.ccBS();\n      } else if (b === 0x22) {\n        channel.ccAOF();\n      } else if (b === 0x23) {\n        channel.ccAON();\n      } else if (b === 0x24) {\n        channel.ccDER();\n      } else if (b === 0x25) {\n        channel.ccRU(2);\n      } else if (b === 0x26) {\n        channel.ccRU(3);\n      } else if (b === 0x27) {\n        channel.ccRU(4);\n      } else if (b === 0x28) {\n        channel.ccFON();\n      } else if (b === 0x29) {\n        channel.ccRDC();\n      } else if (b === 0x2a) {\n        channel.ccTR();\n      } else if (b === 0x2b) {\n        channel.ccRTD();\n      } else if (b === 0x2c) {\n        channel.ccEDM();\n      } else if (b === 0x2d) {\n        channel.ccCR();\n      } else if (b === 0x2e) {\n        channel.ccENM();\n      } else if (b === 0x2f) {\n        channel.ccEOC();\n      }\n    } else {\n      // a == 0x17 || a == 0x1F\n      channel.ccTO(b - 0x20);\n    }\n\n    setLastCmd(a, b, cmdHistory);\n    this.currentChannel = chNr;\n    return true;\n  }\n  /**\n   * Parse midrow styling command\n   * @returns {Boolean}\n   */\n  ;\n\n  _proto7.parseMidrow = function parseMidrow(a, b) {\n    var chNr = 0;\n\n    if ((a === 0x11 || a === 0x19) && b >= 0x20 && b <= 0x2f) {\n      if (a === 0x11) {\n        chNr = 1;\n      } else {\n        chNr = 2;\n      }\n\n      if (chNr !== this.currentChannel) {\n        this.logger.log(VerboseLevel.ERROR, 'Mismatch channel in midrow parsing');\n        return false;\n      }\n\n      var channel = this.channels[chNr];\n\n      if (!channel) {\n        return false;\n      }\n\n      channel.ccMIDROW(b);\n      this.logger.log(VerboseLevel.DEBUG, 'MIDROW (' + numArrayToHexArray([a, b]) + ')');\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Parse Preable Access Codes (Table 53).\n   * @returns {Boolean} Tells if PAC found\n   */\n  ;\n\n  _proto7.parsePAC = function parsePAC(a, b) {\n    var row;\n    var cmdHistory = this.cmdHistory;\n    var case1 = (a >= 0x11 && a <= 0x17 || a >= 0x19 && a <= 0x1f) && b >= 0x40 && b <= 0x7f;\n    var case2 = (a === 0x10 || a === 0x18) && b >= 0x40 && b <= 0x5f;\n\n    if (!(case1 || case2)) {\n      return false;\n    }\n\n    if (hasCmdRepeated(a, b, cmdHistory)) {\n      setLastCmd(null, null, cmdHistory);\n      return true; // Repeated commands are dropped (once)\n    }\n\n    var chNr = a <= 0x17 ? 1 : 2;\n\n    if (b >= 0x40 && b <= 0x5f) {\n      row = chNr === 1 ? rowsLowCh1[a] : rowsLowCh2[a];\n    } else {\n      // 0x60 <= b <= 0x7F\n      row = chNr === 1 ? rowsHighCh1[a] : rowsHighCh2[a];\n    }\n\n    var channel = this.channels[chNr];\n\n    if (!channel) {\n      return false;\n    }\n\n    channel.setPAC(this.interpretPAC(row, b));\n    setLastCmd(a, b, cmdHistory);\n    this.currentChannel = chNr;\n    return true;\n  }\n  /**\n   * Interpret the second byte of the pac, and return the information.\n   * @returns {Object} pacData with style parameters.\n   */\n  ;\n\n  _proto7.interpretPAC = function interpretPAC(row, _byte3) {\n    var pacIndex;\n    var pacData = {\n      color: null,\n      italics: false,\n      indent: null,\n      underline: false,\n      row: row\n    };\n\n    if (_byte3 > 0x5f) {\n      pacIndex = _byte3 - 0x60;\n    } else {\n      pacIndex = _byte3 - 0x40;\n    }\n\n    pacData.underline = (pacIndex & 1) === 1;\n\n    if (pacIndex <= 0xd) {\n      pacData.color = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'white'][Math.floor(pacIndex / 2)];\n    } else if (pacIndex <= 0xf) {\n      pacData.italics = true;\n      pacData.color = 'white';\n    } else {\n      pacData.indent = Math.floor((pacIndex - 0x10) / 2) * 4;\n    }\n\n    return pacData; // Note that row has zero offset. The spec uses 1.\n  }\n  /**\n   * Parse characters.\n   * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.\n   */\n  ;\n\n  _proto7.parseChars = function parseChars(a, b) {\n    var channelNr;\n    var charCodes = null;\n    var charCode1 = null;\n\n    if (a >= 0x19) {\n      channelNr = 2;\n      charCode1 = a - 8;\n    } else {\n      channelNr = 1;\n      charCode1 = a;\n    }\n\n    if (charCode1 >= 0x11 && charCode1 <= 0x13) {\n      // Special character\n      var oneCode;\n\n      if (charCode1 === 0x11) {\n        oneCode = b + 0x50;\n      } else if (charCode1 === 0x12) {\n        oneCode = b + 0x70;\n      } else {\n        oneCode = b + 0x90;\n      }\n\n      this.logger.log(VerboseLevel.INFO, \"Special char '\" + getCharForByte(oneCode) + \"' in channel \" + channelNr);\n      charCodes = [oneCode];\n    } else if (a >= 0x20 && a <= 0x7f) {\n      charCodes = b === 0 ? [a] : [a, b];\n    }\n\n    if (charCodes) {\n      var hexCodes = numArrayToHexArray(charCodes);\n      this.logger.log(VerboseLevel.DEBUG, 'Char codes =  ' + hexCodes.join(','));\n      setLastCmd(a, b, this.cmdHistory);\n    }\n\n    return charCodes;\n  }\n  /**\n   * Parse extended background attributes as well as new foreground color black.\n   * @returns {Boolean} Tells if background attributes are found\n   */\n  ;\n\n  _proto7.parseBackgroundAttributes = function parseBackgroundAttributes(a, b) {\n    var case1 = (a === 0x10 || a === 0x18) && b >= 0x20 && b <= 0x2f;\n    var case2 = (a === 0x17 || a === 0x1f) && b >= 0x2d && b <= 0x2f;\n\n    if (!(case1 || case2)) {\n      return false;\n    }\n\n    var index;\n    var bkgData = {};\n\n    if (a === 0x10 || a === 0x18) {\n      index = Math.floor((b - 0x20) / 2);\n      bkgData.background = backgroundColors[index];\n\n      if (b % 2 === 1) {\n        bkgData.background = bkgData.background + '_semi';\n      }\n    } else if (b === 0x2d) {\n      bkgData.background = 'transparent';\n    } else {\n      bkgData.foreground = 'black';\n\n      if (b === 0x2f) {\n        bkgData.underline = true;\n      }\n    }\n\n    var chNr = a <= 0x17 ? 1 : 2;\n    var channel = this.channels[chNr];\n    channel.setBkgData(bkgData);\n    setLastCmd(a, b, this.cmdHistory);\n    return true;\n  }\n  /**\n   * Reset state of parser and its channels.\n   */\n  ;\n\n  _proto7.reset = function reset() {\n    for (var i = 0; i < Object.keys(this.channels).length; i++) {\n      var channel = this.channels[i];\n\n      if (channel) {\n        channel.reset();\n      }\n    }\n\n    this.cmdHistory = createCmdHistory();\n  }\n  /**\n   * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.\n   */\n  ;\n\n  _proto7.cueSplitAtTime = function cueSplitAtTime(t) {\n    for (var i = 0; i < this.channels.length; i++) {\n      var channel = this.channels[i];\n\n      if (channel) {\n        channel.cueSplitAtTime(t);\n      }\n    }\n  };\n\n  return Cea608Parser;\n}();\n\nfunction setLastCmd(a, b, cmdHistory) {\n  cmdHistory.a = a;\n  cmdHistory.b = b;\n}\n\nfunction hasCmdRepeated(a, b, cmdHistory) {\n  return cmdHistory.a === a && cmdHistory.b === b;\n}\n\nfunction createCmdHistory() {\n  return {\n    a: null,\n    b: null\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Cea608Parser);\n\n/***/ }),\n\n/***/ \"./src/utils/codecs.ts\":\n/*!*****************************!*\\\n  !*** ./src/utils/codecs.ts ***!\n  \\*****************************/\n/*! exports provided: isCodecType, isCodecSupportedInMp4 */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_913526__) {\n\n\"use strict\";\n__nested_webpack_require_913526__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_913526__.d(__webpack_exports__, \"isCodecType\", function() { return isCodecType; });\n/* harmony export (binding) */ __nested_webpack_require_913526__.d(__webpack_exports__, \"isCodecSupportedInMp4\", function() { return isCodecSupportedInMp4; });\n// from http://mp4ra.org/codecs.html\nvar sampleEntryCodesISO = {\n  audio: {\n    a3ds: true,\n    'ac-3': true,\n    'ac-4': true,\n    alac: true,\n    alaw: true,\n    dra1: true,\n    'dts+': true,\n    'dts-': true,\n    dtsc: true,\n    dtse: true,\n    dtsh: true,\n    'ec-3': true,\n    enca: true,\n    g719: true,\n    g726: true,\n    m4ae: true,\n    mha1: true,\n    mha2: true,\n    mhm1: true,\n    mhm2: true,\n    mlpa: true,\n    mp4a: true,\n    'raw ': true,\n    Opus: true,\n    samr: true,\n    sawb: true,\n    sawp: true,\n    sevc: true,\n    sqcp: true,\n    ssmv: true,\n    twos: true,\n    ulaw: true\n  },\n  video: {\n    avc1: true,\n    avc2: true,\n    avc3: true,\n    avc4: true,\n    avcp: true,\n    av01: true,\n    drac: true,\n    dvav: true,\n    dvhe: true,\n    encv: true,\n    hev1: true,\n    hvc1: true,\n    mjp2: true,\n    mp4v: true,\n    mvc1: true,\n    mvc2: true,\n    mvc3: true,\n    mvc4: true,\n    resv: true,\n    rv60: true,\n    s263: true,\n    svc1: true,\n    svc2: true,\n    'vc-1': true,\n    vp08: true,\n    vp09: true\n  },\n  text: {\n    stpp: true,\n    wvtt: true\n  }\n};\nfunction isCodecType(codec, type) {\n  var typeCodes = sampleEntryCodesISO[type];\n  return !!typeCodes && typeCodes[codec.slice(0, 4)] === true;\n}\nfunction isCodecSupportedInMp4(codec, type) {\n  return MediaSource.isTypeSupported((type || 'video') + \"/mp4;codecs=\\\"\" + codec + \"\\\"\");\n}\n\n/***/ }),\n\n/***/ \"./src/utils/cues.ts\":\n/*!***************************!*\\\n  !*** ./src/utils/cues.ts ***!\n  \\***************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_915467__) {\n\n\"use strict\";\n__nested_webpack_require_915467__.r(__webpack_exports__);\n/* harmony import */ var _vttparser__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_915467__(/*! ./vttparser */ \"./src/utils/vttparser.ts\");\n/* harmony import */ var _webvtt_parser__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_915467__(/*! ./webvtt-parser */ \"./src/utils/webvtt-parser.ts\");\n/* harmony import */ var _texttrack_utils__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_915467__(/*! ./texttrack-utils */ \"./src/utils/texttrack-utils.ts\");\n\n\n\nvar WHITESPACE_CHAR = /\\s/;\nvar Cues = {\n  newCue: function newCue(track, startTime, endTime, captionScreen) {\n    var result = [];\n    var row; // the type data states this is VTTCue, but it can potentially be a TextTrackCue on old browsers\n\n    var cue;\n    var indenting;\n    var indent;\n    var text;\n    var Cue = self.VTTCue || self.TextTrackCue;\n\n    for (var r = 0; r < captionScreen.rows.length; r++) {\n      row = captionScreen.rows[r];\n      indenting = true;\n      indent = 0;\n      text = '';\n\n      if (!row.isEmpty()) {\n        for (var c = 0; c < row.chars.length; c++) {\n          if (WHITESPACE_CHAR.test(row.chars[c].uchar) && indenting) {\n            indent++;\n          } else {\n            text += row.chars[c].uchar;\n            indenting = false;\n          }\n        } // To be used for cleaning-up orphaned roll-up captions\n\n\n        row.cueStartTime = startTime; // Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE\n\n        if (startTime === endTime) {\n          endTime += 0.0001;\n        }\n\n        if (indent >= 16) {\n          indent--;\n        } else {\n          indent++;\n        }\n\n        var cueText = Object(_vttparser__WEBPACK_IMPORTED_MODULE_0__[\"fixLineBreaks\"])(text.trim());\n        var id = Object(_webvtt_parser__WEBPACK_IMPORTED_MODULE_1__[\"generateCueId\"])(startTime, endTime, cueText); // If this cue already exists in the track do not push it\n\n        if (!track || !track.cues || !track.cues.getCueById(id)) {\n          cue = new Cue(startTime, endTime, cueText);\n          cue.id = id;\n          cue.line = r + 1;\n          cue.align = 'left'; // Clamp the position between 10 and 80 percent (CEA-608 PAC indent code)\n          // https://dvcs.w3.org/hg/text-tracks/raw-file/default/608toVTT/608toVTT.html#positioning-in-cea-608\n          // Firefox throws an exception and captions break with out of bounds 0-100 values\n\n          cue.position = 10 + Math.min(80, Math.floor(indent * 8 / 32) * 10);\n          result.push(cue);\n        }\n      }\n    }\n\n    if (track && result.length) {\n      // Sort bottom cues in reverse order so that they render in line order when overlapping in Chrome\n      result.sort(function (cueA, cueB) {\n        if (cueA.line === 'auto' || cueB.line === 'auto') {\n          return 0;\n        }\n\n        if (cueA.line > 8 && cueB.line > 8) {\n          return cueB.line - cueA.line;\n        }\n\n        return cueA.line - cueB.line;\n      });\n      result.forEach(function (cue) {\n        return Object(_texttrack_utils__WEBPACK_IMPORTED_MODULE_2__[\"addCueToTrack\"])(track, cue);\n      });\n    }\n\n    return result;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Cues);\n\n/***/ }),\n\n/***/ \"./src/utils/discontinuities.ts\":\n/*!**************************************!*\\\n  !*** ./src/utils/discontinuities.ts ***!\n  \\**************************************/\n/*! exports provided: findFirstFragWithCC, shouldAlignOnDiscontinuities, findDiscontinuousReferenceFrag, adjustSlidingStart, alignStream, alignPDT, alignFragmentByPDTDelta, alignMediaPlaylistByPDT */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_919124__) {\n\n\"use strict\";\n__nested_webpack_require_919124__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_919124__.d(__webpack_exports__, \"findFirstFragWithCC\", function() { return findFirstFragWithCC; });\n/* harmony export (binding) */ __nested_webpack_require_919124__.d(__webpack_exports__, \"shouldAlignOnDiscontinuities\", function() { return shouldAlignOnDiscontinuities; });\n/* harmony export (binding) */ __nested_webpack_require_919124__.d(__webpack_exports__, \"findDiscontinuousReferenceFrag\", function() { return findDiscontinuousReferenceFrag; });\n/* harmony export (binding) */ __nested_webpack_require_919124__.d(__webpack_exports__, \"adjustSlidingStart\", function() { return adjustSlidingStart; });\n/* harmony export (binding) */ __nested_webpack_require_919124__.d(__webpack_exports__, \"alignStream\", function() { return alignStream; });\n/* harmony export (binding) */ __nested_webpack_require_919124__.d(__webpack_exports__, \"alignPDT\", function() { return alignPDT; });\n/* harmony export (binding) */ __nested_webpack_require_919124__.d(__webpack_exports__, \"alignFragmentByPDTDelta\", function() { return alignFragmentByPDTDelta; });\n/* harmony export (binding) */ __nested_webpack_require_919124__.d(__webpack_exports__, \"alignMediaPlaylistByPDT\", function() { return alignMediaPlaylistByPDT; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_919124__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_919124__(/*! ./logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _controller_level_helper__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_919124__(/*! ../controller/level-helper */ \"./src/controller/level-helper.ts\");\n\n\n\n\nfunction findFirstFragWithCC(fragments, cc) {\n  var firstFrag = null;\n\n  for (var i = 0, len = fragments.length; i < len; i++) {\n    var currentFrag = fragments[i];\n\n    if (currentFrag && currentFrag.cc === cc) {\n      firstFrag = currentFrag;\n      break;\n    }\n  }\n\n  return firstFrag;\n}\nfunction shouldAlignOnDiscontinuities(lastFrag, lastLevel, details) {\n  if (lastLevel.details) {\n    if (details.endCC > details.startCC || lastFrag && lastFrag.cc < details.startCC) {\n      return true;\n    }\n  }\n\n  return false;\n} // Find the first frag in the previous level which matches the CC of the first frag of the new level\n\nfunction findDiscontinuousReferenceFrag(prevDetails, curDetails) {\n  var prevFrags = prevDetails.fragments;\n  var curFrags = curDetails.fragments;\n\n  if (!curFrags.length || !prevFrags.length) {\n    _logger__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('No fragments to align');\n    return;\n  }\n\n  var prevStartFrag = findFirstFragWithCC(prevFrags, curFrags[0].cc);\n\n  if (!prevStartFrag || prevStartFrag && !prevStartFrag.startPTS) {\n    _logger__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log('No frag in previous level to align on');\n    return;\n  }\n\n  return prevStartFrag;\n}\n\nfunction adjustFragmentStart(frag, sliding) {\n  if (frag) {\n    var start = frag.start + sliding;\n    frag.start = frag.startPTS = start;\n    frag.endPTS = start + frag.duration;\n  }\n}\n\nfunction adjustSlidingStart(sliding, details) {\n  // Update segments\n  var fragments = details.fragments;\n\n  for (var i = 0, len = fragments.length; i < len; i++) {\n    adjustFragmentStart(fragments[i], sliding);\n  } // Update LL-HLS parts at the end of the playlist\n\n\n  if (details.fragmentHint) {\n    adjustFragmentStart(details.fragmentHint, sliding);\n  }\n\n  details.alignedSliding = true;\n}\n/**\n * Using the parameters of the last level, this function computes PTS' of the new fragments so that they form a\n * contiguous stream with the last fragments.\n * The PTS of a fragment lets Hls.js know where it fits into a stream - by knowing every PTS, we know which fragment to\n * download at any given time. PTS is normally computed when the fragment is demuxed, so taking this step saves us time\n * and an extra download.\n * @param lastFrag\n * @param lastLevel\n * @param details\n */\n\nfunction alignStream(lastFrag, lastLevel, details) {\n  if (!lastLevel) {\n    return;\n  }\n\n  alignDiscontinuities(lastFrag, details, lastLevel);\n\n  if (!details.alignedSliding && lastLevel.details) {\n    // If the PTS wasn't figured out via discontinuity sequence that means there was no CC increase within the level.\n    // Aligning via Program Date Time should therefore be reliable, since PDT should be the same within the same\n    // discontinuity sequence.\n    alignPDT(details, lastLevel.details);\n  }\n\n  if (!details.alignedSliding && lastLevel.details && !details.skippedSegments) {\n    // Try to align on sn so that we pick a better start fragment.\n    // Do not perform this on playlists with delta updates as this is only to align levels on switch\n    // and adjustSliding only adjusts fragments after skippedSegments.\n    Object(_controller_level_helper__WEBPACK_IMPORTED_MODULE_2__[\"adjustSliding\"])(lastLevel.details, details);\n  }\n}\n/**\n * Computes the PTS if a new level's fragments using the PTS of a fragment in the last level which shares the same\n * discontinuity sequence.\n * @param lastFrag - The last Fragment which shares the same discontinuity sequence\n * @param lastLevel - The details of the last loaded level\n * @param details - The details of the new level\n */\n\nfunction alignDiscontinuities(lastFrag, details, lastLevel) {\n  if (shouldAlignOnDiscontinuities(lastFrag, lastLevel, details)) {\n    var referenceFrag = findDiscontinuousReferenceFrag(lastLevel.details, details);\n\n    if (referenceFrag && Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(referenceFrag.start)) {\n      _logger__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log(\"Adjusting PTS using last level due to CC increase within current level \" + details.url);\n      adjustSlidingStart(referenceFrag.start, details);\n    }\n  }\n}\n/**\n * Computes the PTS of a new level's fragments using the difference in Program Date Time from the last level.\n * @param details - The details of the new level\n * @param lastDetails - The details of the last loaded level\n */\n\n\nfunction alignPDT(details, lastDetails) {\n  // This check protects the unsafe \"!\" usage below for null program date time access.\n  if (!lastDetails.fragments.length || !details.hasProgramDateTime || !lastDetails.hasProgramDateTime) {\n    return;\n  } // if last level sliding is 1000 and its first frag PROGRAM-DATE-TIME is 2017-08-20 1:10:00 AM\n  // and if new details first frag PROGRAM DATE-TIME is 2017-08-20 1:10:08 AM\n  // then we can deduce that playlist B sliding is 1000+8 = 1008s\n\n\n  var lastPDT = lastDetails.fragments[0].programDateTime; // hasProgramDateTime check above makes this safe.\n\n  var newPDT = details.fragments[0].programDateTime; // date diff is in ms. frag.start is in seconds\n\n  var sliding = (newPDT - lastPDT) / 1000 + lastDetails.fragments[0].start;\n\n  if (sliding && Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(sliding)) {\n    _logger__WEBPACK_IMPORTED_MODULE_1__[\"logger\"].log(\"Adjusting PTS using programDateTime delta \" + (newPDT - lastPDT) + \"ms, sliding:\" + sliding.toFixed(3) + \" \" + details.url + \" \");\n    adjustSlidingStart(sliding, details);\n  }\n}\nfunction alignFragmentByPDTDelta(frag, delta) {\n  var programDateTime = frag.programDateTime;\n  if (!programDateTime) return;\n  var start = (programDateTime - delta) / 1000;\n  frag.start = frag.startPTS = start;\n  frag.endPTS = start + frag.duration;\n}\n/**\n * Ensures appropriate time-alignment between renditions based on PDT. Unlike `alignPDT`, which adjusts\n * the timeline based on the delta between PDTs of the 0th fragment of two playlists/`LevelDetails`,\n * this function assumes the timelines represented in `refDetails` are accurate, including the PDTs,\n * and uses the \"wallclock\"/PDT timeline as a cross-reference to `details`, adjusting the presentation\n * times/timelines of `details` accordingly.\n * Given the asynchronous nature of fetches and initial loads of live `main` and audio/subtitle tracks,\n * the primary purpose of this function is to ensure the \"local timelines\" of audio/subtitle tracks\n * are aligned to the main/video timeline, using PDT as the cross-reference/\"anchor\" that should\n * be consistent across playlists, per the HLS spec.\n * @param details - The details of the rendition you'd like to time-align (e.g. an audio rendition).\n * @param refDetails - The details of the reference rendition with start and PDT times for alignment.\n */\n\nfunction alignMediaPlaylistByPDT(details, refDetails) {\n  // This check protects the unsafe \"!\" usage below for null program date time access.\n  if (!refDetails.fragments.length || !details.hasProgramDateTime || !refDetails.hasProgramDateTime) {\n    return;\n  }\n\n  var refPDT = refDetails.fragments[0].programDateTime; // hasProgramDateTime check above makes this safe.\n\n  var refStart = refDetails.fragments[0].start; // Use the delta between the reference details' presentation timeline's start time and its PDT\n  // to align the other rendition's timeline.\n\n  var delta = refPDT - refStart * 1000; // Per spec: \"If any Media Playlist in a Master Playlist contains an EXT-X-PROGRAM-DATE-TIME tag, then all\n  // Media Playlists in that Master Playlist MUST contain EXT-X-PROGRAM-DATE-TIME tags with consistent mappings\n  // of date and time to media timestamps.\"\n  // So we should be able to use each rendition's PDT as a reference time and use the delta to compute our relevant\n  // start and end times.\n  // NOTE: This code assumes each level/details timelines have already been made \"internally consistent\"\n\n  details.fragments.forEach(function (frag) {\n    alignFragmentByPDTDelta(frag, delta);\n  });\n\n  if (details.fragmentHint) {\n    alignFragmentByPDTDelta(details.fragmentHint, delta);\n  }\n\n  details.alignedSliding = true;\n}\n\n/***/ }),\n\n/***/ \"./src/utils/ewma-bandwidth-estimator.ts\":\n/*!***********************************************!*\\\n  !*** ./src/utils/ewma-bandwidth-estimator.ts ***!\n  \\***********************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_929262__) {\n\n\"use strict\";\n__nested_webpack_require_929262__.r(__webpack_exports__);\n/* harmony import */ var _utils_ewma__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_929262__(/*! ../utils/ewma */ \"./src/utils/ewma.ts\");\n/*\n * EWMA Bandwidth Estimator\n *  - heavily inspired from shaka-player\n * Tracks bandwidth samples and estimates available bandwidth.\n * Based on the minimum of two exponentially-weighted moving averages with\n * different half-lives.\n */\n\n\nvar EwmaBandWidthEstimator = /*#__PURE__*/function () {\n  function EwmaBandWidthEstimator(slow, fast, defaultEstimate) {\n    this.defaultEstimate_ = void 0;\n    this.minWeight_ = void 0;\n    this.minDelayMs_ = void 0;\n    this.slow_ = void 0;\n    this.fast_ = void 0;\n    this.defaultEstimate_ = defaultEstimate;\n    this.minWeight_ = 0.001;\n    this.minDelayMs_ = 50;\n    this.slow_ = new _utils_ewma__WEBPACK_IMPORTED_MODULE_0__[\"default\"](slow);\n    this.fast_ = new _utils_ewma__WEBPACK_IMPORTED_MODULE_0__[\"default\"](fast);\n  }\n\n  var _proto = EwmaBandWidthEstimator.prototype;\n\n  _proto.update = function update(slow, fast) {\n    var slow_ = this.slow_,\n        fast_ = this.fast_;\n\n    if (this.slow_.halfLife !== slow) {\n      this.slow_ = new _utils_ewma__WEBPACK_IMPORTED_MODULE_0__[\"default\"](slow, slow_.getEstimate(), slow_.getTotalWeight());\n    }\n\n    if (this.fast_.halfLife !== fast) {\n      this.fast_ = new _utils_ewma__WEBPACK_IMPORTED_MODULE_0__[\"default\"](fast, fast_.getEstimate(), fast_.getTotalWeight());\n    }\n  };\n\n  _proto.sample = function sample(durationMs, numBytes) {\n    durationMs = Math.max(durationMs, this.minDelayMs_);\n    var numBits = 8 * numBytes; // weight is duration in seconds\n\n    var durationS = durationMs / 1000; // value is bandwidth in bits/s\n\n    var bandwidthInBps = numBits / durationS;\n    this.fast_.sample(durationS, bandwidthInBps);\n    this.slow_.sample(durationS, bandwidthInBps);\n  };\n\n  _proto.canEstimate = function canEstimate() {\n    var fast = this.fast_;\n    return fast && fast.getTotalWeight() >= this.minWeight_;\n  };\n\n  _proto.getEstimate = function getEstimate() {\n    if (this.canEstimate()) {\n      // console.log('slow estimate:'+ Math.round(this.slow_.getEstimate()));\n      // console.log('fast estimate:'+ Math.round(this.fast_.getEstimate()));\n      // Take the minimum of these two estimates.  This should have the effect of\n      // adapting down quickly, but up more slowly.\n      return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());\n    } else {\n      return this.defaultEstimate_;\n    }\n  };\n\n  _proto.destroy = function destroy() {};\n\n  return EwmaBandWidthEstimator;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (EwmaBandWidthEstimator);\n\n/***/ }),\n\n/***/ \"./src/utils/ewma.ts\":\n/*!***************************!*\\\n  !*** ./src/utils/ewma.ts ***!\n  \\***************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_932198__) {\n\n\"use strict\";\n__nested_webpack_require_932198__.r(__webpack_exports__);\n/*\n * compute an Exponential Weighted moving average\n * - https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n *  - heavily inspired from shaka-player\n */\nvar EWMA = /*#__PURE__*/function () {\n  //  About half of the estimated value will be from the last |halfLife| samples by weight.\n  function EWMA(halfLife, estimate, weight) {\n    if (estimate === void 0) {\n      estimate = 0;\n    }\n\n    if (weight === void 0) {\n      weight = 0;\n    }\n\n    this.halfLife = void 0;\n    this.alpha_ = void 0;\n    this.estimate_ = void 0;\n    this.totalWeight_ = void 0;\n    this.halfLife = halfLife; // Larger values of alpha expire historical data more slowly.\n\n    this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;\n    this.estimate_ = estimate;\n    this.totalWeight_ = weight;\n  }\n\n  var _proto = EWMA.prototype;\n\n  _proto.sample = function sample(weight, value) {\n    var adjAlpha = Math.pow(this.alpha_, weight);\n    this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;\n    this.totalWeight_ += weight;\n  };\n\n  _proto.getTotalWeight = function getTotalWeight() {\n    return this.totalWeight_;\n  };\n\n  _proto.getEstimate = function getEstimate() {\n    if (this.alpha_) {\n      var zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);\n\n      if (zeroFactor) {\n        return this.estimate_ / zeroFactor;\n      }\n    }\n\n    return this.estimate_;\n  };\n\n  return EWMA;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (EWMA);\n\n/***/ }),\n\n/***/ \"./src/utils/fetch-loader.ts\":\n/*!***********************************!*\\\n  !*** ./src/utils/fetch-loader.ts ***!\n  \\***********************************/\n/*! exports provided: fetchSupported, default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_934036__) {\n\n\"use strict\";\n__nested_webpack_require_934036__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_934036__.d(__webpack_exports__, \"fetchSupported\", function() { return fetchSupported; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_934036__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _loader_load_stats__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_934036__(/*! ../loader/load-stats */ \"./src/loader/load-stats.ts\");\n/* harmony import */ var _demux_chunk_cache__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_934036__(/*! ../demux/chunk-cache */ \"./src/demux/chunk-cache.ts\");\n\n\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n\n\nfunction fetchSupported() {\n  if ( // @ts-ignore\n  self.fetch && self.AbortController && self.ReadableStream && self.Request) {\n    try {\n      new self.ReadableStream({}); // eslint-disable-line no-new\n\n      return true;\n    } catch (e) {\n      /* noop */\n    }\n  }\n\n  return false;\n}\n\nvar FetchLoader = /*#__PURE__*/function () {\n  function FetchLoader(config\n  /* HlsConfig */\n  ) {\n    this.fetchSetup = void 0;\n    this.requestTimeout = void 0;\n    this.request = void 0;\n    this.response = void 0;\n    this.controller = void 0;\n    this.context = void 0;\n    this.config = null;\n    this.callbacks = null;\n    this.stats = void 0;\n    this.loader = null;\n    this.fetchSetup = config.fetchSetup || getRequest;\n    this.controller = new self.AbortController();\n    this.stats = new _loader_load_stats__WEBPACK_IMPORTED_MODULE_1__[\"LoadStats\"]();\n  }\n\n  var _proto = FetchLoader.prototype;\n\n  _proto.destroy = function destroy() {\n    this.loader = this.callbacks = null;\n    this.abortInternal();\n  };\n\n  _proto.abortInternal = function abortInternal() {\n    var response = this.response;\n\n    if (!response || !response.ok) {\n      this.stats.aborted = true;\n      this.controller.abort();\n    }\n  };\n\n  _proto.abort = function abort() {\n    var _this$callbacks;\n\n    this.abortInternal();\n\n    if ((_this$callbacks = this.callbacks) !== null && _this$callbacks !== void 0 && _this$callbacks.onAbort) {\n      this.callbacks.onAbort(this.stats, this.context, this.response);\n    }\n  };\n\n  _proto.load = function load(context, config, callbacks) {\n    var _this = this;\n\n    var stats = this.stats;\n\n    if (stats.loading.start) {\n      throw new Error('Loader can only be used once.');\n    }\n\n    stats.loading.start = self.performance.now();\n    var initParams = getRequestParameters(context, this.controller.signal);\n    var onProgress = callbacks.onProgress;\n    var isArrayBuffer = context.responseType === 'arraybuffer';\n    var LENGTH = isArrayBuffer ? 'byteLength' : 'length';\n    this.context = context;\n    this.config = config;\n    this.callbacks = callbacks;\n    this.request = this.fetchSetup(context, initParams);\n    self.clearTimeout(this.requestTimeout);\n    this.requestTimeout = self.setTimeout(function () {\n      _this.abortInternal();\n\n      callbacks.onTimeout(stats, context, _this.response);\n    }, config.timeout);\n    self.fetch(this.request).then(function (response) {\n      _this.response = _this.loader = response;\n\n      if (!response.ok) {\n        var status = response.status,\n            statusText = response.statusText;\n        throw new FetchError(statusText || 'fetch, bad network response', status, response);\n      }\n\n      stats.loading.first = Math.max(self.performance.now(), stats.loading.start);\n      stats.total = parseInt(response.headers.get('Content-Length') || '0');\n\n      if (onProgress && Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(config.highWaterMark)) {\n        return _this.loadProgressively(response, stats, context, config.highWaterMark, onProgress);\n      }\n\n      if (isArrayBuffer) {\n        return response.arrayBuffer();\n      }\n\n      return response.text();\n    }).then(function (responseData) {\n      var response = _this.response;\n      self.clearTimeout(_this.requestTimeout);\n      stats.loading.end = Math.max(self.performance.now(), stats.loading.first);\n      stats.loaded = stats.total = responseData[LENGTH];\n      var loaderResponse = {\n        url: response.url,\n        data: responseData\n      };\n\n      if (onProgress && !Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(config.highWaterMark)) {\n        onProgress(stats, context, responseData, response);\n      }\n\n      callbacks.onSuccess(loaderResponse, stats, context, response);\n    }).catch(function (error) {\n      self.clearTimeout(_this.requestTimeout);\n\n      if (stats.aborted) {\n        return;\n      } // CORS errors result in an undefined code. Set it to 0 here to align with XHR's behavior\n      // when destroying, 'error' itself can be undefined\n\n\n      var code = !error ? 0 : error.code || 0;\n      var text = !error ? null : error.message;\n      callbacks.onError({\n        code: code,\n        text: text\n      }, context, error ? error.details : null);\n    });\n  };\n\n  _proto.getCacheAge = function getCacheAge() {\n    var result = null;\n\n    if (this.response) {\n      var ageHeader = this.response.headers.get('age');\n      result = ageHeader ? parseFloat(ageHeader) : null;\n    }\n\n    return result;\n  };\n\n  _proto.loadProgressively = function loadProgressively(response, stats, context, highWaterMark, onProgress) {\n    if (highWaterMark === void 0) {\n      highWaterMark = 0;\n    }\n\n    var chunkCache = new _demux_chunk_cache__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n    var reader = response.body.getReader();\n\n    var pump = function pump() {\n      return reader.read().then(function (data) {\n        if (data.done) {\n          if (chunkCache.dataLength) {\n            onProgress(stats, context, chunkCache.flush(), response);\n          }\n\n          return Promise.resolve(new ArrayBuffer(0));\n        }\n\n        var chunk = data.value;\n        var len = chunk.length;\n        stats.loaded += len;\n\n        if (len < highWaterMark || chunkCache.dataLength) {\n          // The current chunk is too small to to be emitted or the cache already has data\n          // Push it to the cache\n          chunkCache.push(chunk);\n\n          if (chunkCache.dataLength >= highWaterMark) {\n            // flush in order to join the typed arrays\n            onProgress(stats, context, chunkCache.flush(), response);\n          }\n        } else {\n          // If there's nothing cached already, and the chache is large enough\n          // just emit the progress event\n          onProgress(stats, context, chunk, response);\n        }\n\n        return pump();\n      }).catch(function () {\n        /* aborted */\n        return Promise.reject();\n      });\n    };\n\n    return pump();\n  };\n\n  return FetchLoader;\n}();\n\nfunction getRequestParameters(context, signal) {\n  var initParams = {\n    method: 'GET',\n    mode: 'cors',\n    credentials: 'same-origin',\n    signal: signal,\n    headers: new self.Headers(_extends({}, context.headers))\n  };\n\n  if (context.rangeEnd) {\n    initParams.headers.set('Range', 'bytes=' + context.rangeStart + '-' + String(context.rangeEnd - 1));\n  }\n\n  return initParams;\n}\n\nfunction getRequest(context, initParams) {\n  return new self.Request(context.url, initParams);\n}\n\nvar FetchError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(FetchError, _Error);\n\n  function FetchError(message, code, details) {\n    var _this2;\n\n    _this2 = _Error.call(this, message) || this;\n    _this2.code = void 0;\n    _this2.details = void 0;\n    _this2.code = code;\n    _this2.details = details;\n    return _this2;\n  }\n\n  return FetchError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (FetchLoader);\n\n/***/ }),\n\n/***/ \"./src/utils/imsc1-ttml-parser.ts\":\n/*!****************************************!*\\\n  !*** ./src/utils/imsc1-ttml-parser.ts ***!\n  \\****************************************/\n/*! exports provided: IMSC1_CODEC, parseIMSC1 */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_944633__) {\n\n\"use strict\";\n__nested_webpack_require_944633__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_944633__.d(__webpack_exports__, \"IMSC1_CODEC\", function() { return IMSC1_CODEC; });\n/* harmony export (binding) */ __nested_webpack_require_944633__.d(__webpack_exports__, \"parseIMSC1\", function() { return parseIMSC1; });\n/* harmony import */ var _mp4_tools__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_944633__(/*! ./mp4-tools */ \"./src/utils/mp4-tools.ts\");\n/* harmony import */ var _vttparser__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_944633__(/*! ./vttparser */ \"./src/utils/vttparser.ts\");\n/* harmony import */ var _vttcue__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_944633__(/*! ./vttcue */ \"./src/utils/vttcue.ts\");\n/* harmony import */ var _demux_id3__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_944633__(/*! ../demux/id3 */ \"./src/demux/id3.ts\");\n/* harmony import */ var _timescale_conversion__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_944633__(/*! ./timescale-conversion */ \"./src/utils/timescale-conversion.ts\");\n/* harmony import */ var _webvtt_parser__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_944633__(/*! ./webvtt-parser */ \"./src/utils/webvtt-parser.ts\");\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n\n\n\n\n\n\nvar IMSC1_CODEC = 'stpp.ttml.im1t'; // Time format: h:m:s:frames(.subframes)\n\nvar HMSF_REGEX = /^(\\d{2,}):(\\d{2}):(\\d{2}):(\\d{2})\\.?(\\d+)?$/; // Time format: hours, minutes, seconds, milliseconds, frames, ticks\n\nvar TIME_UNIT_REGEX = /^(\\d*(?:\\.\\d*)?)(h|m|s|ms|f|t)$/;\nvar textAlignToLineAlign = {\n  left: 'start',\n  center: 'center',\n  right: 'end',\n  start: 'start',\n  end: 'end'\n};\nfunction parseIMSC1(payload, initPTS, timescale, callBack, errorCallBack) {\n  var results = Object(_mp4_tools__WEBPACK_IMPORTED_MODULE_0__[\"findBox\"])(new Uint8Array(payload), ['mdat']);\n\n  if (results.length === 0) {\n    errorCallBack(new Error('Could not parse IMSC1 mdat'));\n    return;\n  }\n\n  var ttmlList = results.map(function (mdat) {\n    return Object(_demux_id3__WEBPACK_IMPORTED_MODULE_3__[\"utf8ArrayToStr\"])(mdat);\n  });\n  var syncTime = Object(_timescale_conversion__WEBPACK_IMPORTED_MODULE_4__[\"toTimescaleFromScale\"])(initPTS, 1, timescale);\n\n  try {\n    ttmlList.forEach(function (ttml) {\n      return callBack(parseTTML(ttml, syncTime));\n    });\n  } catch (error) {\n    errorCallBack(error);\n  }\n}\n\nfunction parseTTML(ttml, syncTime) {\n  var parser = new DOMParser();\n  var xmlDoc = parser.parseFromString(ttml, 'text/xml');\n  var tt = xmlDoc.getElementsByTagName('tt')[0];\n\n  if (!tt) {\n    throw new Error('Invalid ttml');\n  }\n\n  var defaultRateInfo = {\n    frameRate: 30,\n    subFrameRate: 1,\n    frameRateMultiplier: 0,\n    tickRate: 0\n  };\n  var rateInfo = Object.keys(defaultRateInfo).reduce(function (result, key) {\n    result[key] = tt.getAttribute(\"ttp:\" + key) || defaultRateInfo[key];\n    return result;\n  }, {});\n  var trim = tt.getAttribute('xml:space') !== 'preserve';\n  var styleElements = collectionToDictionary(getElementCollection(tt, 'styling', 'style'));\n  var regionElements = collectionToDictionary(getElementCollection(tt, 'layout', 'region'));\n  var cueElements = getElementCollection(tt, 'body', '[begin]');\n  return [].map.call(cueElements, function (cueElement) {\n    var cueText = getTextContent(cueElement, trim);\n\n    if (!cueText || !cueElement.hasAttribute('begin')) {\n      return null;\n    }\n\n    var startTime = parseTtmlTime(cueElement.getAttribute('begin'), rateInfo);\n    var duration = parseTtmlTime(cueElement.getAttribute('dur'), rateInfo);\n    var endTime = parseTtmlTime(cueElement.getAttribute('end'), rateInfo);\n\n    if (startTime === null) {\n      throw timestampParsingError(cueElement);\n    }\n\n    if (endTime === null) {\n      if (duration === null) {\n        throw timestampParsingError(cueElement);\n      }\n\n      endTime = startTime + duration;\n    }\n\n    var cue = new _vttcue__WEBPACK_IMPORTED_MODULE_2__[\"default\"](startTime - syncTime, endTime - syncTime, cueText);\n    cue.id = Object(_webvtt_parser__WEBPACK_IMPORTED_MODULE_5__[\"generateCueId\"])(cue.startTime, cue.endTime, cue.text);\n    var region = regionElements[cueElement.getAttribute('region')];\n    var style = styleElements[cueElement.getAttribute('style')]; // TODO: Add regions to track and cue (origin and extend)\n    // These values are hard-coded (for now) to simulate region settings in the demo\n\n    cue.position = 10;\n    cue.size = 80; // Apply styles to cue\n\n    var styles = getTtmlStyles(region, style, styleElements);\n    var textAlign = styles.textAlign;\n\n    if (textAlign) {\n      // cue.positionAlign not settable in FF~2016\n      var lineAlign = textAlignToLineAlign[textAlign];\n\n      if (lineAlign) {\n        cue.lineAlign = lineAlign;\n      }\n\n      cue.align = textAlign;\n    }\n\n    _extends(cue, styles);\n\n    return cue;\n  }).filter(function (cue) {\n    return cue !== null;\n  });\n}\n\nfunction getElementCollection(fromElement, parentName, childName) {\n  var parent = fromElement.getElementsByTagName(parentName)[0];\n\n  if (parent) {\n    return [].slice.call(parent.querySelectorAll(childName));\n  }\n\n  return [];\n}\n\nfunction collectionToDictionary(elementsWithId) {\n  return elementsWithId.reduce(function (dict, element) {\n    var id = element.getAttribute('xml:id');\n\n    if (id) {\n      dict[id] = element;\n    }\n\n    return dict;\n  }, {});\n}\n\nfunction getTextContent(element, trim) {\n  return [].slice.call(element.childNodes).reduce(function (str, node, i) {\n    var _node$childNodes;\n\n    if (node.nodeName === 'br' && i) {\n      return str + '\\n';\n    }\n\n    if ((_node$childNodes = node.childNodes) !== null && _node$childNodes !== void 0 && _node$childNodes.length) {\n      return getTextContent(node, trim);\n    } else if (trim) {\n      return str + node.textContent.trim().replace(/\\s+/g, ' ');\n    }\n\n    return str + node.textContent;\n  }, '');\n}\n\nfunction getTtmlStyles(region, style, styleElements) {\n  var ttsNs = 'http://www.w3.org/ns/ttml#styling';\n  var regionStyle = null;\n  var styleAttributes = ['displayAlign', 'textAlign', 'color', 'backgroundColor', 'fontSize', 'fontFamily' // 'fontWeight',\n  // 'lineHeight',\n  // 'wrapOption',\n  // 'fontStyle',\n  // 'direction',\n  // 'writingMode'\n  ];\n  var regionStyleName = region !== null && region !== void 0 && region.hasAttribute('style') ? region.getAttribute('style') : null;\n\n  if (regionStyleName && styleElements.hasOwnProperty(regionStyleName)) {\n    regionStyle = styleElements[regionStyleName];\n  }\n\n  return styleAttributes.reduce(function (styles, name) {\n    var value = getAttributeNS(style, ttsNs, name) || getAttributeNS(region, ttsNs, name) || getAttributeNS(regionStyle, ttsNs, name);\n\n    if (value) {\n      styles[name] = value;\n    }\n\n    return styles;\n  }, {});\n}\n\nfunction getAttributeNS(element, ns, name) {\n  if (!element) {\n    return null;\n  }\n\n  return element.hasAttributeNS(ns, name) ? element.getAttributeNS(ns, name) : null;\n}\n\nfunction timestampParsingError(node) {\n  return new Error(\"Could not parse ttml timestamp \" + node);\n}\n\nfunction parseTtmlTime(timeAttributeValue, rateInfo) {\n  if (!timeAttributeValue) {\n    return null;\n  }\n\n  var seconds = Object(_vttparser__WEBPACK_IMPORTED_MODULE_1__[\"parseTimeStamp\"])(timeAttributeValue);\n\n  if (seconds === null) {\n    if (HMSF_REGEX.test(timeAttributeValue)) {\n      seconds = parseHoursMinutesSecondsFrames(timeAttributeValue, rateInfo);\n    } else if (TIME_UNIT_REGEX.test(timeAttributeValue)) {\n      seconds = parseTimeUnits(timeAttributeValue, rateInfo);\n    }\n  }\n\n  return seconds;\n}\n\nfunction parseHoursMinutesSecondsFrames(timeAttributeValue, rateInfo) {\n  var m = HMSF_REGEX.exec(timeAttributeValue);\n  var frames = (m[4] | 0) + (m[5] | 0) / rateInfo.subFrameRate;\n  return (m[1] | 0) * 3600 + (m[2] | 0) * 60 + (m[3] | 0) + frames / rateInfo.frameRate;\n}\n\nfunction parseTimeUnits(timeAttributeValue, rateInfo) {\n  var m = TIME_UNIT_REGEX.exec(timeAttributeValue);\n  var value = Number(m[1]);\n  var unit = m[2];\n\n  switch (unit) {\n    case 'h':\n      return value * 3600;\n\n    case 'm':\n      return value * 60;\n\n    case 'ms':\n      return value * 1000;\n\n    case 'f':\n      return value / rateInfo.frameRate;\n\n    case 't':\n      return value / rateInfo.tickRate;\n  }\n\n  return value;\n}\n\n/***/ }),\n\n/***/ \"./src/utils/logger.ts\":\n/*!*****************************!*\\\n  !*** ./src/utils/logger.ts ***!\n  \\*****************************/\n/*! exports provided: enableLogs, logger */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_953384__) {\n\n\"use strict\";\n__nested_webpack_require_953384__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_953384__.d(__webpack_exports__, \"enableLogs\", function() { return enableLogs; });\n/* harmony export (binding) */ __nested_webpack_require_953384__.d(__webpack_exports__, \"logger\", function() { return logger; });\nvar noop = function noop() {};\n\nvar fakeLogger = {\n  trace: noop,\n  debug: noop,\n  log: noop,\n  warn: noop,\n  info: noop,\n  error: noop\n};\nvar exportedLogger = fakeLogger; // let lastCallTime;\n// function formatMsgWithTimeInfo(type, msg) {\n//   const now = Date.now();\n//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';\n//   lastCallTime = now;\n//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';\n//   return msg;\n// }\n\nfunction consolePrintFn(type) {\n  var func = self.console[type];\n\n  if (func) {\n    return func.bind(self.console, \"[\" + type + \"] >\");\n  }\n\n  return noop;\n}\n\nfunction exportLoggerFunctions(debugConfig) {\n  for (var _len = arguments.length, functions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    functions[_key - 1] = arguments[_key];\n  }\n\n  functions.forEach(function (type) {\n    exportedLogger[type] = debugConfig[type] ? debugConfig[type].bind(debugConfig) : consolePrintFn(type);\n  });\n}\n\nfunction enableLogs(debugConfig) {\n  // check that console is available\n  if (self.console && debugConfig === true || typeof debugConfig === 'object') {\n    exportLoggerFunctions(debugConfig, // Remove out from list here to hard-disable a log-level\n    // 'trace',\n    'debug', 'log', 'info', 'warn', 'error'); // Some browsers don't allow to use bind on console object anyway\n    // fallback to default if needed\n\n    try {\n      exportedLogger.log();\n    } catch (e) {\n      exportedLogger = fakeLogger;\n    }\n  } else {\n    exportedLogger = fakeLogger;\n  }\n}\nvar logger = exportedLogger;\n\n/***/ }),\n\n/***/ \"./src/utils/mediakeys-helper.ts\":\n/*!***************************************!*\\\n  !*** ./src/utils/mediakeys-helper.ts ***!\n  \\***************************************/\n/*! exports provided: KeySystems, requestMediaKeySystemAccess */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_955601__) {\n\n\"use strict\";\n__nested_webpack_require_955601__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_955601__.d(__webpack_exports__, \"KeySystems\", function() { return KeySystems; });\n/* harmony export (binding) */ __nested_webpack_require_955601__.d(__webpack_exports__, \"requestMediaKeySystemAccess\", function() { return requestMediaKeySystemAccess; });\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess\n */\nvar KeySystems;\n\n(function (KeySystems) {\n  KeySystems[\"WIDEVINE\"] = \"com.widevine.alpha\";\n  KeySystems[\"PLAYREADY\"] = \"com.microsoft.playready\";\n})(KeySystems || (KeySystems = {}));\n\nvar requestMediaKeySystemAccess = function () {\n  if (typeof self !== 'undefined' && self.navigator && self.navigator.requestMediaKeySystemAccess) {\n    return self.navigator.requestMediaKeySystemAccess.bind(self.navigator);\n  } else {\n    return null;\n  }\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/utils/mediasource-helper.ts\":\n/*!*****************************************!*\\\n  !*** ./src/utils/mediasource-helper.ts ***!\n  \\*****************************************/\n/*! exports provided: getMediaSource */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_956796__) {\n\n\"use strict\";\n__nested_webpack_require_956796__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_956796__.d(__webpack_exports__, \"getMediaSource\", function() { return getMediaSource; });\n/**\n * MediaSource helper\n */\nfunction getMediaSource() {\n  return self.MediaSource || self.WebKitMediaSource;\n}\n\n/***/ }),\n\n/***/ \"./src/utils/mp4-tools.ts\":\n/*!********************************!*\\\n  !*** ./src/utils/mp4-tools.ts ***!\n  \\********************************/\n/*! exports provided: RemuxerTrackIdConfig, bin2str, readUint16, readUint32, readSint32, writeUint32, findBox, parseSegmentIndex, parseInitSegment, getStartDTS, getDuration, computeRawDurationFromSamples, offsetStartDTS, segmentValidRange, appendUint8Array, parseSamples, parseSEIMessageFromNALu, parseEmsg */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_957637__) {\n\n\"use strict\";\n__nested_webpack_require_957637__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"RemuxerTrackIdConfig\", function() { return RemuxerTrackIdConfig; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"bin2str\", function() { return bin2str; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"readUint16\", function() { return readUint16; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"readUint32\", function() { return readUint32; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"readSint32\", function() { return readSint32; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"writeUint32\", function() { return writeUint32; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"findBox\", function() { return findBox; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"parseSegmentIndex\", function() { return parseSegmentIndex; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"parseInitSegment\", function() { return parseInitSegment; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"getStartDTS\", function() { return getStartDTS; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"getDuration\", function() { return getDuration; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"computeRawDurationFromSamples\", function() { return computeRawDurationFromSamples; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"offsetStartDTS\", function() { return offsetStartDTS; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"segmentValidRange\", function() { return segmentValidRange; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"appendUint8Array\", function() { return appendUint8Array; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"parseSamples\", function() { return parseSamples; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"parseSEIMessageFromNALu\", function() { return parseSEIMessageFromNALu; });\n/* harmony export (binding) */ __nested_webpack_require_957637__.d(__webpack_exports__, \"parseEmsg\", function() { return parseEmsg; });\n/* harmony import */ var _typed_array__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_957637__(/*! ./typed-array */ \"./src/utils/typed-array.ts\");\n/* harmony import */ var _loader_fragment__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_957637__(/*! ../loader/fragment */ \"./src/loader/fragment.ts\");\n/* harmony import */ var _demux_id3__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_957637__(/*! ../demux/id3 */ \"./src/demux/id3.ts\");\n\n\n\nvar UINT32_MAX = Math.pow(2, 32) - 1;\nvar push = [].push; // We are using fixed track IDs for driving the MP4 remuxer\n// instead of following the TS PIDs.\n// There is no reason not to do this and some browsers/SourceBuffer-demuxers\n// may not like if there are TrackID \"switches\"\n// See https://github.com/video-dev/hls.js/issues/1331\n// Here we are mapping our internal track types to constant MP4 track IDs\n// With MSE currently one can only have one track of each, and we are muxing\n// whatever video/audio rendition in them.\n\nvar RemuxerTrackIdConfig = {\n  video: 1,\n  audio: 2,\n  id3: 3,\n  text: 4\n};\nfunction bin2str(data) {\n  return String.fromCharCode.apply(null, data);\n}\nfunction readUint16(buffer, offset) {\n  var val = buffer[offset] << 8 | buffer[offset + 1];\n  return val < 0 ? 65536 + val : val;\n}\nfunction readUint32(buffer, offset) {\n  var val = readSint32(buffer, offset);\n  return val < 0 ? 4294967296 + val : val;\n}\nfunction readSint32(buffer, offset) {\n  return buffer[offset] << 24 | buffer[offset + 1] << 16 | buffer[offset + 2] << 8 | buffer[offset + 3];\n}\nfunction writeUint32(buffer, offset, value) {\n  buffer[offset] = value >> 24;\n  buffer[offset + 1] = value >> 16 & 0xff;\n  buffer[offset + 2] = value >> 8 & 0xff;\n  buffer[offset + 3] = value & 0xff;\n} // Find the data for a box specified by its path\n\nfunction findBox(data, path) {\n  var results = [];\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return results;\n  }\n\n  var end = data.byteLength;\n\n  for (var i = 0; i < end;) {\n    var size = readUint32(data, i);\n    var type = bin2str(data.subarray(i + 4, i + 8));\n    var endbox = size > 1 ? i + size : end;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, endbox));\n      } else {\n        // recursively search for the next box along the path\n        var subresults = findBox(data.subarray(i + 8, endbox), path.slice(1));\n\n        if (subresults.length) {\n          push.apply(results, subresults);\n        }\n      }\n    }\n\n    i = endbox;\n  } // we've finished searching all of data\n\n\n  return results;\n}\nfunction parseSegmentIndex(sidx) {\n  var references = [];\n  var version = sidx[0]; // set initial offset, we skip the reference ID (not needed)\n\n  var index = 8;\n  var timescale = readUint32(sidx, index);\n  index += 4; // TODO: parse earliestPresentationTime and firstOffset\n  // usually zero in our case\n\n  var earliestPresentationTime = 0;\n  var firstOffset = 0;\n\n  if (version === 0) {\n    index += 8;\n  } else {\n    index += 16;\n  } // skip reserved\n\n\n  index += 2;\n  var startByte = sidx.length + firstOffset;\n  var referencesCount = readUint16(sidx, index);\n  index += 2;\n\n  for (var i = 0; i < referencesCount; i++) {\n    var referenceIndex = index;\n    var referenceInfo = readUint32(sidx, referenceIndex);\n    referenceIndex += 4;\n    var referenceSize = referenceInfo & 0x7fffffff;\n    var referenceType = (referenceInfo & 0x80000000) >>> 31;\n\n    if (referenceType === 1) {\n      // eslint-disable-next-line no-console\n      console.warn('SIDX has hierarchical references (not supported)');\n      return null;\n    }\n\n    var subsegmentDuration = readUint32(sidx, referenceIndex);\n    referenceIndex += 4;\n    references.push({\n      referenceSize: referenceSize,\n      subsegmentDuration: subsegmentDuration,\n      // unscaled\n      info: {\n        duration: subsegmentDuration / timescale,\n        start: startByte,\n        end: startByte + referenceSize - 1\n      }\n    });\n    startByte += referenceSize; // Skipping 1 bit for |startsWithSap|, 3 bits for |sapType|, and 28 bits\n    // for |sapDelta|.\n\n    referenceIndex += 4; // skip to next ref\n\n    index = referenceIndex;\n  }\n\n  return {\n    earliestPresentationTime: earliestPresentationTime,\n    timescale: timescale,\n    version: version,\n    referencesCount: referencesCount,\n    references: references\n  };\n}\n/**\n * Parses an MP4 initialization segment and extracts stream type and\n * timescale values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * moov > trak > mdia > hdlr\n * ```\n * @param initSegment {Uint8Array} the bytes of the init segment\n * @return {InitData} a hash of track type to timescale values or null if\n * the init segment is malformed.\n */\n\nfunction parseInitSegment(initSegment) {\n  var result = [];\n  var traks = findBox(initSegment, ['moov', 'trak']);\n\n  for (var i = 0; i < traks.length; i++) {\n    var trak = traks[i];\n    var tkhd = findBox(trak, ['tkhd'])[0];\n\n    if (tkhd) {\n      var version = tkhd[0];\n\n      var _index = version === 0 ? 12 : 20;\n\n      var trackId = readUint32(tkhd, _index);\n      var mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n\n      if (mdhd) {\n        version = mdhd[0];\n        _index = version === 0 ? 12 : 20;\n        var timescale = readUint32(mdhd, _index);\n        var hdlr = findBox(trak, ['mdia', 'hdlr'])[0];\n\n        if (hdlr) {\n          var hdlrType = bin2str(hdlr.subarray(8, 12));\n          var type = {\n            soun: _loader_fragment__WEBPACK_IMPORTED_MODULE_1__[\"ElementaryStreamTypes\"].AUDIO,\n            vide: _loader_fragment__WEBPACK_IMPORTED_MODULE_1__[\"ElementaryStreamTypes\"].VIDEO\n          }[hdlrType];\n\n          if (type) {\n            // Parse codec details\n            var stsd = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n            var codec = void 0;\n\n            if (stsd) {\n              codec = bin2str(stsd.subarray(12, 16)); // TODO: Parse codec details to be able to build MIME type.\n              // stsd.start += 8;\n              // const codecBox = findBox(stsd, [codec])[0];\n              // if (codecBox) {\n              //   TODO: Codec parsing support for avc1, mp4a, hevc, av01...\n              // }\n            }\n\n            result[trackId] = {\n              timescale: timescale,\n              type: type\n            };\n            result[type] = {\n              timescale: timescale,\n              id: trackId,\n              codec: codec\n            };\n          }\n        }\n      }\n    }\n  }\n\n  var trex = findBox(initSegment, ['moov', 'mvex', 'trex']);\n  trex.forEach(function (trex) {\n    var trackId = readUint32(trex, 4);\n    var track = result[trackId];\n\n    if (track) {\n      track.default = {\n        duration: readUint32(trex, 12),\n        flags: readUint32(trex, 20)\n      };\n    }\n  });\n  return result;\n}\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param initData {InitData} a hash of track type to timescale values\n * @param fmp4 {Uint8Array} the bytes of the mp4 fragment\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\n\nfunction getStartDTS(initData, fmp4) {\n  // we need info from two children of each track fragment box\n  return findBox(fmp4, ['moof', 'traf']).reduce(function (result, traf) {\n    var tfdt = findBox(traf, ['tfdt'])[0];\n    var version = tfdt[0];\n    var start = findBox(traf, ['tfhd']).reduce(function (result, tfhd) {\n      // get the track id from the tfhd\n      var id = readUint32(tfhd, 4);\n      var track = initData[id];\n\n      if (track) {\n        var baseTime = readUint32(tfdt, 4);\n\n        if (version === 1) {\n          baseTime *= Math.pow(2, 32);\n          baseTime += readUint32(tfdt, 8);\n        } // assume a 90kHz clock if no timescale was specified\n\n\n        var scale = track.timescale || 90e3; // convert base time to seconds\n\n        var startTime = baseTime / scale;\n\n        if (isFinite(startTime) && (result === null || startTime < result)) {\n          return startTime;\n        }\n      }\n\n      return result;\n    }, null);\n\n    if (start !== null && isFinite(start) && (result === null || start < result)) {\n      return start;\n    }\n\n    return result;\n  }, null) || 0;\n}\n/*\n  For Reference:\n  aligned(8) class TrackFragmentHeaderBox\n           extends FullBox(‘tfhd’, 0, tf_flags){\n     unsigned int(32)  track_ID;\n     // all the following are optional fields\n     unsigned int(64)  base_data_offset;\n     unsigned int(32)  sample_description_index;\n     unsigned int(32)  default_sample_duration;\n     unsigned int(32)  default_sample_size;\n     unsigned int(32)  default_sample_flags\n  }\n */\n\nfunction getDuration(data, initData) {\n  var rawDuration = 0;\n  var videoDuration = 0;\n  var audioDuration = 0;\n  var trafs = findBox(data, ['moof', 'traf']);\n\n  for (var i = 0; i < trafs.length; i++) {\n    var traf = trafs[i]; // There is only one tfhd & trun per traf\n    // This is true for CMAF style content, and we should perhaps check the ftyp\n    // and only look for a single trun then, but for ISOBMFF we should check\n    // for multiple track runs.\n\n    var tfhd = findBox(traf, ['tfhd'])[0]; // get the track id from the tfhd\n\n    var id = readUint32(tfhd, 4);\n    var track = initData[id];\n\n    if (!track) {\n      continue;\n    }\n\n    var trackDefault = track.default;\n    var tfhdFlags = readUint32(tfhd, 0) | (trackDefault === null || trackDefault === void 0 ? void 0 : trackDefault.flags);\n    var sampleDuration = trackDefault === null || trackDefault === void 0 ? void 0 : trackDefault.duration;\n\n    if (tfhdFlags & 0x000008) {\n      // 0x000008 indicates the presence of the default_sample_duration field\n      if (tfhdFlags & 0x000002) {\n        // 0x000002 indicates the presence of the sample_description_index field, which precedes default_sample_duration\n        // If present, the default_sample_duration exists at byte offset 12\n        sampleDuration = readUint32(tfhd, 12);\n      } else {\n        // Otherwise, the duration is at byte offset 8\n        sampleDuration = readUint32(tfhd, 8);\n      }\n    } // assume a 90kHz clock if no timescale was specified\n\n\n    var timescale = track.timescale || 90e3;\n    var truns = findBox(traf, ['trun']);\n\n    for (var j = 0; j < truns.length; j++) {\n      rawDuration = computeRawDurationFromSamples(truns[j]);\n\n      if (!rawDuration && sampleDuration) {\n        var sampleCount = readUint32(truns[j], 4);\n        rawDuration = sampleDuration * sampleCount;\n      }\n\n      if (track.type === _loader_fragment__WEBPACK_IMPORTED_MODULE_1__[\"ElementaryStreamTypes\"].VIDEO) {\n        videoDuration += rawDuration / timescale;\n      } else if (track.type === _loader_fragment__WEBPACK_IMPORTED_MODULE_1__[\"ElementaryStreamTypes\"].AUDIO) {\n        audioDuration += rawDuration / timescale;\n      }\n    }\n  }\n\n  if (videoDuration === 0 && audioDuration === 0) {\n    // If duration samples are not available in the traf use sidx subsegment_duration\n    var sidxDuration = 0;\n    var sidxs = findBox(data, ['sidx']);\n\n    for (var _i = 0; _i < sidxs.length; _i++) {\n      var sidx = parseSegmentIndex(sidxs[_i]);\n\n      if (sidx !== null && sidx !== void 0 && sidx.references) {\n        sidxDuration += sidx.references.reduce(function (dur, ref) {\n          return dur + ref.info.duration || 0;\n        }, 0);\n      }\n    }\n\n    return sidxDuration;\n  }\n\n  if (videoDuration) {\n    return videoDuration;\n  }\n\n  return audioDuration;\n}\n/*\n  For Reference:\n  aligned(8) class TrackRunBox\n           extends FullBox(‘trun’, version, tr_flags) {\n     unsigned int(32)  sample_count;\n     // the following are optional fields\n     signed int(32) data_offset;\n     unsigned int(32)  first_sample_flags;\n     // all fields in the following array are optional\n     {\n        unsigned int(32)  sample_duration;\n        unsigned int(32)  sample_size;\n        unsigned int(32)  sample_flags\n        if (version == 0)\n           { unsigned int(32)\n        else\n           { signed int(32)\n     }[ sample_count ]\n  }\n */\n\nfunction computeRawDurationFromSamples(trun) {\n  var flags = readUint32(trun, 0); // Flags are at offset 0, non-optional sample_count is at offset 4. Therefore we start 8 bytes in.\n  // Each field is an int32, which is 4 bytes\n\n  var offset = 8; // data-offset-present flag\n\n  if (flags & 0x000001) {\n    offset += 4;\n  } // first-sample-flags-present flag\n\n\n  if (flags & 0x000004) {\n    offset += 4;\n  }\n\n  var duration = 0;\n  var sampleCount = readUint32(trun, 4);\n\n  for (var i = 0; i < sampleCount; i++) {\n    // sample-duration-present flag\n    if (flags & 0x000100) {\n      var sampleDuration = readUint32(trun, offset);\n      duration += sampleDuration;\n      offset += 4;\n    } // sample-size-present flag\n\n\n    if (flags & 0x000200) {\n      offset += 4;\n    } // sample-flags-present flag\n\n\n    if (flags & 0x000400) {\n      offset += 4;\n    } // sample-composition-time-offsets-present flag\n\n\n    if (flags & 0x000800) {\n      offset += 4;\n    }\n  }\n\n  return duration;\n}\nfunction offsetStartDTS(initData, fmp4, timeOffset) {\n  findBox(fmp4, ['moof', 'traf']).forEach(function (traf) {\n    findBox(traf, ['tfhd']).forEach(function (tfhd) {\n      // get the track id from the tfhd\n      var id = readUint32(tfhd, 4);\n      var track = initData[id];\n\n      if (!track) {\n        return;\n      } // assume a 90kHz clock if no timescale was specified\n\n\n      var timescale = track.timescale || 90e3; // get the base media decode time from the tfdt\n\n      findBox(traf, ['tfdt']).forEach(function (tfdt) {\n        var version = tfdt[0];\n        var baseMediaDecodeTime = readUint32(tfdt, 4);\n\n        if (version === 0) {\n          baseMediaDecodeTime -= timeOffset * timescale;\n          baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);\n          writeUint32(tfdt, 4, baseMediaDecodeTime);\n        } else {\n          baseMediaDecodeTime *= Math.pow(2, 32);\n          baseMediaDecodeTime += readUint32(tfdt, 8);\n          baseMediaDecodeTime -= timeOffset * timescale;\n          baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);\n          var upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));\n          var lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n          writeUint32(tfdt, 4, upper);\n          writeUint32(tfdt, 8, lower);\n        }\n      });\n    });\n  });\n} // TODO: Check if the last moof+mdat pair is part of the valid range\n\nfunction segmentValidRange(data) {\n  var segmentedRange = {\n    valid: null,\n    remainder: null\n  };\n  var moofs = findBox(data, ['moof']);\n\n  if (!moofs) {\n    return segmentedRange;\n  } else if (moofs.length < 2) {\n    segmentedRange.remainder = data;\n    return segmentedRange;\n  }\n\n  var last = moofs[moofs.length - 1]; // Offset by 8 bytes; findBox offsets the start by as much\n\n  segmentedRange.valid = Object(_typed_array__WEBPACK_IMPORTED_MODULE_0__[\"sliceUint8\"])(data, 0, last.byteOffset - 8);\n  segmentedRange.remainder = Object(_typed_array__WEBPACK_IMPORTED_MODULE_0__[\"sliceUint8\"])(data, last.byteOffset - 8);\n  return segmentedRange;\n}\nfunction appendUint8Array(data1, data2) {\n  var temp = new Uint8Array(data1.length + data2.length);\n  temp.set(data1);\n  temp.set(data2, data1.length);\n  return temp;\n}\nfunction parseSamples(timeOffset, track) {\n  var seiSamples = [];\n  var videoData = track.samples;\n  var timescale = track.timescale;\n  var trackId = track.id;\n  var isHEVCFlavor = false;\n  var moofs = findBox(videoData, ['moof']);\n  moofs.map(function (moof) {\n    var moofOffset = moof.byteOffset - 8;\n    var trafs = findBox(moof, ['traf']);\n    trafs.map(function (traf) {\n      // get the base media decode time from the tfdt\n      var baseTime = findBox(traf, ['tfdt']).map(function (tfdt) {\n        var version = tfdt[0];\n        var result = readUint32(tfdt, 4);\n\n        if (version === 1) {\n          result *= Math.pow(2, 32);\n          result += readUint32(tfdt, 8);\n        }\n\n        return result / timescale;\n      })[0];\n\n      if (baseTime !== undefined) {\n        timeOffset = baseTime;\n      }\n\n      return findBox(traf, ['tfhd']).map(function (tfhd) {\n        var id = readUint32(tfhd, 4);\n        var tfhdFlags = readUint32(tfhd, 0) & 0xffffff;\n        var baseDataOffsetPresent = (tfhdFlags & 0x000001) !== 0;\n        var sampleDescriptionIndexPresent = (tfhdFlags & 0x000002) !== 0;\n        var defaultSampleDurationPresent = (tfhdFlags & 0x000008) !== 0;\n        var defaultSampleDuration = 0;\n        var defaultSampleSizePresent = (tfhdFlags & 0x000010) !== 0;\n        var defaultSampleSize = 0;\n        var defaultSampleFlagsPresent = (tfhdFlags & 0x000020) !== 0;\n        var tfhdOffset = 8;\n\n        if (id === trackId) {\n          if (baseDataOffsetPresent) {\n            tfhdOffset += 8;\n          }\n\n          if (sampleDescriptionIndexPresent) {\n            tfhdOffset += 4;\n          }\n\n          if (defaultSampleDurationPresent) {\n            defaultSampleDuration = readUint32(tfhd, tfhdOffset);\n            tfhdOffset += 4;\n          }\n\n          if (defaultSampleSizePresent) {\n            defaultSampleSize = readUint32(tfhd, tfhdOffset);\n            tfhdOffset += 4;\n          }\n\n          if (defaultSampleFlagsPresent) {\n            tfhdOffset += 4;\n          }\n\n          if (track.type === 'video') {\n            isHEVCFlavor = isHEVC(track.codec);\n          }\n\n          findBox(traf, ['trun']).map(function (trun) {\n            var version = trun[0];\n            var flags = readUint32(trun, 0) & 0xffffff;\n            var dataOffsetPresent = (flags & 0x000001) !== 0;\n            var dataOffset = 0;\n            var firstSampleFlagsPresent = (flags & 0x000004) !== 0;\n            var sampleDurationPresent = (flags & 0x000100) !== 0;\n            var sampleDuration = 0;\n            var sampleSizePresent = (flags & 0x000200) !== 0;\n            var sampleSize = 0;\n            var sampleFlagsPresent = (flags & 0x000400) !== 0;\n            var sampleCompositionOffsetsPresent = (flags & 0x000800) !== 0;\n            var compositionOffset = 0;\n            var sampleCount = readUint32(trun, 4);\n            var trunOffset = 8; // past version, flags, and sample count\n\n            if (dataOffsetPresent) {\n              dataOffset = readUint32(trun, trunOffset);\n              trunOffset += 4;\n            }\n\n            if (firstSampleFlagsPresent) {\n              trunOffset += 4;\n            }\n\n            var sampleOffset = dataOffset + moofOffset;\n\n            for (var ix = 0; ix < sampleCount; ix++) {\n              if (sampleDurationPresent) {\n                sampleDuration = readUint32(trun, trunOffset);\n                trunOffset += 4;\n              } else {\n                sampleDuration = defaultSampleDuration;\n              }\n\n              if (sampleSizePresent) {\n                sampleSize = readUint32(trun, trunOffset);\n                trunOffset += 4;\n              } else {\n                sampleSize = defaultSampleSize;\n              }\n\n              if (sampleFlagsPresent) {\n                trunOffset += 4;\n              }\n\n              if (sampleCompositionOffsetsPresent) {\n                if (version === 0) {\n                  compositionOffset = readUint32(trun, trunOffset);\n                } else {\n                  compositionOffset = readSint32(trun, trunOffset);\n                }\n\n                trunOffset += 4;\n              }\n\n              if (track.type === _loader_fragment__WEBPACK_IMPORTED_MODULE_1__[\"ElementaryStreamTypes\"].VIDEO) {\n                var naluTotalSize = 0;\n\n                while (naluTotalSize < sampleSize) {\n                  var naluSize = readUint32(videoData, sampleOffset);\n                  sampleOffset += 4;\n                  var naluType = videoData[sampleOffset] & 0x1f;\n\n                  if (isSEIMessage(isHEVCFlavor, naluType)) {\n                    var data = videoData.subarray(sampleOffset, sampleOffset + naluSize);\n                    parseSEIMessageFromNALu(data, timeOffset + compositionOffset / timescale, seiSamples);\n                  }\n\n                  sampleOffset += naluSize;\n                  naluTotalSize += naluSize + 4;\n                }\n              }\n\n              timeOffset += sampleDuration / timescale;\n            }\n          });\n        }\n      });\n    });\n  });\n  return seiSamples;\n}\n\nfunction isHEVC(codec) {\n  if (!codec) {\n    return false;\n  }\n\n  var delimit = codec.indexOf('.');\n  var baseCodec = delimit < 0 ? codec : codec.substring(0, delimit);\n  return baseCodec === 'hvc1' || baseCodec === 'hev1' || // Dolby Vision\n  baseCodec === 'dvh1' || baseCodec === 'dvhe';\n}\n\nfunction isSEIMessage(isHEVCFlavor, naluType) {\n  return isHEVCFlavor ? naluType === 39 || naluType === 40 : naluType === 6;\n}\n\nfunction parseSEIMessageFromNALu(unescapedData, pts, samples) {\n  var data = discardEPB(unescapedData);\n  var seiPtr = 0; // skip frameType\n\n  seiPtr++;\n  var payloadType = 0;\n  var payloadSize = 0;\n  var endOfCaptions = false;\n  var b = 0;\n\n  while (seiPtr < data.length) {\n    payloadType = 0;\n\n    do {\n      if (seiPtr >= data.length) {\n        break;\n      }\n\n      b = data[seiPtr++];\n      payloadType += b;\n    } while (b === 0xff); // Parse payload size.\n\n\n    payloadSize = 0;\n\n    do {\n      if (seiPtr >= data.length) {\n        break;\n      }\n\n      b = data[seiPtr++];\n      payloadSize += b;\n    } while (b === 0xff);\n\n    var leftOver = data.length - seiPtr;\n\n    if (!endOfCaptions && payloadType === 4 && seiPtr < data.length) {\n      endOfCaptions = true;\n      var countryCode = data[seiPtr++];\n\n      if (countryCode === 181) {\n        var providerCode = readUint16(data, seiPtr);\n        seiPtr += 2;\n\n        if (providerCode === 49) {\n          var userStructure = readUint32(data, seiPtr);\n          seiPtr += 4;\n\n          if (userStructure === 0x47413934) {\n            var userDataType = data[seiPtr++]; // Raw CEA-608 bytes wrapped in CEA-708 packet\n\n            if (userDataType === 3) {\n              var firstByte = data[seiPtr++];\n              var totalCCs = 0x1f & firstByte;\n              var enabled = 0x40 & firstByte;\n              var totalBytes = enabled ? 2 + totalCCs * 3 : 0;\n              var byteArray = new Uint8Array(totalBytes);\n\n              if (enabled) {\n                byteArray[0] = firstByte;\n\n                for (var i = 1; i < totalBytes; i++) {\n                  byteArray[i] = data[seiPtr++];\n                }\n              }\n\n              samples.push({\n                type: userDataType,\n                payloadType: payloadType,\n                pts: pts,\n                bytes: byteArray\n              });\n            }\n          }\n        }\n      }\n    } else if (payloadType === 5 && payloadSize < leftOver) {\n      endOfCaptions = true;\n\n      if (payloadSize > 16) {\n        var uuidStrArray = [];\n\n        for (var _i2 = 0; _i2 < 16; _i2++) {\n          var _b = data[seiPtr++].toString(16);\n\n          uuidStrArray.push(_b.length == 1 ? '0' + _b : _b);\n\n          if (_i2 === 3 || _i2 === 5 || _i2 === 7 || _i2 === 9) {\n            uuidStrArray.push('-');\n          }\n        }\n\n        var length = payloadSize - 16;\n        var userDataBytes = new Uint8Array(length);\n\n        for (var _i3 = 0; _i3 < length; _i3++) {\n          userDataBytes[_i3] = data[seiPtr++];\n        }\n\n        samples.push({\n          payloadType: payloadType,\n          pts: pts,\n          uuid: uuidStrArray.join(''),\n          userData: Object(_demux_id3__WEBPACK_IMPORTED_MODULE_2__[\"utf8ArrayToStr\"])(userDataBytes),\n          userDataBytes: userDataBytes\n        });\n      }\n    } else if (payloadSize < leftOver) {\n      seiPtr += payloadSize;\n    } else if (payloadSize > leftOver) {\n      break;\n    }\n  }\n}\n/**\n * remove Emulation Prevention bytes from a RBSP\n */\n\nfunction discardEPB(data) {\n  var length = data.byteLength;\n  var EPBPositions = [];\n  var i = 1; // Find all `Emulation Prevention Bytes`\n\n  while (i < length - 2) {\n    if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n      EPBPositions.push(i + 2);\n      i += 2;\n    } else {\n      i++;\n    }\n  } // If no Emulation Prevention Bytes were found just return the original\n  // array\n\n\n  if (EPBPositions.length === 0) {\n    return data;\n  } // Create a new array to hold the NAL unit data\n\n\n  var newLength = length - EPBPositions.length;\n  var newData = new Uint8Array(newLength);\n  var sourceIndex = 0;\n\n  for (i = 0; i < newLength; sourceIndex++, i++) {\n    if (sourceIndex === EPBPositions[0]) {\n      // Skip this byte\n      sourceIndex++; // Remove this position index\n\n      EPBPositions.shift();\n    }\n\n    newData[i] = data[sourceIndex];\n  }\n\n  return newData;\n}\n\nfunction parseEmsg(data) {\n  var version = data[0];\n  var schemeIdUri = '';\n  var value = '';\n  var timeScale = 0;\n  var presentationTimeDelta = 0;\n  var presentationTime = 0;\n  var eventDuration = 0;\n  var id = 0;\n  var offset = 0;\n\n  if (version === 0) {\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      value += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    value += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n    timeScale = readUint32(data, 12);\n    presentationTimeDelta = readUint32(data, 16);\n    eventDuration = readUint32(data, 20);\n    id = readUint32(data, 24);\n    offset = 28;\n  } else if (version === 1) {\n    offset += 4;\n    timeScale = readUint32(data, offset);\n    offset += 4;\n    var leftPresentationTime = readUint32(data, offset);\n    offset += 4;\n    var rightPresentationTime = readUint32(data, offset);\n    offset += 4;\n    presentationTime = Math.pow(2, 32) * leftPresentationTime + rightPresentationTime;\n\n    if (!Number.isSafeInteger(presentationTime)) {\n      presentationTime = Number.MAX_SAFE_INTEGER; // eslint-disable-next-line no-console\n\n      console.warn('Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box');\n    }\n\n    eventDuration = readUint32(data, offset);\n    offset += 4;\n    id = readUint32(data, offset);\n    offset += 4;\n\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      value += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    value += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n  }\n\n  var payload = data.subarray(offset, data.byteLength);\n  return {\n    schemeIdUri: schemeIdUri,\n    value: value,\n    timeScale: timeScale,\n    presentationTime: presentationTime,\n    presentationTimeDelta: presentationTimeDelta,\n    eventDuration: eventDuration,\n    id: id,\n    payload: payload\n  };\n}\n\n/***/ }),\n\n/***/ \"./src/utils/output-filter.ts\":\n/*!************************************!*\\\n  !*** ./src/utils/output-filter.ts ***!\n  \\************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_988126__) {\n\n\"use strict\";\n__nested_webpack_require_988126__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_988126__.d(__webpack_exports__, \"default\", function() { return OutputFilter; });\nvar OutputFilter = /*#__PURE__*/function () {\n  function OutputFilter(timelineController, trackName) {\n    this.timelineController = void 0;\n    this.cueRanges = [];\n    this.trackName = void 0;\n    this.startTime = null;\n    this.endTime = null;\n    this.screen = null;\n    this.timelineController = timelineController;\n    this.trackName = trackName;\n  }\n\n  var _proto = OutputFilter.prototype;\n\n  _proto.dispatchCue = function dispatchCue() {\n    if (this.startTime === null) {\n      return;\n    }\n\n    this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges);\n    this.startTime = null;\n  };\n\n  _proto.newCue = function newCue(startTime, endTime, screen) {\n    if (this.startTime === null || this.startTime > startTime) {\n      this.startTime = startTime;\n    }\n\n    this.endTime = endTime;\n    this.screen = screen;\n    this.timelineController.createCaptionsTrack(this.trackName);\n  };\n\n  _proto.reset = function reset() {\n    this.cueRanges = [];\n    this.startTime = null;\n  };\n\n  return OutputFilter;\n}();\n\n\n\n/***/ }),\n\n/***/ \"./src/utils/texttrack-utils.ts\":\n/*!**************************************!*\\\n  !*** ./src/utils/texttrack-utils.ts ***!\n  \\**************************************/\n/*! exports provided: sendAddTrackEvent, addCueToTrack, clearCurrentCues, removeCuesInRange, getCuesInRange */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_989736__) {\n\n\"use strict\";\n__nested_webpack_require_989736__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_989736__.d(__webpack_exports__, \"sendAddTrackEvent\", function() { return sendAddTrackEvent; });\n/* harmony export (binding) */ __nested_webpack_require_989736__.d(__webpack_exports__, \"addCueToTrack\", function() { return addCueToTrack; });\n/* harmony export (binding) */ __nested_webpack_require_989736__.d(__webpack_exports__, \"clearCurrentCues\", function() { return clearCurrentCues; });\n/* harmony export (binding) */ __nested_webpack_require_989736__.d(__webpack_exports__, \"removeCuesInRange\", function() { return removeCuesInRange; });\n/* harmony export (binding) */ __nested_webpack_require_989736__.d(__webpack_exports__, \"getCuesInRange\", function() { return getCuesInRange; });\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_989736__(/*! ./logger */ \"./src/utils/logger.ts\");\n\nfunction sendAddTrackEvent(track, videoEl) {\n  var event;\n\n  try {\n    event = new Event('addtrack');\n  } catch (err) {\n    // for IE11\n    event = document.createEvent('Event');\n    event.initEvent('addtrack', false, false);\n  }\n\n  event.track = track;\n  videoEl.dispatchEvent(event);\n}\nfunction addCueToTrack(track, cue) {\n  // Sometimes there are cue overlaps on segmented vtts so the same\n  // cue can appear more than once in different vtt files.\n  // This avoid showing duplicated cues with same timecode and text.\n  var mode = track.mode;\n\n  if (mode === 'disabled') {\n    track.mode = 'hidden';\n  }\n\n  if (track.cues && !track.cues.getCueById(cue.id)) {\n    try {\n      track.addCue(cue);\n\n      if (!track.cues.getCueById(cue.id)) {\n        throw new Error(\"addCue is failed for: \" + cue);\n      }\n    } catch (err) {\n      _logger__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].debug(\"[texttrack-utils]: \" + err);\n      var textTrackCue = new self.TextTrackCue(cue.startTime, cue.endTime, cue.text);\n      textTrackCue.id = cue.id;\n      track.addCue(textTrackCue);\n    }\n  }\n\n  if (mode === 'disabled') {\n    track.mode = mode;\n  }\n}\nfunction clearCurrentCues(track) {\n  // When track.mode is disabled, track.cues will be null.\n  // To guarantee the removal of cues, we need to temporarily\n  // change the mode to hidden\n  var mode = track.mode;\n\n  if (mode === 'disabled') {\n    track.mode = 'hidden';\n  }\n\n  if (track.cues) {\n    for (var i = track.cues.length; i--;) {\n      track.removeCue(track.cues[i]);\n    }\n  }\n\n  if (mode === 'disabled') {\n    track.mode = mode;\n  }\n}\nfunction removeCuesInRange(track, start, end, predicate) {\n  var mode = track.mode;\n\n  if (mode === 'disabled') {\n    track.mode = 'hidden';\n  }\n\n  if (track.cues && track.cues.length > 0) {\n    var cues = getCuesInRange(track.cues, start, end);\n\n    for (var i = 0; i < cues.length; i++) {\n      if (!predicate || predicate(cues[i])) {\n        track.removeCue(cues[i]);\n      }\n    }\n  }\n\n  if (mode === 'disabled') {\n    track.mode = mode;\n  }\n} // Find first cue starting after given time.\n// Modified version of binary search O(log(n)).\n\nfunction getFirstCueIndexAfterTime(cues, time) {\n  // If first cue starts after time, start there\n  if (time < cues[0].startTime) {\n    return 0;\n  } // If the last cue ends before time there is no overlap\n\n\n  var len = cues.length - 1;\n\n  if (time > cues[len].endTime) {\n    return -1;\n  }\n\n  var left = 0;\n  var right = len;\n\n  while (left <= right) {\n    var mid = Math.floor((right + left) / 2);\n\n    if (time < cues[mid].startTime) {\n      right = mid - 1;\n    } else if (time > cues[mid].startTime && left < len) {\n      left = mid + 1;\n    } else {\n      // If it's not lower or higher, it must be equal.\n      return mid;\n    }\n  } // At this point, left and right have swapped.\n  // No direct match was found, left or right element must be the closest. Check which one has the smallest diff.\n\n\n  return cues[left].startTime - time < time - cues[right].startTime ? left : right;\n}\n\nfunction getCuesInRange(cues, start, end) {\n  var cuesFound = [];\n  var firstCueInRange = getFirstCueIndexAfterTime(cues, start);\n\n  if (firstCueInRange > -1) {\n    for (var i = firstCueInRange, len = cues.length; i < len; i++) {\n      var _cue = cues[i];\n\n      if (_cue.startTime >= start && _cue.endTime <= end) {\n        cuesFound.push(_cue);\n      } else if (_cue.startTime > end) {\n        return cuesFound;\n      }\n    }\n  }\n\n  return cuesFound;\n}\n\n/***/ }),\n\n/***/ \"./src/utils/time-ranges.ts\":\n/*!**********************************!*\\\n  !*** ./src/utils/time-ranges.ts ***!\n  \\**********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_994333__) {\n\n\"use strict\";\n__nested_webpack_require_994333__.r(__webpack_exports__);\n/**\n *  TimeRanges to string helper\n */\nvar TimeRanges = {\n  toString: function toString(r) {\n    var log = '';\n    var len = r.length;\n\n    for (var i = 0; i < len; i++) {\n      log += '[' + r.start(i).toFixed(3) + ',' + r.end(i).toFixed(3) + ']';\n    }\n\n    return log;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (TimeRanges);\n\n/***/ }),\n\n/***/ \"./src/utils/timescale-conversion.ts\":\n/*!*******************************************!*\\\n  !*** ./src/utils/timescale-conversion.ts ***!\n  \\*******************************************/\n/*! exports provided: toTimescaleFromBase, toTimescaleFromScale, toMsFromMpegTsClock, toMpegTsClockFromTimescale */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_995134__) {\n\n\"use strict\";\n__nested_webpack_require_995134__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_995134__.d(__webpack_exports__, \"toTimescaleFromBase\", function() { return toTimescaleFromBase; });\n/* harmony export (binding) */ __nested_webpack_require_995134__.d(__webpack_exports__, \"toTimescaleFromScale\", function() { return toTimescaleFromScale; });\n/* harmony export (binding) */ __nested_webpack_require_995134__.d(__webpack_exports__, \"toMsFromMpegTsClock\", function() { return toMsFromMpegTsClock; });\n/* harmony export (binding) */ __nested_webpack_require_995134__.d(__webpack_exports__, \"toMpegTsClockFromTimescale\", function() { return toMpegTsClockFromTimescale; });\nvar MPEG_TS_CLOCK_FREQ_HZ = 90000;\nfunction toTimescaleFromBase(value, destScale, srcBase, round) {\n  if (srcBase === void 0) {\n    srcBase = 1;\n  }\n\n  if (round === void 0) {\n    round = false;\n  }\n\n  var result = value * destScale * srcBase; // equivalent to `(value * scale) / (1 / base)`\n\n  return round ? Math.round(result) : result;\n}\nfunction toTimescaleFromScale(value, destScale, srcScale, round) {\n  if (srcScale === void 0) {\n    srcScale = 1;\n  }\n\n  if (round === void 0) {\n    round = false;\n  }\n\n  return toTimescaleFromBase(value, destScale, 1 / srcScale, round);\n}\nfunction toMsFromMpegTsClock(value, round) {\n  if (round === void 0) {\n    round = false;\n  }\n\n  return toTimescaleFromBase(value, 1000, 1 / MPEG_TS_CLOCK_FREQ_HZ, round);\n}\nfunction toMpegTsClockFromTimescale(value, srcScale) {\n  if (srcScale === void 0) {\n    srcScale = 1;\n  }\n\n  return toTimescaleFromBase(value, MPEG_TS_CLOCK_FREQ_HZ, 1 / srcScale);\n}\n\n/***/ }),\n\n/***/ \"./src/utils/typed-array.ts\":\n/*!**********************************!*\\\n  !*** ./src/utils/typed-array.ts ***!\n  \\**********************************/\n/*! exports provided: sliceUint8 */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_996986__) {\n\n\"use strict\";\n__nested_webpack_require_996986__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_996986__.d(__webpack_exports__, \"sliceUint8\", function() { return sliceUint8; });\nfunction sliceUint8(array, start, end) {\n  // @ts-expect-error This polyfills IE11 usage of Uint8Array slice.\n  // It always exists in the TypeScript definition so fails, but it fails at runtime on IE11.\n  return Uint8Array.prototype.slice ? array.slice(start, end) : new Uint8Array(Array.prototype.slice.call(array, start, end));\n}\n\n/***/ }),\n\n/***/ \"./src/utils/vttcue.ts\":\n/*!*****************************!*\\\n  !*** ./src/utils/vttcue.ts ***!\n  \\*****************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_997750__) {\n\n\"use strict\";\n__nested_webpack_require_997750__.r(__webpack_exports__);\n/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* harmony default export */ __webpack_exports__[\"default\"] = ((function () {\n  if (typeof self !== 'undefined' && self.VTTCue) {\n    return self.VTTCue;\n  }\n\n  var AllowedDirections = ['', 'lr', 'rl'];\n  var AllowedAlignments = ['start', 'middle', 'end', 'left', 'right'];\n\n  function isAllowedValue(allowed, value) {\n    if (typeof value !== 'string') {\n      return false;\n    } // necessary for assuring the generic conforms to the Array interface\n\n\n    if (!Array.isArray(allowed)) {\n      return false;\n    } // reset the type so that the next narrowing works well\n\n\n    var lcValue = value.toLowerCase(); // use the allow list to narrow the type to a specific subset of strings\n\n    if (~allowed.indexOf(lcValue)) {\n      return lcValue;\n    }\n\n    return false;\n  }\n\n  function findDirectionSetting(value) {\n    return isAllowedValue(AllowedDirections, value);\n  }\n\n  function findAlignSetting(value) {\n    return isAllowedValue(AllowedAlignments, value);\n  }\n\n  function extend(obj) {\n    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      rest[_key - 1] = arguments[_key];\n    }\n\n    var i = 1;\n\n    for (; i < arguments.length; i++) {\n      var cobj = arguments[i];\n\n      for (var p in cobj) {\n        obj[p] = cobj[p];\n      }\n    }\n\n    return obj;\n  }\n\n  function VTTCue(startTime, endTime, text) {\n    var cue = this;\n    var baseObj = {\n      enumerable: true\n    };\n    /**\n     * Shim implementation specific properties. These properties are not in\n     * the spec.\n     */\n    // Lets us know when the VTTCue's data has changed in such a way that we need\n    // to recompute its display state. This lets us compute its display state\n    // lazily.\n\n    cue.hasBeenReset = false;\n    /**\n     * VTTCue and TextTrackCue properties\n     * http://dev.w3.org/html5/webvtt/#vttcue-interface\n     */\n\n    var _id = '';\n    var _pauseOnExit = false;\n    var _startTime = startTime;\n    var _endTime = endTime;\n    var _text = text;\n    var _region = null;\n    var _vertical = '';\n    var _snapToLines = true;\n    var _line = 'auto';\n    var _lineAlign = 'start';\n    var _position = 50;\n    var _positionAlign = 'middle';\n    var _size = 50;\n    var _align = 'middle';\n    Object.defineProperty(cue, 'id', extend({}, baseObj, {\n      get: function get() {\n        return _id;\n      },\n      set: function set(value) {\n        _id = '' + value;\n      }\n    }));\n    Object.defineProperty(cue, 'pauseOnExit', extend({}, baseObj, {\n      get: function get() {\n        return _pauseOnExit;\n      },\n      set: function set(value) {\n        _pauseOnExit = !!value;\n      }\n    }));\n    Object.defineProperty(cue, 'startTime', extend({}, baseObj, {\n      get: function get() {\n        return _startTime;\n      },\n      set: function set(value) {\n        if (typeof value !== 'number') {\n          throw new TypeError('Start time must be set to a number.');\n        }\n\n        _startTime = value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'endTime', extend({}, baseObj, {\n      get: function get() {\n        return _endTime;\n      },\n      set: function set(value) {\n        if (typeof value !== 'number') {\n          throw new TypeError('End time must be set to a number.');\n        }\n\n        _endTime = value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'text', extend({}, baseObj, {\n      get: function get() {\n        return _text;\n      },\n      set: function set(value) {\n        _text = '' + value;\n        this.hasBeenReset = true;\n      }\n    })); // todo: implement VTTRegion polyfill?\n\n    Object.defineProperty(cue, 'region', extend({}, baseObj, {\n      get: function get() {\n        return _region;\n      },\n      set: function set(value) {\n        _region = value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'vertical', extend({}, baseObj, {\n      get: function get() {\n        return _vertical;\n      },\n      set: function set(value) {\n        var setting = findDirectionSetting(value); // Have to check for false because the setting an be an empty string.\n\n        if (setting === false) {\n          throw new SyntaxError('An invalid or illegal string was specified.');\n        }\n\n        _vertical = setting;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'snapToLines', extend({}, baseObj, {\n      get: function get() {\n        return _snapToLines;\n      },\n      set: function set(value) {\n        _snapToLines = !!value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'line', extend({}, baseObj, {\n      get: function get() {\n        return _line;\n      },\n      set: function set(value) {\n        if (typeof value !== 'number' && value !== 'auto') {\n          throw new SyntaxError('An invalid number or illegal string was specified.');\n        }\n\n        _line = value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'lineAlign', extend({}, baseObj, {\n      get: function get() {\n        return _lineAlign;\n      },\n      set: function set(value) {\n        var setting = findAlignSetting(value);\n\n        if (!setting) {\n          throw new SyntaxError('An invalid or illegal string was specified.');\n        }\n\n        _lineAlign = setting;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'position', extend({}, baseObj, {\n      get: function get() {\n        return _position;\n      },\n      set: function set(value) {\n        if (value < 0 || value > 100) {\n          throw new Error('Position must be between 0 and 100.');\n        }\n\n        _position = value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'positionAlign', extend({}, baseObj, {\n      get: function get() {\n        return _positionAlign;\n      },\n      set: function set(value) {\n        var setting = findAlignSetting(value);\n\n        if (!setting) {\n          throw new SyntaxError('An invalid or illegal string was specified.');\n        }\n\n        _positionAlign = setting;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'size', extend({}, baseObj, {\n      get: function get() {\n        return _size;\n      },\n      set: function set(value) {\n        if (value < 0 || value > 100) {\n          throw new Error('Size must be between 0 and 100.');\n        }\n\n        _size = value;\n        this.hasBeenReset = true;\n      }\n    }));\n    Object.defineProperty(cue, 'align', extend({}, baseObj, {\n      get: function get() {\n        return _align;\n      },\n      set: function set(value) {\n        var setting = findAlignSetting(value);\n\n        if (!setting) {\n          throw new SyntaxError('An invalid or illegal string was specified.');\n        }\n\n        _align = setting;\n        this.hasBeenReset = true;\n      }\n    }));\n    /**\n     * Other <track> spec defined properties\n     */\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state\n\n    cue.displayState = undefined;\n  }\n  /**\n   * VTTCue methods\n   */\n\n\n  VTTCue.prototype.getCueAsHTML = function () {\n    // Assume WebVTT.convertCueToDOMTree is on the global.\n    var WebVTT = self.WebVTT;\n    return WebVTT.convertCueToDOMTree(self, this.text);\n  }; // this is a polyfill hack\n\n\n  return VTTCue;\n})());\n\n/***/ }),\n\n/***/ \"./src/utils/vttparser.ts\":\n/*!********************************!*\\\n  !*** ./src/utils/vttparser.ts ***!\n  \\********************************/\n/*! exports provided: parseTimeStamp, fixLineBreaks, VTTParser */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_1006127__) {\n\n\"use strict\";\n__nested_webpack_require_1006127__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_1006127__.d(__webpack_exports__, \"parseTimeStamp\", function() { return parseTimeStamp; });\n/* harmony export (binding) */ __nested_webpack_require_1006127__.d(__webpack_exports__, \"fixLineBreaks\", function() { return fixLineBreaks; });\n/* harmony export (binding) */ __nested_webpack_require_1006127__.d(__webpack_exports__, \"VTTParser\", function() { return VTTParser; });\n/* harmony import */ var _vttcue__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_1006127__(/*! ./vttcue */ \"./src/utils/vttcue.ts\");\n/*\n * Source: https://github.com/mozilla/vtt.js/blob/master/dist/vtt.js\n */\n\n\nvar StringDecoder = /*#__PURE__*/function () {\n  function StringDecoder() {}\n\n  var _proto = StringDecoder.prototype;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _proto.decode = function decode(data, options) {\n    if (!data) {\n      return '';\n    }\n\n    if (typeof data !== 'string') {\n      throw new Error('Error - expected string data.');\n    }\n\n    return decodeURIComponent(encodeURIComponent(data));\n  };\n\n  return StringDecoder;\n}(); // Try to parse input as a time stamp.\n\n\nfunction parseTimeStamp(input) {\n  function computeSeconds(h, m, s, f) {\n    return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + parseFloat(f || 0);\n  }\n\n  var m = input.match(/^(?:(\\d+):)?(\\d{2}):(\\d{2})(\\.\\d+)?/);\n\n  if (!m) {\n    return null;\n  }\n\n  if (parseFloat(m[2]) > 59) {\n    // Timestamp takes the form of [hours]:[minutes].[milliseconds]\n    // First position is hours as it's over 59.\n    return computeSeconds(m[2], m[3], 0, m[4]);\n  } // Timestamp takes the form of [hours (optional)]:[minutes]:[seconds].[milliseconds]\n\n\n  return computeSeconds(m[1], m[2], m[3], m[4]);\n} // A settings object holds key/value pairs and will ignore anything but the first\n// assignment to a specific key.\n\nvar Settings = /*#__PURE__*/function () {\n  function Settings() {\n    this.values = Object.create(null);\n  }\n\n  var _proto2 = Settings.prototype;\n\n  // Only accept the first assignment to any key.\n  _proto2.set = function set(k, v) {\n    if (!this.get(k) && v !== '') {\n      this.values[k] = v;\n    }\n  } // Return the value for a key, or a default value.\n  // If 'defaultKey' is passed then 'dflt' is assumed to be an object with\n  // a number of possible default values as properties where 'defaultKey' is\n  // the key of the property that will be chosen; otherwise it's assumed to be\n  // a single value.\n  ;\n\n  _proto2.get = function get(k, dflt, defaultKey) {\n    if (defaultKey) {\n      return this.has(k) ? this.values[k] : dflt[defaultKey];\n    }\n\n    return this.has(k) ? this.values[k] : dflt;\n  } // Check whether we have a value for a key.\n  ;\n\n  _proto2.has = function has(k) {\n    return k in this.values;\n  } // Accept a setting if its one of the given alternatives.\n  ;\n\n  _proto2.alt = function alt(k, v, a) {\n    for (var n = 0; n < a.length; ++n) {\n      if (v === a[n]) {\n        this.set(k, v);\n        break;\n      }\n    }\n  } // Accept a setting if its a valid (signed) integer.\n  ;\n\n  _proto2.integer = function integer(k, v) {\n    if (/^-?\\d+$/.test(v)) {\n      // integer\n      this.set(k, parseInt(v, 10));\n    }\n  } // Accept a setting if its a valid percentage.\n  ;\n\n  _proto2.percent = function percent(k, v) {\n    if (/^([\\d]{1,3})(\\.[\\d]*)?%$/.test(v)) {\n      var percent = parseFloat(v);\n\n      if (percent >= 0 && percent <= 100) {\n        this.set(k, percent);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return Settings;\n}(); // Helper function to parse input into groups separated by 'groupDelim', and\n// interpret each group as a key/value pair separated by 'keyValueDelim'.\n\n\nfunction parseOptions(input, callback, keyValueDelim, groupDelim) {\n  var groups = groupDelim ? input.split(groupDelim) : [input];\n\n  for (var i in groups) {\n    if (typeof groups[i] !== 'string') {\n      continue;\n    }\n\n    var kv = groups[i].split(keyValueDelim);\n\n    if (kv.length !== 2) {\n      continue;\n    }\n\n    var _k = kv[0];\n    var _v = kv[1];\n    callback(_k, _v);\n  }\n}\n\nvar defaults = new _vttcue__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0, ''); // 'middle' was changed to 'center' in the spec: https://github.com/w3c/webvtt/pull/244\n//  Safari doesn't yet support this change, but FF and Chrome do.\n\nvar center = defaults.align === 'middle' ? 'middle' : 'center';\n\nfunction parseCue(input, cue, regionList) {\n  // Remember the original input if we need to throw an error.\n  var oInput = input; // 4.1 WebVTT timestamp\n\n  function consumeTimeStamp() {\n    var ts = parseTimeStamp(input);\n\n    if (ts === null) {\n      throw new Error('Malformed timestamp: ' + oInput);\n    } // Remove time stamp from input.\n\n\n    input = input.replace(/^[^\\sa-zA-Z-]+/, '');\n    return ts;\n  } // 4.4.2 WebVTT cue settings\n\n\n  function consumeCueSettings(input, cue) {\n    var settings = new Settings();\n    parseOptions(input, function (k, v) {\n      var vals;\n\n      switch (k) {\n        case 'region':\n          // Find the last region we parsed with the same region id.\n          for (var i = regionList.length - 1; i >= 0; i--) {\n            if (regionList[i].id === v) {\n              settings.set(k, regionList[i].region);\n              break;\n            }\n          }\n\n          break;\n\n        case 'vertical':\n          settings.alt(k, v, ['rl', 'lr']);\n          break;\n\n        case 'line':\n          vals = v.split(',');\n          settings.integer(k, vals[0]);\n\n          if (settings.percent(k, vals[0])) {\n            settings.set('snapToLines', false);\n          }\n\n          settings.alt(k, vals[0], ['auto']);\n\n          if (vals.length === 2) {\n            settings.alt('lineAlign', vals[1], ['start', center, 'end']);\n          }\n\n          break;\n\n        case 'position':\n          vals = v.split(',');\n          settings.percent(k, vals[0]);\n\n          if (vals.length === 2) {\n            settings.alt('positionAlign', vals[1], ['start', center, 'end', 'line-left', 'line-right', 'auto']);\n          }\n\n          break;\n\n        case 'size':\n          settings.percent(k, v);\n          break;\n\n        case 'align':\n          settings.alt(k, v, ['start', center, 'end', 'left', 'right']);\n          break;\n      }\n    }, /:/, /\\s/); // Apply default values for any missing fields.\n\n    cue.region = settings.get('region', null);\n    cue.vertical = settings.get('vertical', '');\n    var line = settings.get('line', 'auto');\n\n    if (line === 'auto' && defaults.line === -1) {\n      // set numeric line number for Safari\n      line = -1;\n    }\n\n    cue.line = line;\n    cue.lineAlign = settings.get('lineAlign', 'start');\n    cue.snapToLines = settings.get('snapToLines', true);\n    cue.size = settings.get('size', 100);\n    cue.align = settings.get('align', center);\n    var position = settings.get('position', 'auto');\n\n    if (position === 'auto' && defaults.position === 50) {\n      // set numeric position for Safari\n      position = cue.align === 'start' || cue.align === 'left' ? 0 : cue.align === 'end' || cue.align === 'right' ? 100 : 50;\n    }\n\n    cue.position = position;\n  }\n\n  function skipWhitespace() {\n    input = input.replace(/^\\s+/, '');\n  } // 4.1 WebVTT cue timings.\n\n\n  skipWhitespace();\n  cue.startTime = consumeTimeStamp(); // (1) collect cue start time\n\n  skipWhitespace();\n\n  if (input.slice(0, 3) !== '-->') {\n    // (3) next characters must match '-->'\n    throw new Error(\"Malformed time stamp (time stamps must be separated by '-->'): \" + oInput);\n  }\n\n  input = input.slice(3);\n  skipWhitespace();\n  cue.endTime = consumeTimeStamp(); // (5) collect cue end time\n  // 4.1 WebVTT cue settings list.\n\n  skipWhitespace();\n  consumeCueSettings(input, cue);\n}\n\nfunction fixLineBreaks(input) {\n  return input.replace(/<br(?: \\/)?>/gi, '\\n');\n}\nvar VTTParser = /*#__PURE__*/function () {\n  function VTTParser() {\n    this.state = 'INITIAL';\n    this.buffer = '';\n    this.decoder = new StringDecoder();\n    this.regionList = [];\n    this.cue = null;\n    this.oncue = void 0;\n    this.onparsingerror = void 0;\n    this.onflush = void 0;\n  }\n\n  var _proto3 = VTTParser.prototype;\n\n  _proto3.parse = function parse(data) {\n    var _this = this; // If there is no data then we won't decode it, but will just try to parse\n    // whatever is in buffer already. This may occur in circumstances, for\n    // example when flush() is called.\n\n\n    if (data) {\n      // Try to decode the data that we received.\n      _this.buffer += _this.decoder.decode(data, {\n        stream: true\n      });\n    }\n\n    function collectNextLine() {\n      var buffer = _this.buffer;\n      var pos = 0;\n      buffer = fixLineBreaks(buffer);\n\n      while (pos < buffer.length && buffer[pos] !== '\\r' && buffer[pos] !== '\\n') {\n        ++pos;\n      }\n\n      var line = buffer.slice(0, pos); // Advance the buffer early in case we fail below.\n\n      if (buffer[pos] === '\\r') {\n        ++pos;\n      }\n\n      if (buffer[pos] === '\\n') {\n        ++pos;\n      }\n\n      _this.buffer = buffer.slice(pos);\n      return line;\n    } // 3.2 WebVTT metadata header syntax\n\n\n    function parseHeader(input) {\n      parseOptions(input, function (k, v) {// switch (k) {\n        // case 'region':\n        // 3.3 WebVTT region metadata header syntax\n        // console.log('parse region', v);\n        // parseRegion(v);\n        // break;\n        // }\n      }, /:/);\n    } // 5.1 WebVTT file parsing.\n\n\n    try {\n      var line = '';\n\n      if (_this.state === 'INITIAL') {\n        // We can't start parsing until we have the first line.\n        if (!/\\r\\n|\\n/.test(_this.buffer)) {\n          return this;\n        }\n\n        line = collectNextLine(); // strip of UTF-8 BOM if any\n        // https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8\n\n        var m = line.match(/^(ï»¿)?WEBVTT([ \\t].*)?$/);\n\n        if (!m || !m[0]) {\n          throw new Error('Malformed WebVTT signature.');\n        }\n\n        _this.state = 'HEADER';\n      }\n\n      var alreadyCollectedLine = false;\n\n      while (_this.buffer) {\n        // We can't parse a line until we have the full line.\n        if (!/\\r\\n|\\n/.test(_this.buffer)) {\n          return this;\n        }\n\n        if (!alreadyCollectedLine) {\n          line = collectNextLine();\n        } else {\n          alreadyCollectedLine = false;\n        }\n\n        switch (_this.state) {\n          case 'HEADER':\n            // 13-18 - Allow a header (metadata) under the WEBVTT line.\n            if (/:/.test(line)) {\n              parseHeader(line);\n            } else if (!line) {\n              // An empty line terminates the header and starts the body (cues).\n              _this.state = 'ID';\n            }\n\n            continue;\n\n          case 'NOTE':\n            // Ignore NOTE blocks.\n            if (!line) {\n              _this.state = 'ID';\n            }\n\n            continue;\n\n          case 'ID':\n            // Check for the start of NOTE blocks.\n            if (/^NOTE($|[ \\t])/.test(line)) {\n              _this.state = 'NOTE';\n              break;\n            } // 19-29 - Allow any number of line terminators, then initialize new cue values.\n\n\n            if (!line) {\n              continue;\n            }\n\n            _this.cue = new _vttcue__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0, '');\n            _this.state = 'CUE'; // 30-39 - Check if self line contains an optional identifier or timing data.\n\n            if (line.indexOf('-->') === -1) {\n              _this.cue.id = line;\n              continue;\n            }\n\n          // Process line as start of a cue.\n\n          /* falls through */\n\n          case 'CUE':\n            // 40 - Collect cue timings and settings.\n            if (!_this.cue) {\n              _this.state = 'BADCUE';\n              continue;\n            }\n\n            try {\n              parseCue(line, _this.cue, _this.regionList);\n            } catch (e) {\n              // In case of an error ignore rest of the cue.\n              _this.cue = null;\n              _this.state = 'BADCUE';\n              continue;\n            }\n\n            _this.state = 'CUETEXT';\n            continue;\n\n          case 'CUETEXT':\n            {\n              var hasSubstring = line.indexOf('-->') !== -1; // 34 - If we have an empty line then report the cue.\n              // 35 - If we have the special substring '-->' then report the cue,\n              // but do not collect the line as we need to process the current\n              // one as a new cue.\n\n              if (!line || hasSubstring && (alreadyCollectedLine = true)) {\n                // We are done parsing self cue.\n                if (_this.oncue && _this.cue) {\n                  _this.oncue(_this.cue);\n                }\n\n                _this.cue = null;\n                _this.state = 'ID';\n                continue;\n              }\n\n              if (_this.cue === null) {\n                continue;\n              }\n\n              if (_this.cue.text) {\n                _this.cue.text += '\\n';\n              }\n\n              _this.cue.text += line;\n            }\n            continue;\n\n          case 'BADCUE':\n            // 54-62 - Collect and discard the remaining cue.\n            if (!line) {\n              _this.state = 'ID';\n            }\n\n        }\n      }\n    } catch (e) {\n      // If we are currently parsing a cue, report what we have.\n      if (_this.state === 'CUETEXT' && _this.cue && _this.oncue) {\n        _this.oncue(_this.cue);\n      }\n\n      _this.cue = null; // Enter BADWEBVTT state if header was not parsed correctly otherwise\n      // another exception occurred so enter BADCUE state.\n\n      _this.state = _this.state === 'INITIAL' ? 'BADWEBVTT' : 'BADCUE';\n    }\n\n    return this;\n  };\n\n  _proto3.flush = function flush() {\n    var _this = this;\n\n    try {\n      // Finish decoding the stream.\n      // _this.buffer += _this.decoder.decode();\n      // Synthesize the end of the current cue or region.\n      if (_this.cue || _this.state === 'HEADER') {\n        _this.buffer += '\\n\\n';\n\n        _this.parse();\n      } // If we've flushed, parsed, and we're still on the INITIAL state then\n      // that means we don't have enough of the stream to parse the first\n      // line.\n\n\n      if (_this.state === 'INITIAL' || _this.state === 'BADWEBVTT') {\n        throw new Error('Malformed WebVTT signature.');\n      }\n    } catch (e) {\n      if (_this.onparsingerror) {\n        _this.onparsingerror(e);\n      }\n    }\n\n    if (_this.onflush) {\n      _this.onflush();\n    }\n\n    return this;\n  };\n\n  return VTTParser;\n}();\n\n/***/ }),\n\n/***/ \"./src/utils/webvtt-parser.ts\":\n/*!************************************!*\\\n  !*** ./src/utils/webvtt-parser.ts ***!\n  \\************************************/\n/*! exports provided: generateCueId, parseWebVTT */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_1020891__) {\n\n\"use strict\";\n__nested_webpack_require_1020891__.r(__webpack_exports__);\n/* harmony export (binding) */ __nested_webpack_require_1020891__.d(__webpack_exports__, \"generateCueId\", function() { return generateCueId; });\n/* harmony export (binding) */ __nested_webpack_require_1020891__.d(__webpack_exports__, \"parseWebVTT\", function() { return parseWebVTT; });\n/* harmony import */ var _Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_1020891__(/*! ./src/polyfills/number */ \"./src/polyfills/number.ts\");\n/* harmony import */ var _vttparser__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_1020891__(/*! ./vttparser */ \"./src/utils/vttparser.ts\");\n/* harmony import */ var _demux_id3__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_1020891__(/*! ../demux/id3 */ \"./src/demux/id3.ts\");\n/* harmony import */ var _timescale_conversion__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_1020891__(/*! ./timescale-conversion */ \"./src/utils/timescale-conversion.ts\");\n/* harmony import */ var _remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_1020891__(/*! ../remux/mp4-remuxer */ \"./src/remux/mp4-remuxer.ts\");\n\n\n\n\n\n\n\n\nvar LINEBREAKS = /\\r\\n|\\n\\r|\\n|\\r/g; // String.prototype.startsWith is not supported in IE11\n\nvar startsWith = function startsWith(inputString, searchString, position) {\n  if (position === void 0) {\n    position = 0;\n  }\n\n  return inputString.slice(position, position + searchString.length) === searchString;\n};\n\nvar cueString2millis = function cueString2millis(timeString) {\n  var ts = parseInt(timeString.slice(-3));\n  var secs = parseInt(timeString.slice(-6, -4));\n  var mins = parseInt(timeString.slice(-9, -7));\n  var hours = timeString.length > 9 ? parseInt(timeString.substring(0, timeString.indexOf(':'))) : 0;\n\n  if (!Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(ts) || !Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(secs) || !Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(mins) || !Object(_Users_rwalch_dev_hls_js_src_polyfills_number__WEBPACK_IMPORTED_MODULE_0__[\"isFiniteNumber\"])(hours)) {\n    throw Error(\"Malformed X-TIMESTAMP-MAP: Local:\" + timeString);\n  }\n\n  ts += 1000 * secs;\n  ts += 60 * 1000 * mins;\n  ts += 60 * 60 * 1000 * hours;\n  return ts;\n}; // From https://github.com/darkskyapp/string-hash\n\n\nvar hash = function hash(text) {\n  var hash = 5381;\n  var i = text.length;\n\n  while (i) {\n    hash = hash * 33 ^ text.charCodeAt(--i);\n  }\n\n  return (hash >>> 0).toString();\n}; // Create a unique hash id for a cue based on start/end times and text.\n// This helps timeline-controller to avoid showing repeated captions.\n\n\nfunction generateCueId(startTime, endTime, text) {\n  return hash(startTime.toString()) + hash(endTime.toString()) + hash(text);\n}\n\nvar calculateOffset = function calculateOffset(vttCCs, cc, presentationTime) {\n  var currCC = vttCCs[cc];\n  var prevCC = vttCCs[currCC.prevCC]; // This is the first discontinuity or cues have been processed since the last discontinuity\n  // Offset = current discontinuity time\n\n  if (!prevCC || !prevCC.new && currCC.new) {\n    vttCCs.ccOffset = vttCCs.presentationOffset = currCC.start;\n    currCC.new = false;\n    return;\n  } // There have been discontinuities since cues were last parsed.\n  // Offset = time elapsed\n\n\n  while ((_prevCC = prevCC) !== null && _prevCC !== void 0 && _prevCC.new) {\n    var _prevCC;\n\n    vttCCs.ccOffset += currCC.start - prevCC.start;\n    currCC.new = false;\n    currCC = prevCC;\n    prevCC = vttCCs[currCC.prevCC];\n  }\n\n  vttCCs.presentationOffset = presentationTime;\n};\n\nfunction parseWebVTT(vttByteArray, initPTS, timescale, vttCCs, cc, timeOffset, callBack, errorCallBack) {\n  var parser = new _vttparser__WEBPACK_IMPORTED_MODULE_1__[\"VTTParser\"](); // Convert byteArray into string, replacing any somewhat exotic linefeeds with \"\\n\", then split on that character.\n  // Uint8Array.prototype.reduce is not implemented in IE11\n\n  var vttLines = Object(_demux_id3__WEBPACK_IMPORTED_MODULE_2__[\"utf8ArrayToStr\"])(new Uint8Array(vttByteArray)).trim().replace(LINEBREAKS, '\\n').split('\\n');\n  var cues = [];\n  var initPTS90Hz = Object(_timescale_conversion__WEBPACK_IMPORTED_MODULE_3__[\"toMpegTsClockFromTimescale\"])(initPTS, timescale);\n  var cueTime = '00:00.000';\n  var timestampMapMPEGTS = 0;\n  var timestampMapLOCAL = 0;\n  var parsingError;\n  var inHeader = true;\n\n  parser.oncue = function (cue) {\n    // Adjust cue timing; clamp cues to start no earlier than - and drop cues that don't end after - 0 on timeline.\n    var currCC = vttCCs[cc];\n    var cueOffset = vttCCs.ccOffset; // Calculate subtitle PTS offset\n\n    var webVttMpegTsMapOffset = (timestampMapMPEGTS - initPTS90Hz) / 90000; // Update offsets for new discontinuities\n\n    if (currCC !== null && currCC !== void 0 && currCC.new) {\n      if (timestampMapLOCAL !== undefined) {\n        // When local time is provided, offset = discontinuity start time - local time\n        cueOffset = vttCCs.ccOffset = currCC.start;\n      } else {\n        calculateOffset(vttCCs, cc, webVttMpegTsMapOffset);\n      }\n    }\n\n    if (webVttMpegTsMapOffset) {\n      // If we have MPEGTS, offset = presentation time + discontinuity offset\n      cueOffset = webVttMpegTsMapOffset - vttCCs.presentationOffset;\n    }\n\n    var duration = cue.endTime - cue.startTime;\n    var startTime = Object(_remux_mp4_remuxer__WEBPACK_IMPORTED_MODULE_4__[\"normalizePts\"])((cue.startTime + cueOffset - timestampMapLOCAL) * 90000, timeOffset * 90000) / 90000;\n    cue.startTime = Math.max(startTime, 0);\n    cue.endTime = Math.max(startTime + duration, 0); //trim trailing webvtt block whitespaces\n\n    var text = cue.text.trim(); // Fix encoding of special characters\n\n    cue.text = decodeURIComponent(encodeURIComponent(text)); // If the cue was not assigned an id from the VTT file (line above the content), create one.\n\n    if (!cue.id) {\n      cue.id = generateCueId(cue.startTime, cue.endTime, text);\n    }\n\n    if (cue.endTime > 0) {\n      cues.push(cue);\n    }\n  };\n\n  parser.onparsingerror = function (error) {\n    parsingError = error;\n  };\n\n  parser.onflush = function () {\n    if (parsingError) {\n      errorCallBack(parsingError);\n      return;\n    }\n\n    callBack(cues);\n  }; // Go through contents line by line.\n\n\n  vttLines.forEach(function (line) {\n    if (inHeader) {\n      // Look for X-TIMESTAMP-MAP in header.\n      if (startsWith(line, 'X-TIMESTAMP-MAP=')) {\n        // Once found, no more are allowed anyway, so stop searching.\n        inHeader = false; // Extract LOCAL and MPEGTS.\n\n        line.slice(16).split(',').forEach(function (timestamp) {\n          if (startsWith(timestamp, 'LOCAL:')) {\n            cueTime = timestamp.slice(6);\n          } else if (startsWith(timestamp, 'MPEGTS:')) {\n            timestampMapMPEGTS = parseInt(timestamp.slice(7));\n          }\n        });\n\n        try {\n          // Convert cue time to seconds\n          timestampMapLOCAL = cueString2millis(cueTime) / 1000;\n        } catch (error) {\n          parsingError = error;\n        } // Return without parsing X-TIMESTAMP-MAP line.\n\n\n        return;\n      } else if (line === '') {\n        inHeader = false;\n      }\n    } // Parse line by default.\n\n\n    parser.parse(line + '\\n');\n  });\n  parser.flush();\n}\n\n/***/ }),\n\n/***/ \"./src/utils/xhr-loader.ts\":\n/*!*********************************!*\\\n  !*** ./src/utils/xhr-loader.ts ***!\n  \\*********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_1028465__) {\n\n\"use strict\";\n__nested_webpack_require_1028465__.r(__webpack_exports__);\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_1028465__(/*! ../utils/logger */ \"./src/utils/logger.ts\");\n/* harmony import */ var _loader_load_stats__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_1028465__(/*! ../loader/load-stats */ \"./src/loader/load-stats.ts\");\n\n\nvar AGE_HEADER_LINE_REGEX = /^age:\\s*[\\d.]+\\s*$/m;\n\nvar XhrLoader = /*#__PURE__*/function () {\n  function XhrLoader(config\n  /* HlsConfig */\n  ) {\n    this.xhrSetup = void 0;\n    this.requestTimeout = void 0;\n    this.retryTimeout = void 0;\n    this.retryDelay = void 0;\n    this.config = null;\n    this.callbacks = null;\n    this.context = void 0;\n    this.loader = null;\n    this.stats = void 0;\n    this.xhrSetup = config ? config.xhrSetup : null;\n    this.stats = new _loader_load_stats__WEBPACK_IMPORTED_MODULE_1__[\"LoadStats\"]();\n    this.retryDelay = 0;\n  }\n\n  var _proto = XhrLoader.prototype;\n\n  _proto.destroy = function destroy() {\n    this.callbacks = null;\n    this.abortInternal();\n    this.loader = null;\n    this.config = null;\n  };\n\n  _proto.abortInternal = function abortInternal() {\n    var loader = this.loader;\n    self.clearTimeout(this.requestTimeout);\n    self.clearTimeout(this.retryTimeout);\n\n    if (loader) {\n      loader.onreadystatechange = null;\n      loader.onprogress = null;\n\n      if (loader.readyState !== 4) {\n        this.stats.aborted = true;\n        loader.abort();\n      }\n    }\n  };\n\n  _proto.abort = function abort() {\n    var _this$callbacks;\n\n    this.abortInternal();\n\n    if ((_this$callbacks = this.callbacks) !== null && _this$callbacks !== void 0 && _this$callbacks.onAbort) {\n      this.callbacks.onAbort(this.stats, this.context, this.loader);\n    }\n  };\n\n  _proto.load = function load(context, config, callbacks) {\n    if (this.stats.loading.start) {\n      throw new Error('Loader can only be used once.');\n    }\n\n    this.stats.loading.start = self.performance.now();\n    this.context = context;\n    this.config = config;\n    this.callbacks = callbacks;\n    this.retryDelay = config.retryDelay;\n    this.loadInternal();\n  };\n\n  _proto.loadInternal = function loadInternal() {\n    var config = this.config,\n        context = this.context;\n\n    if (!config) {\n      return;\n    }\n\n    var xhr = this.loader = new self.XMLHttpRequest();\n    var stats = this.stats;\n    stats.loading.first = 0;\n    stats.loaded = 0;\n    var xhrSetup = this.xhrSetup;\n\n    try {\n      if (xhrSetup) {\n        try {\n          xhrSetup(xhr, context.url);\n        } catch (e) {\n          // fix xhrSetup: (xhr, url) => {xhr.setRequestHeader(\"Content-Language\", \"test\");}\n          // not working, as xhr.setRequestHeader expects xhr.readyState === OPEN\n          xhr.open('GET', context.url, true);\n          xhrSetup(xhr, context.url);\n        }\n      }\n\n      if (!xhr.readyState) {\n        xhr.open('GET', context.url, true);\n      }\n\n      var headers = this.context.headers;\n\n      if (headers) {\n        for (var header in headers) {\n          xhr.setRequestHeader(header, headers[header]);\n        }\n      }\n    } catch (e) {\n      // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS\n      this.callbacks.onError({\n        code: xhr.status,\n        text: e.message\n      }, context, xhr);\n      return;\n    }\n\n    if (context.rangeEnd) {\n      xhr.setRequestHeader('Range', 'bytes=' + context.rangeStart + '-' + (context.rangeEnd - 1));\n    }\n\n    xhr.onreadystatechange = this.readystatechange.bind(this);\n    xhr.onprogress = this.loadprogress.bind(this);\n    xhr.responseType = context.responseType; // setup timeout before we perform request\n\n    self.clearTimeout(this.requestTimeout);\n    this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), config.timeout);\n    xhr.send();\n  };\n\n  _proto.readystatechange = function readystatechange() {\n    var context = this.context,\n        xhr = this.loader,\n        stats = this.stats;\n\n    if (!context || !xhr) {\n      return;\n    }\n\n    var readyState = xhr.readyState;\n    var config = this.config; // don't proceed if xhr has been aborted\n\n    if (stats.aborted) {\n      return;\n    } // >= HEADERS_RECEIVED\n\n\n    if (readyState >= 2) {\n      // clear xhr timeout and rearm it if readyState less than 4\n      self.clearTimeout(this.requestTimeout);\n\n      if (stats.loading.first === 0) {\n        stats.loading.first = Math.max(self.performance.now(), stats.loading.start);\n      }\n\n      if (readyState === 4) {\n        xhr.onreadystatechange = null;\n        xhr.onprogress = null;\n        var status = xhr.status; // http status between 200 to 299 are all successful\n\n        if (status >= 200 && status < 300) {\n          stats.loading.end = Math.max(self.performance.now(), stats.loading.first);\n          var data;\n          var len;\n\n          if (context.responseType === 'arraybuffer') {\n            data = xhr.response;\n            len = data.byteLength;\n          } else {\n            data = xhr.responseText;\n            len = data.length;\n          }\n\n          stats.loaded = stats.total = len;\n\n          if (!this.callbacks) {\n            return;\n          }\n\n          var onProgress = this.callbacks.onProgress;\n\n          if (onProgress) {\n            onProgress(stats, context, data, xhr);\n          }\n\n          if (!this.callbacks) {\n            return;\n          }\n\n          var response = {\n            url: xhr.responseURL,\n            data: data\n          };\n          this.callbacks.onSuccess(response, stats, context, xhr);\n        } else {\n          // if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error\n          if (stats.retry >= config.maxRetry || status >= 400 && status < 499) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].error(status + \" while loading \" + context.url);\n            this.callbacks.onError({\n              code: status,\n              text: xhr.statusText\n            }, context, xhr);\n          } else {\n            // retry\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].warn(status + \" while loading \" + context.url + \", retrying in \" + this.retryDelay + \"...\"); // abort and reset internal state\n\n            this.abortInternal();\n            this.loader = null; // schedule retry\n\n            self.clearTimeout(this.retryTimeout);\n            this.retryTimeout = self.setTimeout(this.loadInternal.bind(this), this.retryDelay); // set exponential backoff\n\n            this.retryDelay = Math.min(2 * this.retryDelay, config.maxRetryDelay);\n            stats.retry++;\n          }\n        }\n      } else {\n        // readyState >= 2 AND readyState !==4 (readyState = HEADERS_RECEIVED || LOADING) rearm timeout as xhr not finished yet\n        self.clearTimeout(this.requestTimeout);\n        this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), config.timeout);\n      }\n    }\n  };\n\n  _proto.loadtimeout = function loadtimeout() {\n    _utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"logger\"].warn(\"timeout while loading \" + this.context.url);\n    var callbacks = this.callbacks;\n\n    if (callbacks) {\n      this.abortInternal();\n      callbacks.onTimeout(this.stats, this.context, this.loader);\n    }\n  };\n\n  _proto.loadprogress = function loadprogress(event) {\n    var stats = this.stats;\n    stats.loaded = event.loaded;\n\n    if (event.lengthComputable) {\n      stats.total = event.total;\n    }\n  };\n\n  _proto.getCacheAge = function getCacheAge() {\n    var result = null;\n\n    if (this.loader && AGE_HEADER_LINE_REGEX.test(this.loader.getAllResponseHeaders())) {\n      var ageHeader = this.loader.getResponseHeader('age');\n      result = ageHeader ? parseFloat(ageHeader) : null;\n    }\n\n    return result;\n  };\n\n  return XhrLoader;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (XhrLoader);\n\n/***/ })\n\n/******/ })[\"default\"];\n});\n//# sourceMappingURL=hls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hls.js/dist/hls.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.6.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2022-08-26T17:52Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket trac-14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n\t\t// Support: Chrome <=57, Firefox <=52\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n\t\t// We don't want to classify *any* DOM node as a function.\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\n\t\t\ttypeof obj.item !== \"function\";\n\t};\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.6.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n\tfunction( _i, name ) {\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n\t} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.6\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2021-02-16\n */\n( function( window ) {\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ( {} ).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpushNative = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[ i ] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" +\n\t\t\"ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5]\n\t\t// or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" +\n\t\twhitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace +\n\t\t\"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\treturn nonHex ?\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\tnonHex :\n\n\t\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t\t// Support: IE <=11+\n\t\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t\t// surrogate pair\n\t\t\thigh < 0 ?\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" +\n\t\t\t\tch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( ( target[ j++ ] = els[ i++ ] ) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t( nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\" ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\tif ( newContext !== context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split( \"|\" ),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[ i ] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( ( cur = cur.nextSibling ) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn ( name === \"input\" || name === \"button\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem && elem.namespaceURI,\n\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( preferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n\t// Safari 4 - 5 only, Opera <=11.6 - 12.x only\n\t// IE/Edge & older browsers don't support the :scope pseudo-class.\n\t// Support: Safari 6.0 only\n\t// Safari 6.0 supports :scope but it's an alias of :root there.\n\tsupport.scope = assert( function( el ) {\n\t\tdocElem.appendChild( el ).appendChild( document.createElement( \"div\" ) );\n\t\treturn typeof el.querySelectorAll !== \"undefined\" &&\n\t\t\t!el.querySelectorAll( \":scope fieldset div\" ).length;\n\t} );\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert( function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute( \"className\" );\n\t} );\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert( function( el ) {\n\t\tel.appendChild( document.createComment( \"\" ) );\n\t\treturn !el.getElementsByTagName( \"*\" ).length;\n\t} );\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[ \"ID\" ] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[ \"ID\" ] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[ \"TAG\" ] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[ \"CLASS\" ] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {\n\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert( function( el ) {\n\n\t\t\tvar input;\n\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll( \"[msallowcapture^='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"~=\" );\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t\t// Adding a temporary attribute to the document before the selection works\n\t\t\t// around the issue.\n\t\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\t\tinput = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"name\", \"\" );\n\t\t\tel.appendChild( input );\n\t\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\t\trbuggyQSA.push( \":checked\" );\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t\t}\n\n\t\t\t// Support: Firefox <=3.6 - 5 only\n\t\t\t// Old Firefox doesn't throw on a badly-escaped identifier.\n\t\t\tel.querySelectorAll( \"\\\\\\f\" );\n\t\t\trbuggyQSA.push( \"[\\\\r\\\\n\\\\f]\" );\n\t\t} );\n\n\t\tassert( function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll( \"[name=d]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll( \":enabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: Opera 10 - 11 only\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll( \"*,:x\" );\n\t\t\trbuggyQSA.push( \",.*:\" );\n\t\t} );\n\t}\n\n\tif ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector ) ) ) ) {\n\n\t\tassert( function( el ) {\n\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t} );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( \"|\" ) );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t) );\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( ( b = b.parentNode ) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a == document || a.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b == document || b.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\treturn a == document ? -1 :\n\t\t\t\tb == document ? 1 :\n\t\t\t\t/* eslint-enable eqeqeq */\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[ i ] === bp[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[ i ], bp[ i ] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\tap[ i ] == preferredDoc ? -1 :\n\t\t\tbp[ i ] == preferredDoc ? 1 :\n\t\t\t/* eslint-enable eqeqeq */\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t// fragment in IE 9\n\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] ||\n\t\t\t\tmatch[ 5 ] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" ) );\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr[ \"CHILD\" ].test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace +\n\t\t\t\t\t\")\" + className + \"(\" + whitespace + \"|$)\" ) ) && classCache(\n\t\t\t\t\t\tclassName, function( elem ) {\n\t\t\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\t/* eslint-disable max-len */\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t\t/* eslint-enable max-len */\n\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\t\"has\": markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\t\"contains\": markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement &&\n\t\t\t\t( !document.hasFocus || document.hasFocus() ) &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn ( nodeName === \"input\" && !!elem.checked ) ||\n\t\t\t\t( nodeName === \"option\" && !!elem.selected );\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[ \"empty\" ]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\t\"last\": createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\t\"eq\": createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\t\"even\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"odd\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"lt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"gt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos[ \"nth\" ] = Expr.pseudos[ \"eq\" ];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rcombinators.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrim, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] ||\n\t\t\t\t\t\t\t( outerCache[ elem.uniqueID ] = {} );\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = uniqueCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts(\n\t\t\t\tselector || \"*\",\n\t\t\t\tcontext.nodeType ? [ context ] : context,\n\t\t\t\t[]\n\t\t\t),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\ttokens\n\t\t\t\t\t\t.slice( 0, i - 1 )\n\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[ \"TAG\" ]( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache(\n\t\t\tselector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers )\n\t\t);\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find[ \"ID\" ]( token.matches[ 0 ]\n\t\t\t\t.replace( runescape, funescape ), context ) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[ \"needsContext\" ].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert( function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute( \"href\" ) === \"#\";\n} ) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert( function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n} ) ) {\n\taddHandle( \"value\", function( elem, _name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert( function( el ) {\n\treturn el.getAttribute( \"disabled\" ) == null;\n} ) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\t\tnull;\n\t\t}\n\t} );\n}\n\nreturn Sizzle;\n\n} )( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)\n\t// Strict HTML recognition (trac-11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the primary Deferred\n\t\t\tprimary = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( primary.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn primary.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\n\t\t}\n\n\t\treturn primary.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See trac-6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\t\tvalue :\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (trac-9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see trac-8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (trac-14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (trac-11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (trac-14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (trac-13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (trac-12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (trac-13208)\n\t\t\t\t// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (trac-13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t// Support: Chrome 86+\n\t\t\t\t\t\t// In Chrome, if an element having a focusout handler is blurred by\n\t\t\t\t\t\t// clicking outside of it, it invokes the handler synchronously. If\n\t\t\t\t\t\t// that handler calls `.remove()` on the element, the data is cleared,\n\t\t\t\t\t\t// leaving `result` undefined. We need to guard against this.\n\t\t\t\t\t\treturn result && result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (trac-504, trac-13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\twhich: true\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\t// Suppress native focus or blur if we're currently inside\n\t\t// a leveraged native-event stack\n\t\t_default: function( event ) {\n\t\t\treturn dataPriv.get( event.target, type );\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\n\trcleanScript = /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (trac-8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Unwrap a CDATA section containing script contents. This shouldn't be\n\t\t\t\t\t\t\t// needed as in XML documents they're already not visible when\n\t\t\t\t\t\t\t// inspecting element contents and in HTML documents they have no\n\t\t\t\t\t\t\t// meaning but we're preserving that logic for backwards compatibility.\n\t\t\t\t\t\t\t// This will be removed completely in 4.0. See gh-4904.\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar rcustomProp = /^--/;\n\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\nvar whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n\n\nvar rtrimCSS = new RegExp(\n\t\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\",\n\t\"g\"\n);\n\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (trac-8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\t//\n\t\t// Support: Firefox 70+\n\t\t// Only Firefox includes border widths\n\t\t// in computed dimensions. (gh-4529)\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n\t\t\t\ttr.style.cssText = \"border:1px solid\";\n\n\t\t\t\t// Support: Chrome 86+\n\t\t\t\t// Height set through cssText does not get applied.\n\t\t\t\t// Computed height then comes back as 0.\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\t// Support: Android 8 Chrome 86+\n\t\t\t\t// In our bodyBackground.html iframe,\n\t\t\t\t// display for all div elements is set to \"inline\",\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\n\t\t\t\t// Ensuring the div is display: block\n\t\t\t\t// gets around this issue.\n\t\t\t\ttrChild.style.display = \"block\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tisCustomProp = rcustomProp.test( name ),\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, trac-12537)\n\t//   .css('--customProperty) (gh-3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\t// trim whitespace for custom property (issue gh-4926)\n\t\tif ( isCustomProp ) {\n\n\t\t\t// rtrim treats U+000D CARRIAGE RETURN and U+000C FORM FEED\n\t\t\t// as whitespace while CSS does not, but this is not a problem\n\t\t\t// because CSS preprocessing replaces them with U+000A LINE FEED\n\t\t\t// (which *is* CSS whitespace)\n\t\t\t// https://www.w3.org/TR/css-syntax-3/#input-preprocessing\n\t\t\tret = ret.replace( rtrimCSS, \"$1\" );\n\t\t}\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (trac-7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug trac-9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (trac-7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t} ) :\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\n\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// Use proper attribute retrieval (trac-12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + className + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += className + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + className + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + className + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar classNames, className, i, self,\n\t\t\ttype = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\treturn this.each( function() {\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\tself = jQuery( this );\n\n\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (trac-14686, trac-14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (trac-2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (trac-9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (trac-6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\n\t\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, parserErrorElem;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {}\n\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\n\tif ( !xml || parserErrorElem ) {\n\t\tjQuery.error( \"Invalid XML: \" + (\n\t\t\tparserErrorElem ?\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\n\t\t\t\t\treturn el.textContent;\n\t\t\t\t} ).join( \"\\n\" ) :\n\t\t\t\tdata\n\t\t) );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} ).filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} ).map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// trac-7653, trac-8125, trac-8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\noriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes trac-9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (trac-10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket trac-12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// trac-9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script but not if jsonp\n\t\t\tif ( !isSuccess &&\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (trac-11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// trac-1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see trac-8605, trac-14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// trac-14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( {\n\t\tpadding: \"inner\" + name,\n\t\tcontent: type,\n\t\t\"\": \"outer\" + name\n\t}, function( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\njQuery.each(\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t}\n);\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\n// Require that the \"whitespace run\" starts from a non-whitespace\n// to avoid O(N^2) behavior when the engine would try matching \"\\s+$\" at each space position.\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"$1\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (trac-13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./node_modules/toastr/build/toastr.min.js":
/*!*************************************************!*\
  !*** ./node_modules/toastr/build/toastr.min.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(e){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(e){return function(){function t(e,t,n){return g({type:O.error,iconClass:m().iconClasses.error,message:e,optionsOverride:n,title:t})}function n(t,n){return t||(t=m()),v=e(\"#\"+t.containerId),v.length?v:(n&&(v=d(t)),v)}function o(e,t,n){return g({type:O.info,iconClass:m().iconClasses.info,message:e,optionsOverride:n,title:t})}function s(e){C=e}function i(e,t,n){return g({type:O.success,iconClass:m().iconClasses.success,message:e,optionsOverride:n,title:t})}function a(e,t,n){return g({type:O.warning,iconClass:m().iconClasses.warning,message:e,optionsOverride:n,title:t})}function r(e,t){var o=m();v||n(o),u(e,o,t)||l(o)}function c(t){var o=m();return v||n(o),t&&0===e(\":focus\",t).length?void h(t):void(v.children().length&&v.remove())}function l(t){for(var n=v.children(),o=n.length-1;o>=0;o--)u(e(n[o]),t)}function u(t,n,o){var s=!(!o||!o.force)&&o.force;return!(!t||!s&&0!==e(\":focus\",t).length)&&(t[n.hideMethod]({duration:n.hideDuration,easing:n.hideEasing,complete:function(){h(t)}}),!0)}function d(t){return v=e(\"<div/>\").attr(\"id\",t.containerId).addClass(t.positionClass),v.appendTo(e(t.target)),v}function p(){return{tapToDismiss:!0,toastClass:\"toast\",containerId:\"toast-container\",debug:!1,showMethod:\"fadeIn\",showDuration:300,showEasing:\"swing\",onShown:void 0,hideMethod:\"fadeOut\",hideDuration:1e3,hideEasing:\"swing\",onHidden:void 0,closeMethod:!1,closeDuration:!1,closeEasing:!1,closeOnHover:!0,extendedTimeOut:1e3,iconClasses:{error:\"toast-error\",info:\"toast-info\",success:\"toast-success\",warning:\"toast-warning\"},iconClass:\"toast-info\",positionClass:\"toast-top-right\",timeOut:5e3,titleClass:\"toast-title\",messageClass:\"toast-message\",escapeHtml:!1,target:\"body\",closeHtml:'<button type=\"button\">&times;</button>',closeClass:\"toast-close-button\",newestOnTop:!0,preventDuplicates:!1,progressBar:!1,progressClass:\"toast-progress\",rtl:!1}}function f(e){C&&C(e)}function g(t){function o(e){return null==e&&(e=\"\"),e.replace(/&/g,\"&amp;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#39;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\")}function s(){c(),u(),d(),p(),g(),C(),l(),i()}function i(){var e=\"\";switch(t.iconClass){case\"toast-success\":case\"toast-info\":e=\"polite\";break;default:e=\"assertive\"}I.attr(\"aria-live\",e)}function a(){E.closeOnHover&&I.hover(H,D),!E.onclick&&E.tapToDismiss&&I.click(b),E.closeButton&&j&&j.click(function(e){e.stopPropagation?e.stopPropagation():void 0!==e.cancelBubble&&e.cancelBubble!==!0&&(e.cancelBubble=!0),E.onCloseClick&&E.onCloseClick(e),b(!0)}),E.onclick&&I.click(function(e){E.onclick(e),b()})}function r(){I.hide(),I[E.showMethod]({duration:E.showDuration,easing:E.showEasing,complete:E.onShown}),E.timeOut>0&&(k=setTimeout(b,E.timeOut),F.maxHideTime=parseFloat(E.timeOut),F.hideEta=(new Date).getTime()+F.maxHideTime,E.progressBar&&(F.intervalId=setInterval(x,10)))}function c(){t.iconClass&&I.addClass(E.toastClass).addClass(y)}function l(){E.newestOnTop?v.prepend(I):v.append(I)}function u(){if(t.title){var e=t.title;E.escapeHtml&&(e=o(t.title)),M.append(e).addClass(E.titleClass),I.append(M)}}function d(){if(t.message){var e=t.message;E.escapeHtml&&(e=o(t.message)),B.append(e).addClass(E.messageClass),I.append(B)}}function p(){E.closeButton&&(j.addClass(E.closeClass).attr(\"role\",\"button\"),I.prepend(j))}function g(){E.progressBar&&(q.addClass(E.progressClass),I.prepend(q))}function C(){E.rtl&&I.addClass(\"rtl\")}function O(e,t){if(e.preventDuplicates){if(t.message===w)return!0;w=t.message}return!1}function b(t){var n=t&&E.closeMethod!==!1?E.closeMethod:E.hideMethod,o=t&&E.closeDuration!==!1?E.closeDuration:E.hideDuration,s=t&&E.closeEasing!==!1?E.closeEasing:E.hideEasing;if(!e(\":focus\",I).length||t)return clearTimeout(F.intervalId),I[n]({duration:o,easing:s,complete:function(){h(I),clearTimeout(k),E.onHidden&&\"hidden\"!==P.state&&E.onHidden(),P.state=\"hidden\",P.endTime=new Date,f(P)}})}function D(){(E.timeOut>0||E.extendedTimeOut>0)&&(k=setTimeout(b,E.extendedTimeOut),F.maxHideTime=parseFloat(E.extendedTimeOut),F.hideEta=(new Date).getTime()+F.maxHideTime)}function H(){clearTimeout(k),F.hideEta=0,I.stop(!0,!0)[E.showMethod]({duration:E.showDuration,easing:E.showEasing})}function x(){var e=(F.hideEta-(new Date).getTime())/F.maxHideTime*100;q.width(e+\"%\")}var E=m(),y=t.iconClass||E.iconClass;if(\"undefined\"!=typeof t.optionsOverride&&(E=e.extend(E,t.optionsOverride),y=t.optionsOverride.iconClass||y),!O(E,t)){T++,v=n(E,!0);var k=null,I=e(\"<div/>\"),M=e(\"<div/>\"),B=e(\"<div/>\"),q=e(\"<div/>\"),j=e(E.closeHtml),F={intervalId:null,hideEta:null,maxHideTime:null},P={toastId:T,state:\"visible\",startTime:new Date,options:E,map:t};return s(),r(),a(),f(P),E.debug&&console&&console.log(P),I}}function m(){return e.extend({},p(),b.options)}function h(e){v||(v=n()),e.is(\":visible\")||(e.remove(),e=null,0===v.children().length&&(v.remove(),w=void 0))}var v,C,w,T=0,O={error:\"error\",info:\"info\",success:\"success\",warning:\"warning\"},b={clear:r,remove:c,error:t,getContainer:n,info:o,options:{},subscribe:s,success:i,version:\"2.1.4\",warning:a};return b}()}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))}(__webpack_require__.amdD);\n//# sourceMappingURL=toastr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdG9hc3RyL2J1aWxkL3RvYXN0ci5taW4uanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvYXN0ci9idWlsZC90b2FzdHIubWluLmpzPzIyZGUiXSwic291cmNlc0NvbnRlbnQiOlsiIWZ1bmN0aW9uKGUpe2UoW1wianF1ZXJ5XCJdLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSx0LG4pe3JldHVybiBnKHt0eXBlOk8uZXJyb3IsaWNvbkNsYXNzOm0oKS5pY29uQ2xhc3Nlcy5lcnJvcixtZXNzYWdlOmUsb3B0aW9uc092ZXJyaWRlOm4sdGl0bGU6dH0pfWZ1bmN0aW9uIG4odCxuKXtyZXR1cm4gdHx8KHQ9bSgpKSx2PWUoXCIjXCIrdC5jb250YWluZXJJZCksdi5sZW5ndGg/djoobiYmKHY9ZCh0KSksdil9ZnVuY3Rpb24gbyhlLHQsbil7cmV0dXJuIGcoe3R5cGU6Ty5pbmZvLGljb25DbGFzczptKCkuaWNvbkNsYXNzZXMuaW5mbyxtZXNzYWdlOmUsb3B0aW9uc092ZXJyaWRlOm4sdGl0bGU6dH0pfWZ1bmN0aW9uIHMoZSl7Qz1lfWZ1bmN0aW9uIGkoZSx0LG4pe3JldHVybiBnKHt0eXBlOk8uc3VjY2VzcyxpY29uQ2xhc3M6bSgpLmljb25DbGFzc2VzLnN1Y2Nlc3MsbWVzc2FnZTplLG9wdGlvbnNPdmVycmlkZTpuLHRpdGxlOnR9KX1mdW5jdGlvbiBhKGUsdCxuKXtyZXR1cm4gZyh7dHlwZTpPLndhcm5pbmcsaWNvbkNsYXNzOm0oKS5pY29uQ2xhc3Nlcy53YXJuaW5nLG1lc3NhZ2U6ZSxvcHRpb25zT3ZlcnJpZGU6bix0aXRsZTp0fSl9ZnVuY3Rpb24gcihlLHQpe3ZhciBvPW0oKTt2fHxuKG8pLHUoZSxvLHQpfHxsKG8pfWZ1bmN0aW9uIGModCl7dmFyIG89bSgpO3JldHVybiB2fHxuKG8pLHQmJjA9PT1lKFwiOmZvY3VzXCIsdCkubGVuZ3RoP3ZvaWQgaCh0KTp2b2lkKHYuY2hpbGRyZW4oKS5sZW5ndGgmJnYucmVtb3ZlKCkpfWZ1bmN0aW9uIGwodCl7Zm9yKHZhciBuPXYuY2hpbGRyZW4oKSxvPW4ubGVuZ3RoLTE7bz49MDtvLS0pdShlKG5bb10pLHQpfWZ1bmN0aW9uIHUodCxuLG8pe3ZhciBzPSEoIW98fCFvLmZvcmNlKSYmby5mb3JjZTtyZXR1cm4hKCF0fHwhcyYmMCE9PWUoXCI6Zm9jdXNcIix0KS5sZW5ndGgpJiYodFtuLmhpZGVNZXRob2RdKHtkdXJhdGlvbjpuLmhpZGVEdXJhdGlvbixlYXNpbmc6bi5oaWRlRWFzaW5nLGNvbXBsZXRlOmZ1bmN0aW9uKCl7aCh0KX19KSwhMCl9ZnVuY3Rpb24gZCh0KXtyZXR1cm4gdj1lKFwiPGRpdi8+XCIpLmF0dHIoXCJpZFwiLHQuY29udGFpbmVySWQpLmFkZENsYXNzKHQucG9zaXRpb25DbGFzcyksdi5hcHBlbmRUbyhlKHQudGFyZ2V0KSksdn1mdW5jdGlvbiBwKCl7cmV0dXJue3RhcFRvRGlzbWlzczohMCx0b2FzdENsYXNzOlwidG9hc3RcIixjb250YWluZXJJZDpcInRvYXN0LWNvbnRhaW5lclwiLGRlYnVnOiExLHNob3dNZXRob2Q6XCJmYWRlSW5cIixzaG93RHVyYXRpb246MzAwLHNob3dFYXNpbmc6XCJzd2luZ1wiLG9uU2hvd246dm9pZCAwLGhpZGVNZXRob2Q6XCJmYWRlT3V0XCIsaGlkZUR1cmF0aW9uOjFlMyxoaWRlRWFzaW5nOlwic3dpbmdcIixvbkhpZGRlbjp2b2lkIDAsY2xvc2VNZXRob2Q6ITEsY2xvc2VEdXJhdGlvbjohMSxjbG9zZUVhc2luZzohMSxjbG9zZU9uSG92ZXI6ITAsZXh0ZW5kZWRUaW1lT3V0OjFlMyxpY29uQ2xhc3Nlczp7ZXJyb3I6XCJ0b2FzdC1lcnJvclwiLGluZm86XCJ0b2FzdC1pbmZvXCIsc3VjY2VzczpcInRvYXN0LXN1Y2Nlc3NcIix3YXJuaW5nOlwidG9hc3Qtd2FybmluZ1wifSxpY29uQ2xhc3M6XCJ0b2FzdC1pbmZvXCIscG9zaXRpb25DbGFzczpcInRvYXN0LXRvcC1yaWdodFwiLHRpbWVPdXQ6NWUzLHRpdGxlQ2xhc3M6XCJ0b2FzdC10aXRsZVwiLG1lc3NhZ2VDbGFzczpcInRvYXN0LW1lc3NhZ2VcIixlc2NhcGVIdG1sOiExLHRhcmdldDpcImJvZHlcIixjbG9zZUh0bWw6JzxidXR0b24gdHlwZT1cImJ1dHRvblwiPiZ0aW1lczs8L2J1dHRvbj4nLGNsb3NlQ2xhc3M6XCJ0b2FzdC1jbG9zZS1idXR0b25cIixuZXdlc3RPblRvcDohMCxwcmV2ZW50RHVwbGljYXRlczohMSxwcm9ncmVzc0JhcjohMSxwcm9ncmVzc0NsYXNzOlwidG9hc3QtcHJvZ3Jlc3NcIixydGw6ITF9fWZ1bmN0aW9uIGYoZSl7QyYmQyhlKX1mdW5jdGlvbiBnKHQpe2Z1bmN0aW9uIG8oZSl7cmV0dXJuIG51bGw9PWUmJihlPVwiXCIpLGUucmVwbGFjZSgvJi9nLFwiJmFtcDtcIikucmVwbGFjZSgvXCIvZyxcIiZxdW90O1wiKS5yZXBsYWNlKC8nL2csXCImIzM5O1wiKS5yZXBsYWNlKC88L2csXCImbHQ7XCIpLnJlcGxhY2UoLz4vZyxcIiZndDtcIil9ZnVuY3Rpb24gcygpe2MoKSx1KCksZCgpLHAoKSxnKCksQygpLGwoKSxpKCl9ZnVuY3Rpb24gaSgpe3ZhciBlPVwiXCI7c3dpdGNoKHQuaWNvbkNsYXNzKXtjYXNlXCJ0b2FzdC1zdWNjZXNzXCI6Y2FzZVwidG9hc3QtaW5mb1wiOmU9XCJwb2xpdGVcIjticmVhaztkZWZhdWx0OmU9XCJhc3NlcnRpdmVcIn1JLmF0dHIoXCJhcmlhLWxpdmVcIixlKX1mdW5jdGlvbiBhKCl7RS5jbG9zZU9uSG92ZXImJkkuaG92ZXIoSCxEKSwhRS5vbmNsaWNrJiZFLnRhcFRvRGlzbWlzcyYmSS5jbGljayhiKSxFLmNsb3NlQnV0dG9uJiZqJiZqLmNsaWNrKGZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uP2Uuc3RvcFByb3BhZ2F0aW9uKCk6dm9pZCAwIT09ZS5jYW5jZWxCdWJibGUmJmUuY2FuY2VsQnViYmxlIT09ITAmJihlLmNhbmNlbEJ1YmJsZT0hMCksRS5vbkNsb3NlQ2xpY2smJkUub25DbG9zZUNsaWNrKGUpLGIoITApfSksRS5vbmNsaWNrJiZJLmNsaWNrKGZ1bmN0aW9uKGUpe0Uub25jbGljayhlKSxiKCl9KX1mdW5jdGlvbiByKCl7SS5oaWRlKCksSVtFLnNob3dNZXRob2RdKHtkdXJhdGlvbjpFLnNob3dEdXJhdGlvbixlYXNpbmc6RS5zaG93RWFzaW5nLGNvbXBsZXRlOkUub25TaG93bn0pLEUudGltZU91dD4wJiYoaz1zZXRUaW1lb3V0KGIsRS50aW1lT3V0KSxGLm1heEhpZGVUaW1lPXBhcnNlRmxvYXQoRS50aW1lT3V0KSxGLmhpZGVFdGE9KG5ldyBEYXRlKS5nZXRUaW1lKCkrRi5tYXhIaWRlVGltZSxFLnByb2dyZXNzQmFyJiYoRi5pbnRlcnZhbElkPXNldEludGVydmFsKHgsMTApKSl9ZnVuY3Rpb24gYygpe3QuaWNvbkNsYXNzJiZJLmFkZENsYXNzKEUudG9hc3RDbGFzcykuYWRkQ2xhc3MoeSl9ZnVuY3Rpb24gbCgpe0UubmV3ZXN0T25Ub3A/di5wcmVwZW5kKEkpOnYuYXBwZW5kKEkpfWZ1bmN0aW9uIHUoKXtpZih0LnRpdGxlKXt2YXIgZT10LnRpdGxlO0UuZXNjYXBlSHRtbCYmKGU9byh0LnRpdGxlKSksTS5hcHBlbmQoZSkuYWRkQ2xhc3MoRS50aXRsZUNsYXNzKSxJLmFwcGVuZChNKX19ZnVuY3Rpb24gZCgpe2lmKHQubWVzc2FnZSl7dmFyIGU9dC5tZXNzYWdlO0UuZXNjYXBlSHRtbCYmKGU9byh0Lm1lc3NhZ2UpKSxCLmFwcGVuZChlKS5hZGRDbGFzcyhFLm1lc3NhZ2VDbGFzcyksSS5hcHBlbmQoQil9fWZ1bmN0aW9uIHAoKXtFLmNsb3NlQnV0dG9uJiYoai5hZGRDbGFzcyhFLmNsb3NlQ2xhc3MpLmF0dHIoXCJyb2xlXCIsXCJidXR0b25cIiksSS5wcmVwZW5kKGopKX1mdW5jdGlvbiBnKCl7RS5wcm9ncmVzc0JhciYmKHEuYWRkQ2xhc3MoRS5wcm9ncmVzc0NsYXNzKSxJLnByZXBlbmQocSkpfWZ1bmN0aW9uIEMoKXtFLnJ0bCYmSS5hZGRDbGFzcyhcInJ0bFwiKX1mdW5jdGlvbiBPKGUsdCl7aWYoZS5wcmV2ZW50RHVwbGljYXRlcyl7aWYodC5tZXNzYWdlPT09dylyZXR1cm4hMDt3PXQubWVzc2FnZX1yZXR1cm4hMX1mdW5jdGlvbiBiKHQpe3ZhciBuPXQmJkUuY2xvc2VNZXRob2QhPT0hMT9FLmNsb3NlTWV0aG9kOkUuaGlkZU1ldGhvZCxvPXQmJkUuY2xvc2VEdXJhdGlvbiE9PSExP0UuY2xvc2VEdXJhdGlvbjpFLmhpZGVEdXJhdGlvbixzPXQmJkUuY2xvc2VFYXNpbmchPT0hMT9FLmNsb3NlRWFzaW5nOkUuaGlkZUVhc2luZztpZighZShcIjpmb2N1c1wiLEkpLmxlbmd0aHx8dClyZXR1cm4gY2xlYXJUaW1lb3V0KEYuaW50ZXJ2YWxJZCksSVtuXSh7ZHVyYXRpb246byxlYXNpbmc6cyxjb21wbGV0ZTpmdW5jdGlvbigpe2goSSksY2xlYXJUaW1lb3V0KGspLEUub25IaWRkZW4mJlwiaGlkZGVuXCIhPT1QLnN0YXRlJiZFLm9uSGlkZGVuKCksUC5zdGF0ZT1cImhpZGRlblwiLFAuZW5kVGltZT1uZXcgRGF0ZSxmKFApfX0pfWZ1bmN0aW9uIEQoKXsoRS50aW1lT3V0PjB8fEUuZXh0ZW5kZWRUaW1lT3V0PjApJiYoaz1zZXRUaW1lb3V0KGIsRS5leHRlbmRlZFRpbWVPdXQpLEYubWF4SGlkZVRpbWU9cGFyc2VGbG9hdChFLmV4dGVuZGVkVGltZU91dCksRi5oaWRlRXRhPShuZXcgRGF0ZSkuZ2V0VGltZSgpK0YubWF4SGlkZVRpbWUpfWZ1bmN0aW9uIEgoKXtjbGVhclRpbWVvdXQoayksRi5oaWRlRXRhPTAsSS5zdG9wKCEwLCEwKVtFLnNob3dNZXRob2RdKHtkdXJhdGlvbjpFLnNob3dEdXJhdGlvbixlYXNpbmc6RS5zaG93RWFzaW5nfSl9ZnVuY3Rpb24geCgpe3ZhciBlPShGLmhpZGVFdGEtKG5ldyBEYXRlKS5nZXRUaW1lKCkpL0YubWF4SGlkZVRpbWUqMTAwO3Eud2lkdGgoZStcIiVcIil9dmFyIEU9bSgpLHk9dC5pY29uQ2xhc3N8fEUuaWNvbkNsYXNzO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0Lm9wdGlvbnNPdmVycmlkZSYmKEU9ZS5leHRlbmQoRSx0Lm9wdGlvbnNPdmVycmlkZSkseT10Lm9wdGlvbnNPdmVycmlkZS5pY29uQ2xhc3N8fHkpLCFPKEUsdCkpe1QrKyx2PW4oRSwhMCk7dmFyIGs9bnVsbCxJPWUoXCI8ZGl2Lz5cIiksTT1lKFwiPGRpdi8+XCIpLEI9ZShcIjxkaXYvPlwiKSxxPWUoXCI8ZGl2Lz5cIiksaj1lKEUuY2xvc2VIdG1sKSxGPXtpbnRlcnZhbElkOm51bGwsaGlkZUV0YTpudWxsLG1heEhpZGVUaW1lOm51bGx9LFA9e3RvYXN0SWQ6VCxzdGF0ZTpcInZpc2libGVcIixzdGFydFRpbWU6bmV3IERhdGUsb3B0aW9uczpFLG1hcDp0fTtyZXR1cm4gcygpLHIoKSxhKCksZihQKSxFLmRlYnVnJiZjb25zb2xlJiZjb25zb2xlLmxvZyhQKSxJfX1mdW5jdGlvbiBtKCl7cmV0dXJuIGUuZXh0ZW5kKHt9LHAoKSxiLm9wdGlvbnMpfWZ1bmN0aW9uIGgoZSl7dnx8KHY9bigpKSxlLmlzKFwiOnZpc2libGVcIil8fChlLnJlbW92ZSgpLGU9bnVsbCwwPT09di5jaGlsZHJlbigpLmxlbmd0aCYmKHYucmVtb3ZlKCksdz12b2lkIDApKX12YXIgdixDLHcsVD0wLE89e2Vycm9yOlwiZXJyb3JcIixpbmZvOlwiaW5mb1wiLHN1Y2Nlc3M6XCJzdWNjZXNzXCIsd2FybmluZzpcIndhcm5pbmdcIn0sYj17Y2xlYXI6cixyZW1vdmU6YyxlcnJvcjp0LGdldENvbnRhaW5lcjpuLGluZm86byxvcHRpb25zOnt9LHN1YnNjcmliZTpzLHN1Y2Nlc3M6aSx2ZXJzaW9uOlwiMi4xLjRcIix3YXJuaW5nOmF9O3JldHVybiBifSgpfSl9KFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmU6ZnVuY3Rpb24oZSx0KXtcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz10KHJlcXVpcmUoXCJqcXVlcnlcIikpOndpbmRvdy50b2FzdHI9dCh3aW5kb3cualF1ZXJ5KX0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9hc3RyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/toastr/build/toastr.min.js\n");

/***/ }),

/***/ "./node_modules/toastr/toastr.js":
/*!***************************************!*\
  !*** ./node_modules/toastr/toastr.js ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * Toastr\n * Copyright 2012-2015\n * Authors: John Papa, Hans Fjällemark, and Tim Ferrell.\n * All Rights Reserved.\n * Use, reproduction, distribution, and modification of this code is subject to the terms and\n * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php\n *\n * ARIA Support: Greta Krafsig\n *\n * Project: https://github.com/CodeSeven/toastr\n */\n/* global define */\n(function (define) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($) {\n        return (function () {\n            var $container;\n            var listener;\n            var toastId = 0;\n            var toastType = {\n                error: 'error',\n                info: 'info',\n                success: 'success',\n                warning: 'warning'\n            };\n\n            var toastr = {\n                clear: clear,\n                remove: remove,\n                error: error,\n                getContainer: getContainer,\n                info: info,\n                options: {},\n                subscribe: subscribe,\n                success: success,\n                version: '2.1.4',\n                warning: warning\n            };\n\n            var previousToast;\n\n            return toastr;\n\n            ////////////////\n\n            function error(message, title, optionsOverride) {\n                return notify({\n                    type: toastType.error,\n                    iconClass: getOptions().iconClasses.error,\n                    message: message,\n                    optionsOverride: optionsOverride,\n                    title: title\n                });\n            }\n\n            function getContainer(options, create) {\n                if (!options) { options = getOptions(); }\n                $container = $('#' + options.containerId);\n                if ($container.length) {\n                    return $container;\n                }\n                if (create) {\n                    $container = createContainer(options);\n                }\n                return $container;\n            }\n\n            function info(message, title, optionsOverride) {\n                return notify({\n                    type: toastType.info,\n                    iconClass: getOptions().iconClasses.info,\n                    message: message,\n                    optionsOverride: optionsOverride,\n                    title: title\n                });\n            }\n\n            function subscribe(callback) {\n                listener = callback;\n            }\n\n            function success(message, title, optionsOverride) {\n                return notify({\n                    type: toastType.success,\n                    iconClass: getOptions().iconClasses.success,\n                    message: message,\n                    optionsOverride: optionsOverride,\n                    title: title\n                });\n            }\n\n            function warning(message, title, optionsOverride) {\n                return notify({\n                    type: toastType.warning,\n                    iconClass: getOptions().iconClasses.warning,\n                    message: message,\n                    optionsOverride: optionsOverride,\n                    title: title\n                });\n            }\n\n            function clear($toastElement, clearOptions) {\n                var options = getOptions();\n                if (!$container) { getContainer(options); }\n                if (!clearToast($toastElement, options, clearOptions)) {\n                    clearContainer(options);\n                }\n            }\n\n            function remove($toastElement) {\n                var options = getOptions();\n                if (!$container) { getContainer(options); }\n                if ($toastElement && $(':focus', $toastElement).length === 0) {\n                    removeToast($toastElement);\n                    return;\n                }\n                if ($container.children().length) {\n                    $container.remove();\n                }\n            }\n\n            // internal functions\n\n            function clearContainer (options) {\n                var toastsToClear = $container.children();\n                for (var i = toastsToClear.length - 1; i >= 0; i--) {\n                    clearToast($(toastsToClear[i]), options);\n                }\n            }\n\n            function clearToast ($toastElement, options, clearOptions) {\n                var force = clearOptions && clearOptions.force ? clearOptions.force : false;\n                if ($toastElement && (force || $(':focus', $toastElement).length === 0)) {\n                    $toastElement[options.hideMethod]({\n                        duration: options.hideDuration,\n                        easing: options.hideEasing,\n                        complete: function () { removeToast($toastElement); }\n                    });\n                    return true;\n                }\n                return false;\n            }\n\n            function createContainer(options) {\n                $container = $('<div/>')\n                    .attr('id', options.containerId)\n                    .addClass(options.positionClass);\n\n                $container.appendTo($(options.target));\n                return $container;\n            }\n\n            function getDefaults() {\n                return {\n                    tapToDismiss: true,\n                    toastClass: 'toast',\n                    containerId: 'toast-container',\n                    debug: false,\n\n                    showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery\n                    showDuration: 300,\n                    showEasing: 'swing', //swing and linear are built into jQuery\n                    onShown: undefined,\n                    hideMethod: 'fadeOut',\n                    hideDuration: 1000,\n                    hideEasing: 'swing',\n                    onHidden: undefined,\n                    closeMethod: false,\n                    closeDuration: false,\n                    closeEasing: false,\n                    closeOnHover: true,\n\n                    extendedTimeOut: 1000,\n                    iconClasses: {\n                        error: 'toast-error',\n                        info: 'toast-info',\n                        success: 'toast-success',\n                        warning: 'toast-warning'\n                    },\n                    iconClass: 'toast-info',\n                    positionClass: 'toast-top-right',\n                    timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky\n                    titleClass: 'toast-title',\n                    messageClass: 'toast-message',\n                    escapeHtml: false,\n                    target: 'body',\n                    closeHtml: '<button type=\"button\">&times;</button>',\n                    closeClass: 'toast-close-button',\n                    newestOnTop: true,\n                    preventDuplicates: false,\n                    progressBar: false,\n                    progressClass: 'toast-progress',\n                    rtl: false\n                };\n            }\n\n            function publish(args) {\n                if (!listener) { return; }\n                listener(args);\n            }\n\n            function notify(map) {\n                var options = getOptions();\n                var iconClass = map.iconClass || options.iconClass;\n\n                if (typeof (map.optionsOverride) !== 'undefined') {\n                    options = $.extend(options, map.optionsOverride);\n                    iconClass = map.optionsOverride.iconClass || iconClass;\n                }\n\n                if (shouldExit(options, map)) { return; }\n\n                toastId++;\n\n                $container = getContainer(options, true);\n\n                var intervalId = null;\n                var $toastElement = $('<div/>');\n                var $titleElement = $('<div/>');\n                var $messageElement = $('<div/>');\n                var $progressElement = $('<div/>');\n                var $closeElement = $(options.closeHtml);\n                var progressBar = {\n                    intervalId: null,\n                    hideEta: null,\n                    maxHideTime: null\n                };\n                var response = {\n                    toastId: toastId,\n                    state: 'visible',\n                    startTime: new Date(),\n                    options: options,\n                    map: map\n                };\n\n                personalizeToast();\n\n                displayToast();\n\n                handleEvents();\n\n                publish(response);\n\n                if (options.debug && console) {\n                    console.log(response);\n                }\n\n                return $toastElement;\n\n                function escapeHtml(source) {\n                    if (source == null) {\n                        source = '';\n                    }\n\n                    return source\n                        .replace(/&/g, '&amp;')\n                        .replace(/\"/g, '&quot;')\n                        .replace(/'/g, '&#39;')\n                        .replace(/</g, '&lt;')\n                        .replace(/>/g, '&gt;');\n                }\n\n                function personalizeToast() {\n                    setIcon();\n                    setTitle();\n                    setMessage();\n                    setCloseButton();\n                    setProgressBar();\n                    setRTL();\n                    setSequence();\n                    setAria();\n                }\n\n                function setAria() {\n                    var ariaValue = '';\n                    switch (map.iconClass) {\n                        case 'toast-success':\n                        case 'toast-info':\n                            ariaValue =  'polite';\n                            break;\n                        default:\n                            ariaValue = 'assertive';\n                    }\n                    $toastElement.attr('aria-live', ariaValue);\n                }\n\n                function handleEvents() {\n                    if (options.closeOnHover) {\n                        $toastElement.hover(stickAround, delayedHideToast);\n                    }\n\n                    if (!options.onclick && options.tapToDismiss) {\n                        $toastElement.click(hideToast);\n                    }\n\n                    if (options.closeButton && $closeElement) {\n                        $closeElement.click(function (event) {\n                            if (event.stopPropagation) {\n                                event.stopPropagation();\n                            } else if (event.cancelBubble !== undefined && event.cancelBubble !== true) {\n                                event.cancelBubble = true;\n                            }\n\n                            if (options.onCloseClick) {\n                                options.onCloseClick(event);\n                            }\n\n                            hideToast(true);\n                        });\n                    }\n\n                    if (options.onclick) {\n                        $toastElement.click(function (event) {\n                            options.onclick(event);\n                            hideToast();\n                        });\n                    }\n                }\n\n                function displayToast() {\n                    $toastElement.hide();\n\n                    $toastElement[options.showMethod](\n                        {duration: options.showDuration, easing: options.showEasing, complete: options.onShown}\n                    );\n\n                    if (options.timeOut > 0) {\n                        intervalId = setTimeout(hideToast, options.timeOut);\n                        progressBar.maxHideTime = parseFloat(options.timeOut);\n                        progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;\n                        if (options.progressBar) {\n                            progressBar.intervalId = setInterval(updateProgress, 10);\n                        }\n                    }\n                }\n\n                function setIcon() {\n                    if (map.iconClass) {\n                        $toastElement.addClass(options.toastClass).addClass(iconClass);\n                    }\n                }\n\n                function setSequence() {\n                    if (options.newestOnTop) {\n                        $container.prepend($toastElement);\n                    } else {\n                        $container.append($toastElement);\n                    }\n                }\n\n                function setTitle() {\n                    if (map.title) {\n                        var suffix = map.title;\n                        if (options.escapeHtml) {\n                            suffix = escapeHtml(map.title);\n                        }\n                        $titleElement.append(suffix).addClass(options.titleClass);\n                        $toastElement.append($titleElement);\n                    }\n                }\n\n                function setMessage() {\n                    if (map.message) {\n                        var suffix = map.message;\n                        if (options.escapeHtml) {\n                            suffix = escapeHtml(map.message);\n                        }\n                        $messageElement.append(suffix).addClass(options.messageClass);\n                        $toastElement.append($messageElement);\n                    }\n                }\n\n                function setCloseButton() {\n                    if (options.closeButton) {\n                        $closeElement.addClass(options.closeClass).attr('role', 'button');\n                        $toastElement.prepend($closeElement);\n                    }\n                }\n\n                function setProgressBar() {\n                    if (options.progressBar) {\n                        $progressElement.addClass(options.progressClass);\n                        $toastElement.prepend($progressElement);\n                    }\n                }\n\n                function setRTL() {\n                    if (options.rtl) {\n                        $toastElement.addClass('rtl');\n                    }\n                }\n\n                function shouldExit(options, map) {\n                    if (options.preventDuplicates) {\n                        if (map.message === previousToast) {\n                            return true;\n                        } else {\n                            previousToast = map.message;\n                        }\n                    }\n                    return false;\n                }\n\n                function hideToast(override) {\n                    var method = override && options.closeMethod !== false ? options.closeMethod : options.hideMethod;\n                    var duration = override && options.closeDuration !== false ?\n                        options.closeDuration : options.hideDuration;\n                    var easing = override && options.closeEasing !== false ? options.closeEasing : options.hideEasing;\n                    if ($(':focus', $toastElement).length && !override) {\n                        return;\n                    }\n                    clearTimeout(progressBar.intervalId);\n                    return $toastElement[method]({\n                        duration: duration,\n                        easing: easing,\n                        complete: function () {\n                            removeToast($toastElement);\n                            clearTimeout(intervalId);\n                            if (options.onHidden && response.state !== 'hidden') {\n                                options.onHidden();\n                            }\n                            response.state = 'hidden';\n                            response.endTime = new Date();\n                            publish(response);\n                        }\n                    });\n                }\n\n                function delayedHideToast() {\n                    if (options.timeOut > 0 || options.extendedTimeOut > 0) {\n                        intervalId = setTimeout(hideToast, options.extendedTimeOut);\n                        progressBar.maxHideTime = parseFloat(options.extendedTimeOut);\n                        progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;\n                    }\n                }\n\n                function stickAround() {\n                    clearTimeout(intervalId);\n                    progressBar.hideEta = 0;\n                    $toastElement.stop(true, true)[options.showMethod](\n                        {duration: options.showDuration, easing: options.showEasing}\n                    );\n                }\n\n                function updateProgress() {\n                    var percentage = ((progressBar.hideEta - (new Date().getTime())) / progressBar.maxHideTime) * 100;\n                    $progressElement.width(percentage + '%');\n                }\n            }\n\n            function getOptions() {\n                return $.extend({}, getDefaults(), toastr.options);\n            }\n\n            function removeToast($toastElement) {\n                if (!$container) { $container = getContainer(); }\n                if ($toastElement.is(':visible')) {\n                    return;\n                }\n                $toastElement.remove();\n                $toastElement = null;\n                if ($container.children().length === 0) {\n                    $container.remove();\n                    previousToast = undefined;\n                }\n            }\n\n        })();\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}(__webpack_require__.amdD));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/toastr/toastr.js\n");

/***/ }),

/***/ "./src/common/common.ts":
/*!******************************!*\
  !*** ./src/common/common.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SideBarControl = exports.BuildURL = exports.OpenLabelTool = exports.NumberPad = exports.TimeFormat = exports.PostData = exports.GetData = exports.AnalysisURL = void 0;\nconst jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"));\nconst toString = Object.prototype.toString;\nfunction AnalysisURL(url) {\n    if (url === \"\") {\n        url = document.URL;\n    }\n    let params = new Map;\n    let tmpUrl = url.split('?');\n    if (tmpUrl.length > 1) {\n        tmpUrl[1].split('&').forEach(e => {\n            let p = e.split('=');\n            params.set(p[0], p[1]);\n        });\n    }\n    let tmp = tmpUrl[0].split('/');\n    if (tmp.length > 3) {\n        return {\n            path_base: tmp[tmp.length - 1],\n            path_indexer: tmp[tmp.length - 2],\n            path_class: tmp[tmp.length - 3],\n            params: params,\n        };\n    }\n    else {\n        return {\n            path_base: \"\",\n            path_indexer: \"\",\n            path_class: \"\",\n            params: params,\n        };\n    }\n}\nexports.AnalysisURL = AnalysisURL;\nfunction GetData(url) {\n    return new Promise((resolve, reject) => {\n        jquery_1.default.get(url, resp => {\n            resolve(resp);\n        });\n    });\n}\nexports.GetData = GetData;\nfunction PostData(url, data) {\n    return new Promise((resolve, reject) => {\n        jquery_1.default.post(url, JSON.stringify(data), resp => {\n            resolve(resp);\n        });\n    });\n}\nexports.PostData = PostData;\nfunction TimeFormat(time) {\n    // time = Math.floor(time * 1000)\n    time = Number.parseFloat(time.toFixed(3));\n    let h = time < 3600 ? 0 : Math.floor(time / 3600);\n    time = time - h * 3600;\n    let m = time < 60 ? 0 : Math.floor(time / 60);\n    time = time - m * 60;\n    let s = time < 1 ? 0 : Math.floor(time);\n    let ns = Math.floor((time - s) * 1000);\n    return `${h}:${m}:${s}.${NumberPad(ns, 3)}`;\n}\nexports.TimeFormat = TimeFormat;\nfunction NumberPad(num, n) {\n    let len = num.toString().length;\n    let ret = num.toString();\n    while (len < n) {\n        ret = \"0\" + ret;\n        len++;\n    }\n    return ret;\n}\nexports.NumberPad = NumberPad;\nfunction OpenLabelTool(ui_root, media_type, media_index, submit_level, label_uuid) {\n    let targetURL = `${ui_root}/labelsys/${media_type}/${media_index}/${submit_level}`;\n    let params = new Map;\n    if (label_uuid) {\n        params.set(\"label_uuid\", label_uuid);\n    }\n    window.open(BuildURL(targetURL, params), \"\", 'fullscreen, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=no, status=no');\n}\nexports.OpenLabelTool = OpenLabelTool;\nfunction BuildURL(url, params) {\n    if (!params) {\n        return url;\n    }\n    const parts = [];\n    params.forEach((val, key) => {\n        if (val === null || typeof val === 'undefined' || val == \"\") {\n            return;\n        }\n        let values;\n        if (Array.isArray(val)) {\n            values = val;\n            key += '[]';\n        }\n        else {\n            values = [val];\n        }\n        values.forEach((val) => {\n            if (isDate(val)) {\n                val = val.toISOString();\n            }\n            else if (isObject(val)) {\n                val = JSON.stringify(val);\n            }\n            parts.push(`${encode(key)}=${encode(val)}`);\n        });\n    });\n    let serializedParams = parts.join('&');\n    if (serializedParams) {\n        const markIndex = url.indexOf('#');\n        if (markIndex !== -1) {\n            url = url.slice(0, markIndex);\n        }\n        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n    }\n    return url;\n}\nexports.BuildURL = BuildURL;\nfunction encode(val) {\n    return encodeURIComponent(val)\n        .replace(/%40/g, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%20/g, '+')\n        .replace(/%5B/gi, '[')\n        .replace(/%5D/gi, ']');\n}\nfunction isDate(val) {\n    return toString.call(val) === '[object Date]';\n}\nfunction isObject(val) {\n    return val !== null && typeof val === 'object';\n}\nfunction SideBarControl(action) {\n    switch (action) {\n        case \"open\":\n            (0, jquery_1.default)(document.body).addClass(\"sidebar-mini\").removeClass(\"sidebar-collapse\");\n            break;\n        case \"close\":\n            (0, jquery_1.default)(document.body).addClass(\"sidebar-mini sidebar-collapse\");\n            break;\n        case \"hide\":\n            (0, jquery_1.default)(document.body).removeClass(\"sidebar-mini\").addClass(\"sidebar-collapse\");\n            break;\n    }\n}\nexports.SideBarControl = SideBarControl;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tbW9uL2NvbW1vbi50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21tb24vY29tbW9uLnRzP2M4OTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNpZGVCYXJDb250cm9sID0gZXhwb3J0cy5CdWlsZFVSTCA9IGV4cG9ydHMuT3BlbkxhYmVsVG9vbCA9IGV4cG9ydHMuTnVtYmVyUGFkID0gZXhwb3J0cy5UaW1lRm9ybWF0ID0gZXhwb3J0cy5Qb3N0RGF0YSA9IGV4cG9ydHMuR2V0RGF0YSA9IGV4cG9ydHMuQW5hbHlzaXNVUkwgPSB2b2lkIDA7XG5jb25zdCBqcXVlcnlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwianF1ZXJ5XCIpKTtcbmNvbnN0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmZ1bmN0aW9uIEFuYWx5c2lzVVJMKHVybCkge1xuICAgIGlmICh1cmwgPT09IFwiXCIpIHtcbiAgICAgICAgdXJsID0gZG9jdW1lbnQuVVJMO1xuICAgIH1cbiAgICBsZXQgcGFyYW1zID0gbmV3IE1hcDtcbiAgICBsZXQgdG1wVXJsID0gdXJsLnNwbGl0KCc/Jyk7XG4gICAgaWYgKHRtcFVybC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRtcFVybFsxXS5zcGxpdCgnJicpLmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgICBsZXQgcCA9IGUuc3BsaXQoJz0nKTtcbiAgICAgICAgICAgIHBhcmFtcy5zZXQocFswXSwgcFsxXSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgdG1wID0gdG1wVXJsWzBdLnNwbGl0KCcvJyk7XG4gICAgaWYgKHRtcC5sZW5ndGggPiAzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXRoX2Jhc2U6IHRtcFt0bXAubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgICBwYXRoX2luZGV4ZXI6IHRtcFt0bXAubGVuZ3RoIC0gMl0sXG4gICAgICAgICAgICBwYXRoX2NsYXNzOiB0bXBbdG1wLmxlbmd0aCAtIDNdLFxuICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGF0aF9iYXNlOiBcIlwiLFxuICAgICAgICAgICAgcGF0aF9pbmRleGVyOiBcIlwiLFxuICAgICAgICAgICAgcGF0aF9jbGFzczogXCJcIixcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuQW5hbHlzaXNVUkwgPSBBbmFseXNpc1VSTDtcbmZ1bmN0aW9uIEdldERhdGEodXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAganF1ZXJ5XzEuZGVmYXVsdC5nZXQodXJsLCByZXNwID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzcCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5HZXREYXRhID0gR2V0RGF0YTtcbmZ1bmN0aW9uIFBvc3REYXRhKHVybCwgZGF0YSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGpxdWVyeV8xLmRlZmF1bHQucG9zdCh1cmwsIEpTT04uc3RyaW5naWZ5KGRhdGEpLCByZXNwID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzcCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5Qb3N0RGF0YSA9IFBvc3REYXRhO1xuZnVuY3Rpb24gVGltZUZvcm1hdCh0aW1lKSB7XG4gICAgLy8gdGltZSA9IE1hdGguZmxvb3IodGltZSAqIDEwMDApXG4gICAgdGltZSA9IE51bWJlci5wYXJzZUZsb2F0KHRpbWUudG9GaXhlZCgzKSk7XG4gICAgbGV0IGggPSB0aW1lIDwgMzYwMCA/IDAgOiBNYXRoLmZsb29yKHRpbWUgLyAzNjAwKTtcbiAgICB0aW1lID0gdGltZSAtIGggKiAzNjAwO1xuICAgIGxldCBtID0gdGltZSA8IDYwID8gMCA6IE1hdGguZmxvb3IodGltZSAvIDYwKTtcbiAgICB0aW1lID0gdGltZSAtIG0gKiA2MDtcbiAgICBsZXQgcyA9IHRpbWUgPCAxID8gMCA6IE1hdGguZmxvb3IodGltZSk7XG4gICAgbGV0IG5zID0gTWF0aC5mbG9vcigodGltZSAtIHMpICogMTAwMCk7XG4gICAgcmV0dXJuIGAke2h9OiR7bX06JHtzfS4ke051bWJlclBhZChucywgMyl9YDtcbn1cbmV4cG9ydHMuVGltZUZvcm1hdCA9IFRpbWVGb3JtYXQ7XG5mdW5jdGlvbiBOdW1iZXJQYWQobnVtLCBuKSB7XG4gICAgbGV0IGxlbiA9IG51bS50b1N0cmluZygpLmxlbmd0aDtcbiAgICBsZXQgcmV0ID0gbnVtLnRvU3RyaW5nKCk7XG4gICAgd2hpbGUgKGxlbiA8IG4pIHtcbiAgICAgICAgcmV0ID0gXCIwXCIgKyByZXQ7XG4gICAgICAgIGxlbisrO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuZXhwb3J0cy5OdW1iZXJQYWQgPSBOdW1iZXJQYWQ7XG5mdW5jdGlvbiBPcGVuTGFiZWxUb29sKHVpX3Jvb3QsIG1lZGlhX3R5cGUsIG1lZGlhX2luZGV4LCBzdWJtaXRfbGV2ZWwsIGxhYmVsX3V1aWQpIHtcbiAgICBsZXQgdGFyZ2V0VVJMID0gYCR7dWlfcm9vdH0vbGFiZWxzeXMvJHttZWRpYV90eXBlfS8ke21lZGlhX2luZGV4fS8ke3N1Ym1pdF9sZXZlbH1gO1xuICAgIGxldCBwYXJhbXMgPSBuZXcgTWFwO1xuICAgIGlmIChsYWJlbF91dWlkKSB7XG4gICAgICAgIHBhcmFtcy5zZXQoXCJsYWJlbF91dWlkXCIsIGxhYmVsX3V1aWQpO1xuICAgIH1cbiAgICB3aW5kb3cub3BlbihCdWlsZFVSTCh0YXJnZXRVUkwsIHBhcmFtcyksIFwiXCIsICdmdWxsc2NyZWVuLCB0b29sYmFyPW5vLCBtZW51YmFyPW5vLCBzY3JvbGxiYXJzPW5vLCByZXNpemFibGU9bm8sbG9jYXRpb249bm8sIHN0YXR1cz1ubycpO1xufVxuZXhwb3J0cy5PcGVuTGFiZWxUb29sID0gT3BlbkxhYmVsVG9vbDtcbmZ1bmN0aW9uIEJ1aWxkVVJMKHVybCwgcGFyYW1zKSB7XG4gICAgaWYgKCFwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gICAgY29uc3QgcGFydHMgPSBbXTtcbiAgICBwYXJhbXMuZm9yRWFjaCgodmFsLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJyB8fCB2YWwgPT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCB2YWx1ZXM7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbDtcbiAgICAgICAgICAgIGtleSArPSAnW10nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFsdWVzID0gW3ZhbF07XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVzLmZvckVhY2goKHZhbCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzRGF0ZSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gdmFsLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gSlNPTi5zdHJpbmdpZnkodmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnRzLnB1c2goYCR7ZW5jb2RlKGtleSl9PSR7ZW5jb2RlKHZhbCl9YCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGxldCBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICAgIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgICAgIGlmIChtYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgbWFya0luZGV4KTtcbiAgICAgICAgfVxuICAgICAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG59XG5leHBvcnRzLkJ1aWxkVVJMID0gQnVpbGRVUkw7XG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpXG4gICAgICAgIC5yZXBsYWNlKC8lNDAvZywgJ0AnKVxuICAgICAgICAucmVwbGFjZSgvJTNBL2dpLCAnOicpXG4gICAgICAgIC5yZXBsYWNlKC8lMjQvZywgJyQnKVxuICAgICAgICAucmVwbGFjZSgvJTJDL2dpLCAnLCcpXG4gICAgICAgIC5yZXBsYWNlKC8lMjAvZywgJysnKVxuICAgICAgICAucmVwbGFjZSgvJTVCL2dpLCAnWycpXG4gICAgICAgIC5yZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gICAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cbmZ1bmN0aW9uIFNpZGVCYXJDb250cm9sKGFjdGlvbikge1xuICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoXCJzaWRlYmFyLW1pbmlcIikucmVtb3ZlQ2xhc3MoXCJzaWRlYmFyLWNvbGxhcHNlXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJjbG9zZVwiOlxuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKFwic2lkZWJhci1taW5pIHNpZGViYXItY29sbGFwc2VcIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImhpZGVcIjpcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KShkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhcInNpZGViYXItbWluaVwiKS5hZGRDbGFzcyhcInNpZGViYXItY29sbGFwc2VcIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG5leHBvcnRzLlNpZGVCYXJDb250cm9sID0gU2lkZUJhckNvbnRyb2w7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/common/common.ts\n");

/***/ }),

/***/ "./src/labelsys/entry.ts":
/*!*******************************!*\
  !*** ./src/labelsys/entry.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MainPanel = void 0;\nconst common = __importStar(__webpack_require__(/*! ../common/common */ \"./src/common/common.ts\"));\nconst myTimer = __importStar(__webpack_require__(/*! ./labelsys_timer */ \"./src/labelsys/labelsys_timer.ts\"));\nconst toastr = __webpack_require__(/*! toastr */ \"./node_modules/toastr/toastr.js\");\nconst labelsys_ui_1 = __webpack_require__(/*! ./labelsys_ui */ \"./src/labelsys/labelsys_ui.ts\");\nconst labelsys_data_1 = __webpack_require__(/*! ./labelsys_data */ \"./src/labelsys/labelsys_data.ts\");\nconst labelsys_container_1 = __webpack_require__(/*! ./labelsys_container */ \"./src/labelsys/labelsys_container.ts\");\nconst labelsys_container_2 = __webpack_require__(/*! ./labelsys_container */ \"./src/labelsys/labelsys_container.ts\");\nconst labelsys_container_3 = __webpack_require__(/*! ./labelsys_container */ \"./src/labelsys/labelsys_container.ts\");\nconst labelsys_panel_1 = __webpack_require__(/*! ./labelsys_panel */ \"./src/labelsys/labelsys_panel.ts\");\nconst labelsys_panel_2 = __webpack_require__(/*! ./labelsys_panel */ \"./src/labelsys/labelsys_panel.ts\");\ntoastr.options = { \"closeButton\": true, \"timeOut\": 1000, \"tapToDismiss\": true };\nconst CURRENT_PAGE_URL = document.URL;\nconst api_root = '/api/v1';\nlet MEDIA_SCALE = 0;\nlet MEDIA_LOCK_INTERVAL = 0;\nconst MUST_FULL_BUFFERED = false;\nlet ref_main_panel;\nlet media_lock_timer;\n/**\n * 主面板，功能主体\n */\nclass MainPanel {\n    constructor(ref_main, media_info, label_data, api_root) {\n        this.DEF_MODE_INPUT = \"i\";\n        this.DEF_MODE_CONTROL = \"c\";\n        this.ref_main = ref_main;\n        this.obj_ui = new labelsys_ui_1.UI();\n        this.data_usr_label = label_data;\n        this.data_format_duration = common.TimeFormat(media_info.duration);\n        this.data_select = new Map;\n        this.flag_video_mode = (media_info.frames > 0);\n        this.data_media_info = media_info;\n        this.ref_main.height(\"100%\").width(\"100%\");\n        this.initResizeListeners();\n        this.initKeyPressListeners();\n        this.user_mode = this.DEF_MODE_CONTROL;\n        this.obj_canvas_panel = new labelsys_panel_2.CanvasPanel($(\"#menu-left nav ul\"), this, this.data_usr_label, this.obj_ui);\n        this.obj_system_panel = new labelsys_panel_1.SystemPanel($(\"#menu-system nav ul\"), this, this.data_usr_label, this.obj_ui, api_root);\n        let media_container = new labelsys_container_3.MediaContainer(this.ref_main, \"container-media\", \"calc(100% - 70px)\");\n        this.obj_video_container = new labelsys_container_2.VideoContainer(media_container.ref_main, \"container-video\", media_info, false, this.on_play);\n        this.obj_canvas_container = new labelsys_container_1.CanvasContainer(media_container.ref_main, \"container-canvas\", this, this.data_usr_label);\n        this.obj_media_container = media_container;\n        this.obj_canvas_panel.set_canvas_ref(this.obj_canvas_container);\n        this.obj_ui.bgFrozen(true);\n        this.timer_metadata = new myTimer.Timer(() => {\n            if (this.obj_video_container.get_flag_metaloaded()) {\n                // console.info(\"Timer.metaload stop\")\n                this.timer_metadata.stop();\n                this.on_metaloaded();\n                toastr.info(\"媒体数据预载结束,允许标注\");\n                console.log(\"metadata_load_finish\");\n            }\n            else {\n                console.debug(\"媒体载入未完成...\");\n            }\n        });\n        this.timer_metadata.start(300);\n    }\n    on_play(frame) {\n        // console.log(\"main_panel_on_play\", this.obj_main,frame)\n    }\n    exit() {\n        LabelToolSystemExit();\n    }\n    set_mode_input() {\n        this.user_mode = this.DEF_MODE_INPUT;\n    }\n    /**\n     * 窗口调整监听\n     */\n    initResizeListeners() {\n        const callback = (mutationsList, observer) => {\n            for (let mutation of mutationsList) {\n                if (mutation.type === 'childList') {\n                    console.log('A child node has been added or removed.');\n                }\n                else if (mutation.type === 'attributes') {\n                    // console.log('The ' + mutation.attributeName + ' attribute was modified.');\n                    if (mutation.attributeName === \"style\") {\n                        this.on_resize();\n                    }\n                }\n            }\n        };\n        const observer = new MutationObserver(callback);\n        observer.observe($(\".content-wrapper\")[0], { attributes: true, childList: false, subtree: false });\n        window.addEventListener(\"resize\", (e) => {\n            this.on_resize();\n        });\n    }\n    /**\n     * 按键监听器\n     */\n    initKeyPressListeners() {\n        $(document).on(\"keydown\", (e) => {\n            switch (this.user_mode) {\n                case this.DEF_MODE_CONTROL:\n                    this.onKeyDown(e.keyCode || e.which || e.charCode);\n                    break;\n                case this.DEF_MODE_INPUT:\n                    break;\n            }\n        });\n    }\n    /*\n    set_value(group: string, value: string, crf: crf_meta) {\n        // console.log(\"button set value\", group, value, crf)\n        switch (crf.domain) {\n            case \"global\":\n                this.data_usr_label.set_global(group, parseInt(crf.value))\n                break\n            case \"frame\":\n                switch (group) {\n                    case \"t\":\n                        this.obj_canvas_container.set_page_time_label(crf.id, value, this.obj_video_container.get_current_time())\n                        break\n                    default:\n                }\n                console.log(\"set value/F\")\n                this.currentPageSave()\n                break\n            default:\n\n        }\n        this.data_select.set(group, value)\n    }\n\n    get_value(group: string) {\n        if (this.data_select.has(group)) {\n            return this.data_select.get(group)\n        } else {\n            return null\n        }\n    }\n\n    has_value(group: string) {\n        return this.data_select.has(group)\n    }\n\n    del_value(group: string) {\n        this.data_select.delete(group)\n    }\n\n\n    get_part(id: string) {\n        return this.obj_canvas_container.get_part(id)\n    }\n\n    has_part(id: string) {\n        return this.obj_canvas_container.has_part(id)\n    }\n*/\n    del_part(id) {\n        console.log('remove part', id);\n        switch (id) {\n            case \"all\":\n                if (this.obj_ui.confirm(`确认删除本帧全部标注结构？`)) {\n                    this.obj_canvas_container.get_activates().forEach((isAct, id) => {\n                        this.obj_canvas_container.del_part(id);\n                        this.set_button_deactivate(id);\n                    });\n                }\n                break;\n            case \"activate\":\n                this.obj_canvas_container.get_activates().forEach((isAct, id) => {\n                    if (isAct && this.obj_ui.confirm(`确认删除标注结构：${id}？`)) {\n                        this.obj_canvas_container.del_part(id);\n                        this.set_button_deactivate(id);\n                    }\n                });\n                break;\n            default:\n                if (this.obj_canvas_container.has_part(id)) {\n                    this.obj_canvas_container.del_part(id);\n                    this.set_button_deactivate(id);\n                }\n        }\n    }\n    set_button_activate(id) {\n        this.obj_canvas_panel.set_button(id, \"on\", undefined);\n    }\n    set_button_deactivate(id) {\n        this.obj_canvas_panel.set_button(id, \"off\", undefined);\n    }\n    set_button_hold(id) {\n        this.obj_canvas_panel.set_button(id, \"hold\", undefined);\n    }\n    set_button_desc(id, isActivate, desc) {\n        this.obj_canvas_panel.set_button(id, isActivate ? \"on\" : \"off\", desc);\n    }\n    get_current_play_info() {\n        return this.obj_video_container.get_current_all();\n    }\n    on_crf_ready() {\n        let crf_groups = this.data_usr_label.get_crf_groups();\n        this.obj_canvas_panel.load_crf(crf_groups);\n    }\n    on_usr_ready() {\n        let q = this.data_usr_label.get_global(\"q\");\n        console.log(\"配置质量标签 q=\", q);\n        if (q) {\n            let id = `FQ${q}`;\n            this.obj_canvas_panel.set_button(id, \"on\", undefined);\n        }\n        this.update({ frame: 0, time: 0, progress: 0 });\n    }\n    on_mouse_scroll(e) {\n        let delta = (e.originalEvent.wheelDelta && (e.originalEvent.wheelDelta > 0 ? 1 : -1)) || // chrome & ie\n            (e.originalEvent.detail && (e.originalEvent.detail > 0 ? -1 : 1)); // firefox\n        if (delta > 0) {\n            ref_main_panel.prevFrame();\n        }\n        else if (delta < 0) {\n            ref_main_panel.nextFrame();\n        }\n    }\n    on_metaloaded() {\n        // console.log(\"create progress bar\")\n        this.pg_bar_create();\n        // console.log(\"create progress tag\")\n        this.pg_tag_create();\n        // console.log(\"create control bar\")\n        this.control_bar_create();\n        // console.log(\"resize window\")\n        this.on_resize();\n        $(this.ref_main).on(\"mousewheel DOMMouseScroll\", this.on_mouse_scroll);\n        // console.info(\"Timer.buffer start\")\n        this.timer_buffer = new myTimer.Timer(() => {\n            if (!MUST_FULL_BUFFERED || this.data_media_info.duration === 0 || this.pg_buffer_monitor()) {\n                // console.info(\"Timer.buffer stop\")\n                this.timer_buffer.stop();\n                toastr.info(\"完成视频载入\");\n                this.obj_ui.bgUnfrozen();\n            }\n        });\n        this.timer_buffer.start(100);\n    }\n    on_resize() {\n        let d = this.obj_video_container.get_window_info();\n        let mcs = this.obj_media_container.get_window_info();\n        let containerH = mcs.height;\n        let containerW = mcs.width;\n        let containerScale = containerW / containerH;\n        if (MEDIA_SCALE >= containerScale) {\n            d.width = containerW;\n            d.height = containerW / MEDIA_SCALE;\n            d.left = 0;\n            d.top = (containerH - d.height) / 2;\n        }\n        else {\n            d.height = containerH;\n            d.width = containerH * MEDIA_SCALE;\n            d.left = (containerW - d.width) / 2;\n            d.top = 0;\n        }\n        this.obj_video_container.set_window_info(d);\n        this.obj_canvas_container.set_window_info(d);\n    }\n    onKeyDown(code) {\n        switch (code) {\n            // ESC\n            case 27:\n                this.obj_canvas_container.page_load(null);\n                break;\n            // P\n            case 80:\n                this.play();\n                break;\n            // Enter\n            case 13:\n                break;\n            // Z\n            case 90: //z\n                this.obj_canvas_container.undo();\n                break;\n            // X, U\n            case 88:\n            case 85:\n                this.obj_canvas_container.redo();\n                break;\n            // Del, D, Backspace\n            case 46:\n            case 68:\n            case 8:\n                ref_main_panel.del_part(\"activate\");\n                break;\n            // Q\n            case 81:\n                ref_main_panel.del_part(\"all\");\n                break;\n            // H\n            case 72:\n                if (this.obj_canvas_container.get_canvas_hidden()) {\n                    this.obj_canvas_container.show_all_parts();\n                }\n                else {\n                    this.obj_canvas_container.hide_all_parts();\n                }\n                break;\n            // Home\n            case 36:\n                this.skip_to_frame(0);\n                break;\n            // End\n            case 35:\n                this.skip_to_frame(-1);\n                break;\n            // left\n            case 37:\n                this.prevFrame();\n                break;\n            // right\n            case 39:\n                this.nextFrame();\n                break;\n            // <\n            case 188:\n                this.prevLabel();\n                break;\n            // >\n            case 190:\n                this.nextLabel();\n                break;\n            default:\n            // console.log(code.toString());\n        }\n    }\n    play() {\n        this.currentPageSave();\n        let obj_play = this.ref_btn_play;\n        if (this.obj_video_container.play()) {\n            obj_play === null || obj_play === void 0 ? void 0 : obj_play.html('<i class=\"fas fa-pause-circle\"></i>');\n            this.obj_canvas_container.page_new();\n            this.osd_auto_update_start();\n        }\n        else {\n            obj_play === null || obj_play === void 0 ? void 0 : obj_play.html('<i class=\"fas fa-play-circle\"></i>');\n            // console.log(\"current frame\",this.vc.currentTime,this.vc.currentFrame)\n            this.update(this.obj_video_container.get_current_all());\n            this.osd_auto_update_stop();\n        }\n    }\n    stop() {\n        let obj_play = this.ref_btn_play;\n        if (obj_play) {\n            obj_play.html('<i class=\"fas fa-play-circle\"></i>');\n        }\n        this.obj_video_container.stop();\n        this.osd_auto_update_stop();\n        this.osd_manual_update();\n    }\n    skip_to_frame(frame) {\n        this.currentPageSave();\n        this.update(this.obj_video_container.jump_to(frame));\n    }\n    prevFrame() {\n        this.currentPageSave();\n        const media_current = this.obj_video_container.prev();\n        this.update(media_current);\n    }\n    nextFrame() {\n        this.currentPageSave();\n        this.update(this.obj_video_container.next());\n    }\n    update(d) {\n        if (d) {\n            console.debug(\"main panel: update to\", d);\n            this.set_progress_play(d.progress);\n            this.obj_canvas_container.page_load(d.frame);\n            this.obj_canvas_panel.page_load(d.frame);\n        }\n    }\n    prevLabel() {\n        this.currentPageSave();\n        let vc = this.obj_video_container;\n        let f = this.data_usr_label.before_page(vc.get_current_frame());\n        if (!!f) {\n            vc.set_current_frame(f);\n            this.update(vc.get_current_all());\n        }\n        else {\n            this.obj_ui.message(\"无标注信息\", false);\n        }\n    }\n    nextLabel() {\n        this.currentPageSave();\n        let vc = this.obj_video_container;\n        let f = this.data_usr_label.after_page(vc.get_current_frame());\n        if (!!f) {\n            vc.set_current_frame(f);\n            this.update(vc.get_current_all());\n        }\n        else {\n            this.obj_ui.message(\"无标注信息\", false);\n        }\n    }\n    currentPageSave() {\n        // let cc = this.ref_canvas_container\n        // if (cc.get_page_is_modified()) {\n        //     this.usr_label_data.set_page(cc.get_current_page(), cc.get_page_data())\n        //     console.log(\"current page save\")\n        // }\n    }\n    osd_auto_update_start() {\n        let t = this.timer_osd_update;\n        if (t) {\n            // console.info(\"Timer.osd stop 1\")\n            t.stop();\n        }\n        else {\n            t = new myTimer.Timer(this.osd_manual_update.bind(this));\n            this.timer_osd_update = t;\n        }\n        // console.info(\"Timer.osd start\")\n        let refresh = Math.floor(500 / this.data_media_info.fps);\n        if (refresh < 20) {\n            refresh = 20;\n        }\n        t.start(refresh);\n    }\n    osd_auto_update_stop() {\n        if (this.timer_osd_update) {\n            this.timer_osd_update.stop();\n        }\n    }\n    osd_manual_update() {\n        let info = this.get_current_play_info();\n        this.obj_canvas_container.page_load(info.frame);\n        this.set_progress_play(info.progress);\n    }\n    control_bar_create() {\n        let videoControlCenter = $(\"<div class='row'/>\").height(40);\n        let videoPlaytime = $(\"<div/>\").text(`0:00.000 / ${this.data_format_duration}`);\n        // Left control\n        let btnPlay = $(\"<button class='btn btn-info videoBtn'/>\").html('<i class=\"fas fa-play-circle\"></i>');\n        let btnStop = $(\"<button class='btn btn-info videoBtn'/>\").html('<i class=\"fas fa-stop-circle\"></i>');\n        let btnPFra = $(\"<button class='btn btn-info videoBtn'/>\").html('<i class=\"fas fa-arrow-alt-circle-left\"></i>');\n        let btnNFra = $(\"<button class='btn btn-info videoBtn'/>\").html('<i class=\"fas fa-arrow-alt-circle-right\"></i>');\n        let btnPLab = $(\"<button class='btn btn-info videoBtn'/>\").html('<i class=\"fas fa-chevron-circle-left\"></i>');\n        let btnNLab = $(\"<button class='btn btn-info videoBtn'/>\").html('<i class=\"fas fa-chevron-circle-right\"></i>');\n        let LA = $(\"<div class='col-md-5 btn-group videoControl'/>\").append(btnPlay).append(btnStop).append(btnPFra).append(btnNFra).append(btnPLab).append(btnNLab);\n        // Right control\n        let btnLoop = $(\"<input />\").attr(\"type\", \"checkbox\").attr(\"name\", \"videoLoopEnable\").attr(\"value\", \"loop\");\n        let labelLoop = $(\"<div />\").append(btnLoop).append(`  循环`);\n        let RA = $(\"<div class='col-md-1 align-self-center text-center'/>\").append(labelLoop);\n        // Middle\n        let MA = $(\"<div class='col-md-6 videoControl align-self-center text-center' />\").append(videoPlaytime);\n        videoControlCenter.append(LA).append(MA).append(RA);\n        if (this.flag_video_mode) {\n            btnPlay.on(\"click\", () => {\n                this.play();\n            });\n            btnStop.on(\"click\", () => {\n                this.stop();\n            });\n            btnPFra.on(\"click\", () => {\n                this.prevFrame();\n            });\n            btnNFra.on(\"click\", () => {\n                this.nextFrame();\n            });\n            btnPLab.on(\"click\", () => {\n                this.prevLabel();\n            });\n            btnNLab.on(\"click\", () => {\n                this.nextLabel();\n            });\n            btnLoop.attr(\"checked\", \"checked\").on(\"click\", () => {\n                this.obj_video_container.set_loop(!this.obj_video_container.get_loop());\n            });\n        }\n        else {\n            btnPlay.addClass(\"disabled\");\n            btnStop.addClass(\"disabled\");\n            btnPFra.addClass(\"disabled\");\n            btnNFra.addClass(\"disabled\");\n            btnPLab.addClass(\"disabled\");\n            btnNLab.addClass(\"disabled\");\n            btnLoop.addClass(\"disabled\");\n        }\n        this.ref_main.append(videoControlCenter);\n        this.ref_btn_play = btnPlay;\n        this.ref_btn_stop = btnStop;\n        this.ref_btn_prev = btnPFra;\n        this.ref_btn_next = btnNFra;\n        this.ref_btn_next_label = btnNLab;\n        this.ref_btn_prev_label = btnPLab;\n        this.ref_btn_loop = btnLoop;\n        this.ref_video_playtime = videoPlaytime;\n    }\n    set_progress_buffer(percent) {\n        this.ref_pg_buffer.css(\"width\", `${percent}%`);\n    }\n    set_progress_play(percent) {\n        var _a;\n        let progress = Math.floor(percent * 10000) / 100;\n        let p = `${progress}%`;\n        if (this.ref_pg_play_str && this.ref_pg_play) {\n            this.ref_pg_play_str.text(p); //进度条文字进度\n            this.ref_pg_play.css(\"width\", p); //调整控制条长度\n            let t = common.TimeFormat(this.obj_video_container.get_current_time());\n            (_a = this.ref_video_playtime) === null || _a === void 0 ? void 0 : _a.text(`${t} / ${this.data_format_duration}`);\n        }\n    }\n    pg_bar_create() {\n        let bg = $(\"<div class='progress videoProgressBackground'/>\");\n        let pp = $(\"<div class='progress-bar bg-primary progress-bar-striped videoProgressFront'/>\").css(\"width\", 0);\n        let pb = $(\"<div class='progress-bar bg-warning videoProgressFront'/>\").css(\"width\", 0);\n        let str = $(\"<span />\").addClass('videoProgressStr').text(\"0%\");\n        pp.append(str);\n        bg.append(pb).append(pp).on(\"click\", (e) => {\n            let obj = this.ref_bg;\n            let x = e.pageX - obj.offset().left;\n            let w = x / obj.width();\n            this.set_progress_play(w);\n            this.update(this.obj_video_container.set_progress(w));\n        });\n        this.ref_main.append(bg);\n        this.ref_bg = bg;\n        this.ref_pg_play = pp;\n        this.ref_pg_play_str = str;\n        this.ref_pg_buffer = pb;\n    }\n    pg_tag_create() {\n        let bg = $('<div class=\"bg-gray\"/>').height(10);\n        this.ref_main.append(bg);\n    }\n    pg_buffer_monitor() {\n        let buf = this.obj_video_container.get_video_buffered_percentage();\n        if (buf > 0) {\n            this.obj_ui.message(`载入进度1：${buf}%`, true);\n        }\n        this.set_progress_buffer(buf);\n        return (buf >= 100);\n    }\n}\nexports.MainPanel = MainPanel;\n/**\n * 退离函数，处理交互退出相关任务\n * @constructor\n */\nfunction LabelToolSystemExit() {\n    window.onbeforeunload = null;\n    media_lock_timer.unlock(() => {\n        window.close();\n    });\n}\nconst url_info = common.AnalysisURL(CURRENT_PAGE_URL);\nconst url_api_media_root = `${api_root}/labelsys/${url_info.path_class}/index/${url_info.path_indexer}`;\nconst url_media_info = `${url_api_media_root}/info/full`;\ncommon.GetData(url_media_info).then((resp) => {\n    toastr.info(\"初始化中……\");\n    let media_info = resp;\n    if (media_info.code !== 200) {\n        toastr.error(\"数据初始化异常\");\n        console.error(\"信息：\", media_info.msg, url_media_info);\n    }\n    else {\n        let data = media_info.data;\n        MEDIA_SCALE = data.width / data.height;\n        let label_stor = new labelsys_data_1.LabelData(url_api_media_root, url_info);\n        label_stor.DownloadCrf().then(() => {\n            ref_main_panel = new MainPanel($(\"#main-content\"), data, label_stor, url_api_media_root);\n            media_lock_timer = new myTimer.MediaLockerObj(MEDIA_LOCK_INTERVAL, `${url_api_media_root}/lock`);\n            ref_main_panel.on_crf_ready();\n            label_stor.DownloadUsr().then(() => {\n                ref_main_panel.on_usr_ready();\n            });\n        });\n        // 退出响应\n        window.onbeforeunload = () => {\n            // mlocker.unlock();\n            return \"确认关闭标注界面么？\";\n        };\n        // 右键响应\n        $(document.body).on(\"contextmenu\", () => {\n            return false;\n        });\n        // mlocker.lock()// 媒体定时锁\n        // mp.init()// 初始化界面\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/labelsys/entry.ts\n");

/***/ }),

/***/ "./src/labelsys/labelsys_buttons.ts":
/*!******************************************!*\
  !*** ./src/labelsys/labelsys_buttons.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Button = exports.CanvasButtonGroup = void 0;\nconst jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"));\nconst common_1 = __webpack_require__(/*! ../common/common */ \"./src/common/common.ts\");\n/**\n * 按钮组父类\n */\nclass CanvasButtonGroup {\n    constructor(canvas_panel, title, open, group_title_circle_color, btns_default_color, func_l, func_r) {\n        this.obj_buttons = new Map();\n        this.data_count = 0;\n        this.data_select = \"\";\n        this.crfs = new Map();\n        this.def_group_buttons_color = btns_default_color;\n        if (func_l) {\n            this.func_on_btn_click_l = func_l;\n        }\n        if (func_r) {\n            this.func_on_btn_click_r = func_r;\n        }\n        let nav = (0, jquery_1.default)('<li class=\"nav-item\" />');\n        if (open) {\n            nav.addClass(\"menu-open\");\n        }\n        let cColor;\n        switch (group_title_circle_color) {\n            case \"red\":\n                cColor = \"text-danger\";\n                break;\n            case \"yellow\":\n                cColor = \"text-warning\";\n                break;\n            default:\n                cColor = \"text-info\";\n        }\n        let header = (0, jquery_1.default)(`<a href=\"#\" class=\"nav-link\"><i class=\"nav-icon far fa-circle ${cColor}\"></i><p>${title}</p><i class=\"fas fa-angle-left right\"></i></a>`);\n        let tree = (0, jquery_1.default)('<ul class=\"nav nav-treeview\"></ul>');\n        nav.append(header).append(tree);\n        canvas_panel.ref_main.append(nav);\n        this.ref_main = tree;\n    }\n    add_buttons(btn_data) {\n        let ref_line;\n        let line_count = 0;\n        btn_data.forEach((btn) => {\n            const color = btn.color ? btn.color : this.def_group_buttons_color ? this.def_group_buttons_color : \"yellow\";\n            let obj = new Button(btn.id, btn.name, 0, btn.color, 0, this.func_on_btn_click_l, this.func_on_btn_click_r);\n            if (line_count > 2 || line_count == 0) {\n                line_count = 0;\n                ref_line = this.new_line();\n                this.ref_main.append(ref_line);\n            }\n            ref_line.append(obj.get_object());\n            this.obj_buttons.set(btn.id, obj);\n            line_count++;\n        });\n    }\n    add_input(id, rows, placeholder, submit_button_name, api) {\n        const color_btn_wait = \"#ff851b\";\n        const color_btn_submit = \"#35a728\";\n        rows = (rows) ? rows : 3;\n        const ref_form = (0, jquery_1.default)(`<textarea class=\"form-control\" id=\"${id}_textarea\" rows=\"${rows}\" placeholder=\"${placeholder}\" />`);\n        let func_onclick = () => {\n            const senddata = { media: \"\", data: ref_form.val(), direction: 'upload', admin: '' };\n            (0, common_1.PostData)(api, senddata).then((data) => {\n                if (data == undefined) {\n                    return undefined;\n                }\n                let resp = data;\n                if (resp.code == 200) {\n                    btn_submit.set_color(color_btn_submit);\n                    ref_form.val(resp.data);\n                    setTimeout(() => {\n                        btn_submit.set_color(color_btn_wait);\n                    }, 500);\n                }\n                else {\n                    toastr.error(resp.msg);\n                }\n            });\n        };\n        const btn_submit = new Button(\"submit_input\", submit_button_name, 12, color_btn_wait, 0, func_onclick, undefined);\n        btn_submit.set_color_default();\n        (0, common_1.GetData)(api).then((data) => {\n            if (data == undefined) {\n                return undefined;\n            }\n            let resp = data;\n            if (resp.code == 200) {\n                ref_form.val(resp.data);\n            }\n        });\n        this.ref_main.append(ref_form).append(btn_submit.get_object());\n        this.obj_buttons.set(id, btn_submit);\n    }\n    new_line() {\n        return (0, jquery_1.default)('<div class=\"row\"/>').css(\"margin\", 0);\n    }\n    off(id) {\n        if (id != \"\") {\n            const obj = this.obj_buttons.get(id);\n            obj === null || obj === void 0 ? void 0 : obj.set_deactivate();\n        }\n    }\n    on(id) {\n        if (id != \"\") {\n            const obj = this.obj_buttons.get(id);\n            obj === null || obj === void 0 ? void 0 : obj.set_activate();\n        }\n    }\n    hold(id) {\n        if (id != \"\") {\n            let obj = this.obj_buttons.get(id);\n            obj === null || obj === void 0 ? void 0 : obj.set_hold();\n        }\n    }\n    text(id, txt) {\n        if (id) {\n            let obj = this.obj_buttons.get(id);\n            obj === null || obj === void 0 ? void 0 : obj.set_text(txt);\n        }\n    }\n}\nexports.CanvasButtonGroup = CanvasButtonGroup;\nclass Button {\n    constructor(id, name, button_length, btn_color, word_cut, func_l, func_r) {\n        // console.log(\"create btn\",name,id,btn_color)\n        button_length = (button_length > 0) ? button_length : 4;\n        this.word_cut = (word_cut) ? word_cut : 5;\n        this.color_btn = btn_color;\n        const obj = (0, jquery_1.default)(`<button class=\"crfBtn crfBtnNone col-md-${button_length}\" title=\"${name}\"/>`);\n        obj.html(`<div id=\"name\" ></div><div id=\"id\" class=\"crfBtnId\">${id}</div>`);\n        if (func_l) {\n            obj.on(\"click\", () => {\n                func_l(id);\n            });\n        }\n        if (func_r) {\n            obj.on(\"contextmenu\", () => {\n                func_r(id);\n            });\n        }\n        this.ref_main = obj;\n        this.set_text(name);\n    }\n    set_activate() {\n        this.ref_main.removeClass(\"crfBtnNone\").removeClass(\"crfBtnHold\");\n        this.set_color_default();\n    }\n    set_deactivate() {\n        this.ref_main.removeClass(\"crfBtnHold\").addClass(\"crfBtnNone\");\n        this.remove_color();\n    }\n    set_hold() {\n        this.ref_main.removeClass(\"crfBtnNone\").addClass(\"crfBtnHold\");\n        this.set_color_default();\n    }\n    set_text(name) {\n        const content = (name.length > this.word_cut) ? `${name.substring(0, this.word_cut - 1)}…` : name;\n        this.ref_main.children(\"#name\").text(content);\n    }\n    set_color(color) {\n        if (color == undefined) {\n            this.remove_color();\n        }\n        else {\n            this.ref_main.css(\"background-color\", (color == \"def\") ? this.color_btn : color);\n        }\n    }\n    set_color_default() {\n        this.ref_main.css(\"background-color\", this.color_btn);\n    }\n    remove_color() {\n        this.ref_main.css(\"background-color\", \"\");\n    }\n    get_object() {\n        return this.ref_main;\n    }\n}\nexports.Button = Button;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/labelsys/labelsys_buttons.ts\n");

/***/ }),

/***/ "./src/labelsys/labelsys_communicate.ts":
/*!**********************************************!*\
  !*** ./src/labelsys/labelsys_communicate.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.export_usr_json = exports.import_usr_json = void 0;\nfunction import_usr_json(str) {\n    let data = { c: 0, q: 0, frames: [] };\n    if (str != \"\") {\n        data = JSON.parse(str);\n        let frames = [];\n        data.frames.forEach((frame, index) => {\n            if (frame) {\n                frames[index] = usr_format_page(frame);\n            }\n        });\n        data.frames = frames;\n    }\n    return data;\n}\nexports.import_usr_json = import_usr_json;\nfunction export_usr_json(data) {\n    let a = {};\n    // @ts-ignore\n    a[\"c\"] = data.c;\n    // @ts-ignore\n    a[\"q\"] = data.q;\n    let data_frames = [];\n    data.frames.forEach((v, f) => {\n        let t = {};\n        let p = {};\n        v.clabels.forEach((v, k) => {\n            let m = {};\n            v.cPoints.forEach((v, k) => {\n                // @ts-ignore\n                m[k] = v;\n            });\n            let n = {};\n            // @ts-ignore\n            n[\"cPoints\"] = m;\n            // @ts-ignore\n            p[k] = n;\n        });\n        // @ts-ignore\n        t[\"cid\"] = v.cid;\n        // @ts-ignore\n        t[\"q\"] = v.q;\n        // @ts-ignore\n        t[\"clabels\"] = p;\n        // @ts-ignore\n        t[\"cframe\"] = v.cframe;\n        // @ts-ignore\n        t[\"ctime\"] = v.ctime;\n        // @ts-ignore\n        t[\"cdescribe\"] = v.cdescribe;\n        data_frames[f] = t;\n    });\n    // @ts-ignore\n    a[\"frames\"] = data_frames;\n    return JSON.stringify(a);\n}\nexports.export_usr_json = export_usr_json;\nfunction usr_format_page(data) {\n    let ret = data;\n    ret.clabels = usr_format_labels(data.clabels);\n    return ret;\n}\nfunction usr_format_labels(data) {\n    let lp = new Map();\n    for (let i in data) {\n        lp.set(i, usr_format_meta(data[i]));\n    }\n    return lp;\n}\nfunction usr_format_meta(data) {\n    let ret = data;\n    ret.cPoints = usr_format_points(data.cPoints);\n    return ret;\n}\nfunction usr_format_points(data) {\n    let ret = new Map();\n    for (let k in data) {\n        let e = data[k];\n        ret.set(k, e);\n    }\n    return ret;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGFiZWxzeXMvbGFiZWxzeXNfY29tbXVuaWNhdGUudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2xhYmVsc3lzL2xhYmVsc3lzX2NvbW11bmljYXRlLnRzP2Y5MjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4cG9ydF91c3JfanNvbiA9IGV4cG9ydHMuaW1wb3J0X3Vzcl9qc29uID0gdm9pZCAwO1xuZnVuY3Rpb24gaW1wb3J0X3Vzcl9qc29uKHN0cikge1xuICAgIGxldCBkYXRhID0geyBjOiAwLCBxOiAwLCBmcmFtZXM6IFtdIH07XG4gICAgaWYgKHN0ciAhPSBcIlwiKSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKHN0cik7XG4gICAgICAgIGxldCBmcmFtZXMgPSBbXTtcbiAgICAgICAgZGF0YS5mcmFtZXMuZm9yRWFjaCgoZnJhbWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoZnJhbWUpIHtcbiAgICAgICAgICAgICAgICBmcmFtZXNbaW5kZXhdID0gdXNyX2Zvcm1hdF9wYWdlKGZyYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRhdGEuZnJhbWVzID0gZnJhbWVzO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbmV4cG9ydHMuaW1wb3J0X3Vzcl9qc29uID0gaW1wb3J0X3Vzcl9qc29uO1xuZnVuY3Rpb24gZXhwb3J0X3Vzcl9qc29uKGRhdGEpIHtcbiAgICBsZXQgYSA9IHt9O1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBhW1wiY1wiXSA9IGRhdGEuYztcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYVtcInFcIl0gPSBkYXRhLnE7XG4gICAgbGV0IGRhdGFfZnJhbWVzID0gW107XG4gICAgZGF0YS5mcmFtZXMuZm9yRWFjaCgodiwgZikgPT4ge1xuICAgICAgICBsZXQgdCA9IHt9O1xuICAgICAgICBsZXQgcCA9IHt9O1xuICAgICAgICB2LmNsYWJlbHMuZm9yRWFjaCgodiwgaykgPT4ge1xuICAgICAgICAgICAgbGV0IG0gPSB7fTtcbiAgICAgICAgICAgIHYuY1BvaW50cy5mb3JFYWNoKCh2LCBrKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIG1ba10gPSB2O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgbiA9IHt9O1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgbltcImNQb2ludHNcIl0gPSBtO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcFtrXSA9IG47XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRbXCJjaWRcIl0gPSB2LmNpZDtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0W1wicVwiXSA9IHYucTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0W1wiY2xhYmVsc1wiXSA9IHA7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdFtcImNmcmFtZVwiXSA9IHYuY2ZyYW1lO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRbXCJjdGltZVwiXSA9IHYuY3RpbWU7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdFtcImNkZXNjcmliZVwiXSA9IHYuY2Rlc2NyaWJlO1xuICAgICAgICBkYXRhX2ZyYW1lc1tmXSA9IHQ7XG4gICAgfSk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFbXCJmcmFtZXNcIl0gPSBkYXRhX2ZyYW1lcztcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYSk7XG59XG5leHBvcnRzLmV4cG9ydF91c3JfanNvbiA9IGV4cG9ydF91c3JfanNvbjtcbmZ1bmN0aW9uIHVzcl9mb3JtYXRfcGFnZShkYXRhKSB7XG4gICAgbGV0IHJldCA9IGRhdGE7XG4gICAgcmV0LmNsYWJlbHMgPSB1c3JfZm9ybWF0X2xhYmVscyhkYXRhLmNsYWJlbHMpO1xuICAgIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiB1c3JfZm9ybWF0X2xhYmVscyhkYXRhKSB7XG4gICAgbGV0IGxwID0gbmV3IE1hcCgpO1xuICAgIGZvciAobGV0IGkgaW4gZGF0YSkge1xuICAgICAgICBscC5zZXQoaSwgdXNyX2Zvcm1hdF9tZXRhKGRhdGFbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGxwO1xufVxuZnVuY3Rpb24gdXNyX2Zvcm1hdF9tZXRhKGRhdGEpIHtcbiAgICBsZXQgcmV0ID0gZGF0YTtcbiAgICByZXQuY1BvaW50cyA9IHVzcl9mb3JtYXRfcG9pbnRzKGRhdGEuY1BvaW50cyk7XG4gICAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHVzcl9mb3JtYXRfcG9pbnRzKGRhdGEpIHtcbiAgICBsZXQgcmV0ID0gbmV3IE1hcCgpO1xuICAgIGZvciAobGV0IGsgaW4gZGF0YSkge1xuICAgICAgICBsZXQgZSA9IGRhdGFba107XG4gICAgICAgIHJldC5zZXQoaywgZSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/labelsys/labelsys_communicate.ts\n");

/***/ }),

/***/ "./src/labelsys/labelsys_container.ts":
/*!********************************************!*\
  !*** ./src/labelsys/labelsys_container.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CanvasContainer = exports.VideoContainer = exports.MediaContainer = exports.BasicContainer = void 0;\n__webpack_require__(/*! toastr */ \"./node_modules/toastr/toastr.js\");\nconst jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"));\nconst hls_js_1 = __importDefault(__webpack_require__(/*! hls.js */ \"./node_modules/hls.js/dist/hls.js\"));\n// @ts-ignore\nconst toastr = __importStar(__webpack_require__(/*! toastr/build/toastr.min.js */ \"./node_modules/toastr/build/toastr.min.js\"));\nconst labelsys_parts_1 = __webpack_require__(/*! ./labelsys_parts */ \"./src/labelsys/labelsys_parts.ts\");\nconst XMLNS = \"http://www.w3.org/2000/svg\";\n/**\n * 容器父类\n */\nclass BasicContainer {\n    constructor(ref_parent, id) {\n        const container = (0, jquery_1.default)(`<div id=\"${id}\"/>`);\n        ref_parent.append(container);\n        this.ref_main = container;\n    }\n    set_window_info(data) {\n        let obj = this.ref_main;\n        obj.width(`${data.width}px`);\n        obj.height(`${data.height}px`);\n        obj.css(\"top\", `${data.top}px`);\n        obj.css(\"left\", `${data.left}px`);\n        this.onResize();\n    }\n    get_window_info() {\n        let obj = this.ref_main;\n        let width = obj.width();\n        let height = obj.height();\n        if (width && height) {\n            return {\n                width: width,\n                height: height,\n                left: obj.position().left,\n                top: obj.position().top,\n            };\n        }\n        else {\n            return {\n                width: 0,\n                height: 0,\n                left: 0,\n                top: 0\n            };\n        }\n    }\n    onResize() {\n    }\n}\nexports.BasicContainer = BasicContainer;\n/**\n * 媒体容器，包含视频及标注容器，主要用于自适应尺寸变更及一致性保护\n */\nclass MediaContainer extends BasicContainer {\n    constructor(ref_parent, id, height) {\n        super(ref_parent, id);\n        this.ref_main.height(height).addClass(\"lsWorkspaceBG\");\n    }\n}\nexports.MediaContainer = MediaContainer;\n/**\n * 视频容器\n */\nclass VideoContainer extends BasicContainer {\n    constructor(ref_parent, id, media_info, show_controls, func_on_time_update) {\n        super(ref_parent, id);\n        this.id_video_player = \"video\";\n        this.flag_loop = true;\n        this.flag_metadata_loaded = false;\n        this.data_frames_times = [];\n        this.data_current_frame = 0;\n        this.ref_main.css(\"z-index\", 1).height(\"100%\").width(\"100%\").addClass(\"lsWorkspaceOverlay\").css(\"margin\", \"0 auto\");\n        this.data_media_info = media_info;\n        // create player\n        const player = (0, jquery_1.default)(`<video id='${this.id_video_player}' style='height: 100%;width: 100%' preload='auto'/>`).on(\"ended\", () => {\n            this.flag_loop ? this.play() : this.stop();\n        });\n        this.ref_video_player = player[0];\n        this.func_on_time_update = func_on_time_update;\n        if (show_controls) {\n            player.attr(\"controls\", \"controls\");\n        }\n        this.ref_main.append(player);\n        this.init_frames_times();\n        if (media_info.url != \"\") {\n            this.video_load(media_info.url, media_info.must_hls);\n        }\n        else {\n            toastr.error(\"数据异常，未找到视频\");\n        }\n    }\n    video_load(url, use_hls) {\n        const video = this.ref_video_player;\n        if (use_hls && hls_js_1.default.isSupported()) {\n            console.debug(\"video load by hls:\", url);\n            let hls = new hls_js_1.default();\n            hls.loadSource(url);\n            hls.attachMedia(video);\n            hls.on(hls_js_1.default.Events.MANIFEST_PARSED, () => {\n                this.set_flag_metaloaded(true);\n            });\n        }\n        else {\n            console.debug(\"video load by H5:\", url);\n            // if (video.canPlayType('application/vnd.apple.mpegurl')) {\n            video.setAttribute(\"type\", \"video/ogv\");\n            video.src = url;\n            (0, jquery_1.default)(video).on(\"loadedmetadata\", () => {\n                let player = this.ref_video_player;\n                let inv = setInterval(() => {\n                    let dur = player.duration;\n                    if (dur == Infinity) {\n                        player.currentTime = 0.01;\n                        console.debug(\"强制跳转：duration=infinity\");\n                        return;\n                    }\n                    let progress = dur / this.data_media_info.duration * 100;\n                    // ui.popupContent = `载入进度：${progress.toFixed(1)}%`\n                    // console.log(\"loading media: progress=\", progress)\n                    // 判断加载进度\n                    if (progress > 60 || this.data_media_info.duration < 1) {\n                        // console.log(\"loading media: finished\")\n                        clearInterval(inv);\n                        player.currentTime = 0;\n                        this.set_flag_metaloaded(true);\n                        this.init_frames_times();\n                        // mainPanel.vc.onMetaLoaded()\n                    }\n                }, 500);\n            });\n        }\n    }\n    set_frames_data(data) {\n        this.data_frames_times = data;\n    }\n    get_frames_data() {\n        return this.data_frames_times;\n    }\n    set_flag_metaloaded(b) {\n        this.flag_metadata_loaded = b;\n    }\n    get_flag_metaloaded() {\n        return this.flag_metadata_loaded;\n    }\n    convert_frame_to_time(frame) {\n        if (frame < 0) {\n            return 0;\n        }\n        const t = frame / this.data_media_info.fps;\n        console.debug(\"conv f2t\", frame, t);\n        return t;\n    }\n    convert_time_to_frame(second) {\n        if (second < 0) {\n            return 0;\n        }\n        let frame = Math.floor(second * this.data_media_info.fps);\n        console.debug(\"conv s2f:\", second, frame);\n        return frame;\n    }\n    init_frames_times() {\n        const frames = this.data_media_info.frames;\n        // console.log(`frames init ${frames}f`)\n        if (!frames) {\n            // 图片模式\n            this.set_frames_data([0]);\n        }\n        else {\n            // 视频模式 生成帧对应时间\n            let step = parseFloat((1 / this.data_media_info.fps).toFixed(6));\n            let data = [];\n            for (let i = 0; i < this.data_media_info.duration; i += step) {\n                data.push(i);\n            }\n            this.set_frames_data(data);\n        }\n    }\n    get_video_size() {\n        let p = this.ref_video_player;\n        return { \"width\": p.videoWidth, \"height\": p.videoHeight };\n    }\n    set_loop(b) {\n        this.flag_loop = b;\n    }\n    get_loop() {\n        return this.flag_loop;\n    }\n    get_progress() {\n        const ct = this.ref_video_player.currentTime;\n        const cc = this.data_media_info.duration;\n        return ct / cc;\n    }\n    get_current_time() {\n        return this.ref_video_player.currentTime;\n    }\n    get_current_frame() {\n        return this.data_current_frame;\n    }\n    get_time_from_frame(f) {\n        const db = this.data_frames_times;\n        f = (f > db.length) ? db.length : (f < 0) ? 0 : f;\n        // console.log(\"get_time_from_frame\", f, time)\n        return db[f];\n    }\n    set_progress(p) {\n        p = (p < 0) ? 0 : (p > 1) ? 1 : p;\n        const target_frame = Math.floor(p * this.data_media_info.frames);\n        this.set_current_frame(target_frame);\n        return this.get_current_all();\n    }\n    set_current_time(second) {\n        // console.warn(\"set_current_time\", second)\n        let player = this.ref_video_player;\n        player.currentTime = second;\n        return this.get_current_all();\n    }\n    set_current_frame(f) {\n        f = (f < 0) ? 0 : (f > this.data_media_info.frames) ? this.data_media_info.frames : f;\n        const t = this.get_time_from_frame(f);\n        console.log(\"set current frame:\", f, \"time:\", t);\n        this.data_current_frame = f;\n        this.func_on_time_update(f);\n        this.set_current_time(t);\n        return this.get_current_all();\n    }\n    get_current_all() {\n        return { frame: this.get_current_frame(), time: this.get_current_time(), progress: this.get_progress() };\n    }\n    play() {\n        let p = this.ref_video_player;\n        if (p.paused || p.ended) {\n            if (p.ended) {\n                p.currentTime = 0;\n            }\n            this.timer_video_player = setInterval(() => {\n                const f = Math.round(this.get_progress() * this.data_media_info.frames);\n                this.data_current_frame = f;\n                this.func_on_time_update(f);\n            }, 500 / this.data_media_info.fps);\n            p.play();\n            return true;\n        }\n        else {\n            this.pause();\n            return false;\n        }\n    }\n    pause() {\n        if (this.timer_video_player > 0) {\n            clearInterval(this.timer_video_player);\n        }\n        this.ref_video_player.pause();\n    }\n    stop() {\n        if (this.timer_video_player > 0) {\n            clearInterval(this.timer_video_player);\n        }\n        this.ref_video_player.pause();\n        this.set_current_frame(0);\n    }\n    next() {\n        if (!this.ref_video_player.paused) {\n            this.pause();\n        }\n        let f = this.get_current_frame() + 1;\n        this.set_current_frame(f);\n        return this.get_current_all();\n    }\n    prev() {\n        if (!this.ref_video_player.paused) {\n            this.pause();\n        }\n        let f = this.get_current_frame();\n        f = (f > 0) ? f - 1 : 0;\n        this.set_current_frame(f);\n        return this.get_current_all();\n    }\n    jump_to(frame) {\n        if (!this.ref_video_player.paused) {\n            this.pause();\n        }\n        this.set_current_frame(frame);\n        return this.get_current_all();\n    }\n    get_video_buffered_percentage() {\n        const buffered = this.ref_video_player.buffered;\n        if (buffered.length) {\n            return buffered.end(0) / this.data_media_info.duration;\n        }\n        else {\n            return 0;\n        }\n    }\n}\nexports.VideoContainer = VideoContainer;\n/**\n * 标注容器\n */\nclass CanvasContainer extends BasicContainer {\n    constructor(ref_parent, id, main_panel, usr_label_stor) {\n        super(ref_parent, id);\n        this.DEF_MODE_DISABLE = \"d\";\n        this.DEF_MODE_CREATE = \"c\";\n        this.DEF_MODE_MODIFY = \"m\";\n        this.DEF_MODE_POINT = 'p';\n        this.DEF_MODE_ENABLE = \"e\";\n        this.current_mode = \"\";\n        this.flag_page_is_modified = false;\n        this.activate_id = \"\";\n        this.data_page_current = 0;\n        this.data_page_parts = new Map();\n        this.current_mode = this.DEF_MODE_DISABLE;\n        this.ref_main_panel = main_panel;\n        this.usr_label_stor = usr_label_stor;\n        this.data_point_template = [];\n        this.page_load(0);\n        this.ref_main.css(\"z-index\", 2).addClass(\"lsWorkspaceOverlay\").css(\"left\", 0).css(\"top\", 0);\n    }\n    get_page_is_modified() {\n        return this.flag_page_is_modified;\n    }\n    set_page_is_modified(b) {\n        this.flag_page_is_modified = b;\n    }\n    get_canvas_hidden() {\n        return this.ref_main.css(\"display\") === \"none\";\n    }\n    get_current_page() {\n        return this.data_page_current;\n    }\n    set_current_page(page) {\n        this.data_page_current = page;\n    }\n    get_page_ids() {\n        let t = [];\n        let k = this.data_page_parts.keys();\n        while (1) {\n            let d = k.next();\n            t.push(d.value);\n            if (d.done) {\n                break;\n            }\n        }\n        return t;\n    }\n    page_new() {\n        this.svg.empty();\n        this.set_page_is_modified(false);\n        this.data_page_parts = new Map;\n    }\n    /**\n     * 加载页数据\n     * @param page 页号\n     */\n    page_load(page) {\n        // pageLoad(null)\n        if (page == null) {\n            page = this.get_current_page();\n        }\n        // console.debug(\"canvas count.: load page:\", page)\n        this.page_new();\n        this.set_current_page(page);\n        // let page_data = this.label_storage.get_page(page)\n        // console.log(\"pdata\", page_data)\n        // this.set_page_data(page_data)\n        let data = this.usr_label_stor.get_page(page);\n        if (data) {\n            console.groupCollapsed(\"page draw part\", data);\n            data.clabels.forEach((value, id) => {\n                console.info(\"draw part:\", id, value);\n                const crf_data = this.usr_label_stor.get_crf_data(id);\n                if (crf_data) {\n                    const color = crf_data.color;\n                    let p = new labelsys_parts_1.PolyPart(id, this, color);\n                    p.set_point_data(value.cPoints);\n                    p.redraw();\n                    this.data_page_parts.set(id, p);\n                }\n            });\n            console.groupEnd();\n        }\n    }\n    page_save() {\n        // console.groupCollapsed(\"page save:\", this.data_page_current, this.get_page_data())\n        // this.label_storage.set_page(this.get_current_page(), this.get_page_data())\n        this.usr_label_stor.upload();\n        this.page_load(null);\n        // console.groupEnd()\n    }\n    set_page_time_label(id, describe, time) {\n        // console.warn(\"page set time\", id, describe, time)\n        const page = this.get_current_page();\n        const stor = this.usr_label_stor;\n        let data = stor.get_page(page);\n        describe = (id == \"SPEC\") ? describe : id;\n        if (!data) {\n            data = { cdescribe: describe, cid: id, ctime: time, clabels: new Map(), q: 0 };\n            stor.set_page(page, data);\n        }\n        else {\n            data.cid = id;\n            data.cdescribe = describe;\n            data.ctime = time;\n            stor.set_page(page, data);\n        }\n    }\n    get_page_time_label() {\n        const page = this.get_current_page();\n        const data = this.usr_label_stor.get_page(page);\n        console.log(\"usr_label_stor\", this.usr_label_stor, data, page);\n        if (data) {\n            return data.cdescribe;\n        }\n        else {\n            return null;\n        }\n    }\n    // save_part(id: string, data: any) {\n    //     console.log(\"page save part\", id, data)\n    //     this.data_page_data.set(id, data)\n    //     this.page_save()\n    //     this.ref_main_panel.ref_canvas_panel.set_button(id, \"on\",\"\")\n    //\n    //     this.page_load(this.get_current_page())\n    // }\n    hide_all_parts() {\n        this.ref_main.hide();\n    }\n    show_all_parts() {\n        this.ref_main.show();\n    }\n    has_part(id) {\n        return this.data_page_parts.has(id);\n    }\n    get_part(id) {\n        return this.data_page_parts.get(id);\n    }\n    del_part(id) {\n        console.log(\"cc remove part\", id);\n        let part = this.data_page_parts.get(id);\n        if (!part) {\n            return;\n        }\n        part.deactivate();\n        part.remove();\n        this.data_page_parts.delete(id);\n        this.set_page_is_modified(true);\n        let page_data = this.usr_label_stor.get_page(this.get_current_page());\n        if (page_data) {\n            page_data.clabels.delete(id);\n            this.usr_label_stor.set_page(this.get_current_page(), page_data);\n        }\n    }\n    update_part(id, part_label_data) {\n        console.log(\"canvas update\", id, part_label_data);\n        const page = this.get_current_page();\n        let page_data = this.usr_label_stor.get_page(page);\n        if (page_data) {\n            page_data.clabels.set(id, part_label_data);\n            this.usr_label_stor.set_page(page, page_data);\n        }\n        else {\n            alert(\"no page 821\");\n        }\n    }\n    get_activates() {\n        let ids = new Map;\n        this.data_page_parts.forEach((v, id) => {\n            if (v.get_is_activate()) {\n                ids.set(id, true);\n            }\n            else {\n                ids.set(id, false);\n            }\n        });\n        return ids;\n    }\n    // 重做Part\n    redo() {\n        console.warn(\"disable redo\");\n        // switch (this.current_mode) {\n        //     case this.DEF_MODE_CREATE:\n        //         let activate_id = this.get_activate_id()\n        //         let tmp = this.data_page_parts.get(activate_id)\n        //         if (!tmp) {return}\n        //         console.log(\"CanvasContainer.redo()\")\n        //         let flg = tmp.pointRedo()\n        //         if (!flg) {\n        //             break\n        //         }\n        //         let points = tmp.points_get_all()\n        //         let keys = points.keys()\n        //         let id = \"\"\n        //         while (true) {\n        //             let o = keys.next()\n        //             console.log(\"o = \", o)\n        //             if (o.done) {\n        //                 break\n        //             }\n        //             id = o.value\n        //         }\n        //         let p = points.get(id)\n        //         if (p) {\n        //             p = tmp.WHtoXY(p)\n        //         }\n        //\n        //         let obj = tmp.new_svg(\"circle\").attr(\"cx\", `${p.x}`).attr(\"cy\", `${p.y}`).attr(\"id\", id)\n        //             .attr(\"r\", 3.2).attr(\"fill\", \"red\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5)\n        //             .hover(tmp.onAttention)\n        //             .click(tmp.pointOnClick.bind(tmp))\n        //             .contextmenu(tmp.pointOnContext.bind(tmp))\n        //         tmp.mainObj.parent().append(obj);\n        //         break\n        //     default:\n        //         ui.message('仅在creat模式下允许重做,当前模式为：' + this.current_mode, true)\n        // }\n    }\n    // 撤销Part\n    undo() {\n        console.warn(\"disable undo\");\n        // switch (this.current_mode) {\n        //     case this.DEF_MODE_CREATE:\n        //         console.log(\"CanvasContainer.undo()\")\n        //         let obj = this.data_page_parts.get(this.get_activate_id())\n        //         if (obj) {\n        //             let flg = obj.pointUndo()\n        //             if (flg) {\n        //                 this.obj_main[0].firstElementChild.lastElementChild.remove()\n        //             }\n        //         }\n        //\n        //         break\n        //     default:\n        //         console.error('仅在creat模式下允许撤销,当前模式为：' + this.current_mode, true)\n        // }\n    }\n    // 批量清除部件\n    remove(id) {\n        let p = this.data_page_parts;\n        switch (id) {\n            case \"activate\":\n                p.forEach((v, id) => {\n                    if (v.get_is_activate()) {\n                        this.del_part(id);\n                    }\n                });\n                break;\n            case \"all\":\n                p.forEach((v, id) => {\n                    this.del_part(id);\n                });\n                break;\n            default:\n                this.del_part(id);\n        }\n    }\n    get svg() {\n        if (!this.ref_svg) {\n            let obj = document.createElementNS(XMLNS, \"svg\");\n            let o = (0, jquery_1.default)(obj).attr(\"width\", \"100%\").attr(\"height\", \"100%\");\n            this.ref_main.append(o);\n            this.ref_svg = o;\n        }\n        return this.ref_svg;\n    }\n    createCommon(id, color) {\n        let obj = new labelsys_parts_1.PolyPart(id, this, color);\n        this.data_page_parts.set(id, obj);\n    }\n    do_on_l_click(e) {\n        switch (this.current_mode) {\n            case this.DEF_MODE_CREATE:\n                // console.log(\"create_point for\",this.get_activate_id())\n                let obj = this.data_page_parts.get(this.get_activate_id());\n                if (obj) {\n                    obj.set_is_modified(true);\n                    // 存储临时点\n                    this.data_point_template.push(obj.point_create(this.getPosition(e), null));\n                }\n                break;\n            case this.DEF_MODE_MODIFY:\n                break;\n            default:\n                toastr.warning(\"画板模式异常，请刷新页面。M=\" + this.current_mode);\n        }\n    }\n    do_on_r_click() {\n        // console.log(\"cc right click mode:\", this.current_mode)\n        switch (this.current_mode) {\n            case this.DEF_MODE_CREATE:\n            case this.DEF_MODE_MODIFY:\n                // 支持模式c 与m\n                let obj = this.data_page_parts.get(this.get_activate_id());\n                obj === null || obj === void 0 ? void 0 : obj.deactivate();\n                this.data_point_template.forEach((p) => {\n                    p.remove();\n                });\n                this.current_mode = this.DEF_MODE_DISABLE;\n                break;\n            default:\n        }\n    }\n    onResize() {\n        this.page_load(this.get_current_page());\n    }\n    getPosition(e) {\n        let left = 0, top = 0;\n        let o = this.ref_main.offset();\n        let d = this.get_window_info();\n        if (o) {\n            left = o.left;\n            top = o.top;\n        }\n        let x = (e.pageX - left);\n        let y = (e.pageY - top);\n        let w = parseFloat((x * 100 / d.width).toFixed(3));\n        let h = parseFloat((y * 100 / d.height).toFixed(3));\n        return { x, y, w, h };\n    }\n    activate(id, type, color) {\n        this.canvas_enable();\n        this.set_activate_id(id);\n        if (this.data_page_parts.has(id)) {\n            let obj = this.data_page_parts.get(id);\n            if (obj) {\n                obj.activate();\n                this.current_mode = this.DEF_MODE_MODIFY;\n            }\n        }\n        else {\n            console.log(\"creator part:\", id, type, color);\n            switch (type) {\n                case \"com\":\n                    this.createCommon(id, color);\n                    break;\n                default:\n                    alert(`Unknown type: ${type}`);\n                    return;\n            }\n            this.current_mode = this.DEF_MODE_CREATE;\n        }\n    }\n    deactivate(id) {\n        this.set_activate_id(\"\");\n        console.log(\"canvas container deactivate:\", id);\n        if (this.data_page_parts.has(id)) {\n            let obj = this.data_page_parts.get(id);\n            if (obj) {\n                console.log(\"cc found part\", obj);\n                if (!obj.deactivate()) {\n                    console.log(\"cc remove part\", id);\n                    this.del_part(id);\n                }\n            }\n        }\n        this.canvas_disable();\n    }\n    set_activate_id(id) {\n        this.activate_id = id;\n    }\n    get_activate_id() {\n        return this.activate_id;\n    }\n    canvas_enable() {\n        this.canvas_disable();\n        this.ref_main.click(this.do_on_l_click.bind(this)).contextmenu(this.do_on_r_click.bind(this));\n        console.log(\"canvas enable\");\n        this.current_mode = this.DEF_MODE_ENABLE;\n    }\n    canvas_disable() {\n        console.log(\"canvas disable\");\n        this.ref_main.off(\"click\").off(\"contextmenu\");\n        this.current_mode = this.DEF_MODE_DISABLE;\n    }\n    hideVideo() {\n        this.ref_main.css(\"background-color\", \"white\");\n    }\n}\nexports.CanvasContainer = CanvasContainer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/labelsys/labelsys_container.ts\n");

/***/ }),

/***/ "./src/labelsys/labelsys_data.ts":
/*!***************************************!*\
  !*** ./src/labelsys/labelsys_data.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LabelData = void 0;\nconst common = __importStar(__webpack_require__(/*! ../common/common */ \"./src/common/common.ts\"));\n__webpack_require__(/*! ./labelsys_communicate */ \"./src/labelsys/labelsys_communicate.ts\");\nconst labelsys_communicate_1 = __webpack_require__(/*! ./labelsys_communicate */ \"./src/labelsys/labelsys_communicate.ts\");\nconst common_1 = __webpack_require__(/*! ../common/common */ \"./src/common/common.ts\");\nconst toastr = __webpack_require__(/*! toastr */ \"./node_modules/toastr/toastr.js\");\n/**\n * 标注数据存储器\n */\nclass LabelData {\n    constructor(api_root, url_info) {\n        this.data_crf = new Map();\n        this.data_groups = new Map();\n        this.flag_init_crf = false;\n        this.flag_init_usr = false;\n        this.data_media_uuid = url_info.path_indexer;\n        this.data_media_class = url_info.path_class;\n        this.data_submit_level = url_info.path_base;\n        let crf = url_info.params.get(\"crf\");\n        let label_uuid = url_info.params.get(\"label_uuid\");\n        this.data_crf_type = crf ? crf : \"\";\n        this.data_label_uuid = label_uuid ? label_uuid : \"\";\n        this.url_server_crf = `${api_root}/label/crf?format=json`;\n        this.url_server_usr = `${api_root}/label/${this.data_submit_level}`;\n        this.data_usr = { c: 0, q: 0, frames: [] };\n    }\n    set_crf_data(data) {\n        data.forEach((v) => {\n            switch (v.type) {\n                case \"group\":\n                    this.data_groups.set(v.group, v);\n                    break;\n                default:\n                    this.data_crf.set(v.id, v);\n            }\n        });\n    }\n    get_crf_data(id) {\n        // console.log(\"CRF\",this.data.crf)\n        return this.data_crf.get(id);\n    }\n    get_crf_data_all() {\n        return this.data_crf;\n    }\n    set_usr_data(str) {\n        this.data_usr = (0, labelsys_communicate_1.import_usr_json)(str);\n    }\n    get_usr_data() {\n        let data = this.data_usr;\n        data.c = data.frames.length;\n        if (data) {\n            return (0, labelsys_communicate_1.export_usr_json)(data);\n        }\n        else {\n            return \"\";\n        }\n    }\n    get_crf_groups() {\n        return this.data_groups;\n    }\n    set_global(group, value) {\n        console.log(\"set global value:\", group, \"<-\", value);\n        switch (group) {\n            case \"q\":\n                this.data_usr.q = value;\n                break;\n            default:\n                console.error(\"unknown global:\", group);\n        }\n        this.upload();\n    }\n    get_global(group) {\n        switch (group) {\n            case \"q\":\n                return this.data_usr.q;\n            default:\n                return null;\n        }\n    }\n    set_page(page, data) {\n        // console.log(`set page=${page}:`, data)\n        this.data_usr.frames[page] = data;\n        this.upload().then((resp) => {\n            if (resp.code != 200) {\n                toastr.error(resp.msg, resp.code.toString());\n            }\n        });\n    }\n    get_page(page) {\n        if (this.has_page(page)) {\n            return this.data_usr.frames[page];\n        }\n        else {\n            return null;\n        }\n    }\n    set_page_part(page, id, data) {\n        let frame = this.data_usr.frames[page];\n        frame.clabels.set(id, data);\n        this.data_usr.frames[page] = frame;\n    }\n    crfGroup(group) {\n        let data = [];\n        this.data_crf.forEach((v) => {\n            if (v.group === group)\n                data.push(v);\n        });\n        return data;\n    }\n    get_group_data(id) {\n        return this.data_groups.get(id);\n    }\n    has_page(page) {\n        const data = this.data_usr;\n        if (this.flag_init_usr && data.frames) {\n            return (page > data.frames.length) ? false : !!data.frames[page];\n        }\n        else {\n            return false;\n        }\n    }\n    after_page(page) {\n        let t = this.data_usr.frames.length;\n        page = (page < t) ? page : 0;\n        for (let i = 0; i < t; i++) {\n            page = (page === (t - 1)) ? 0 : page + 1;\n            if (this.has_page(page))\n                return page;\n        }\n        return -1;\n    }\n    before_page(page) {\n        let t = this.data_usr.frames.length;\n        page = (page < t) ? page : t - 1;\n        for (let i = 0; i < t; i++) {\n            page = (page === 0) ? t - 1 : page - 1;\n            if (this.has_page(page))\n                return page;\n        }\n        return -1;\n    }\n    DownloadCrf() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let result = yield common.GetData(this.url_server_crf);\n            if (result.code === 200) {\n                this.set_crf_data(result.data);\n                if (!this.flag_init_crf) {\n                    // mp.onCRFFinishDownload()\n                    // this.downloadFull()\n                    this.flag_init_crf = true;\n                    console.debug(\"定义标注节点(CRF)同步完成\", this.get_crf_data_all());\n                }\n            }\n        });\n    }\n    DownloadUsr() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // console.debug(\"usr_url:\",this.url_server_usr)\n            let resp = yield common.GetData(this.url_server_usr);\n            if (resp.code === 200) {\n                // console.debug(\"dl _full:\",resp.data)\n                let data = resp.data;\n                switch (this.data_crf_type) {\n                    case \"4ap\":\n                        data = data.replace(/DA\"/g, 'DAO\"');\n                        data = data.replace(/DA_/g, 'DAO_');\n                        break;\n                    case \"van\":\n                        data = data.replace(/DA\"/g, 'DAO\"');\n                        data = data.replace(/DA_/g, 'DAO_');\n                        break;\n                }\n                this.set_usr_data(data);\n                console.debug(\"用户标注数据(USR)同步完成\", JSON.parse(this.get_usr_data()));\n                this.flag_init_usr = true;\n            }\n            else if (resp.code == 10001) {\n                console.debug(\"数据无标注\");\n                this.flag_init_usr = true;\n            }\n            else {\n                toastr.error(resp.msg, `标注数据同步错误`);\n            }\n        });\n    }\n    upload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let params = new Map();\n            params.set(\"label_uuid\", this.data_label_uuid);\n            const tmp = {\n                media: this.data_media_uuid,\n                data: this.get_usr_data(),\n                direction: 'upload',\n                admin: \"\"\n            };\n            let resp = yield (0, common_1.PostData)((0, common_1.BuildURL)(this.url_server_usr, params), tmp);\n            return resp;\n        });\n    }\n    post_author_submit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.post_user_do(\"submit\");\n        });\n    }\n    post_reviewer_confirm() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.post_user_do(\"confirm\");\n        });\n    }\n    post_reviewer_reject() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.post_user_do(\"reject\");\n        });\n    }\n    post_user_do(action) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let params = new Map();\n            params.set(\"do\", action);\n            const tmp = {\n                media: this.data_media_uuid,\n                data: this.data_label_uuid,\n                direction: 'upload',\n                admin: \"\"\n            };\n            let resp = yield (0, common_1.PostData)((0, common_1.BuildURL)(this.url_server_usr, params), tmp);\n            return resp;\n        });\n    }\n}\nexports.LabelData = LabelData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGFiZWxzeXMvbGFiZWxzeXNfZGF0YS50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGFiZWxzeXMvbGFiZWxzeXNfZGF0YS50cz9kMmZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGFiZWxEYXRhID0gdm9pZCAwO1xuY29uc3QgY29tbW9uID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuLi9jb21tb24vY29tbW9uXCIpKTtcbnJlcXVpcmUoXCIuL2xhYmVsc3lzX2NvbW11bmljYXRlXCIpO1xuY29uc3QgbGFiZWxzeXNfY29tbXVuaWNhdGVfMSA9IHJlcXVpcmUoXCIuL2xhYmVsc3lzX2NvbW11bmljYXRlXCIpO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2NvbW1vblwiKTtcbmNvbnN0IHRvYXN0ciA9IHJlcXVpcmUoXCJ0b2FzdHJcIik7XG4vKipcbiAqIOagh+azqOaVsOaNruWtmOWCqOWZqFxuICovXG5jbGFzcyBMYWJlbERhdGEge1xuICAgIGNvbnN0cnVjdG9yKGFwaV9yb290LCB1cmxfaW5mbykge1xuICAgICAgICB0aGlzLmRhdGFfY3JmID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmRhdGFfZ3JvdXBzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmZsYWdfaW5pdF9jcmYgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mbGFnX2luaXRfdXNyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGF0YV9tZWRpYV91dWlkID0gdXJsX2luZm8ucGF0aF9pbmRleGVyO1xuICAgICAgICB0aGlzLmRhdGFfbWVkaWFfY2xhc3MgPSB1cmxfaW5mby5wYXRoX2NsYXNzO1xuICAgICAgICB0aGlzLmRhdGFfc3VibWl0X2xldmVsID0gdXJsX2luZm8ucGF0aF9iYXNlO1xuICAgICAgICBsZXQgY3JmID0gdXJsX2luZm8ucGFyYW1zLmdldChcImNyZlwiKTtcbiAgICAgICAgbGV0IGxhYmVsX3V1aWQgPSB1cmxfaW5mby5wYXJhbXMuZ2V0KFwibGFiZWxfdXVpZFwiKTtcbiAgICAgICAgdGhpcy5kYXRhX2NyZl90eXBlID0gY3JmID8gY3JmIDogXCJcIjtcbiAgICAgICAgdGhpcy5kYXRhX2xhYmVsX3V1aWQgPSBsYWJlbF91dWlkID8gbGFiZWxfdXVpZCA6IFwiXCI7XG4gICAgICAgIHRoaXMudXJsX3NlcnZlcl9jcmYgPSBgJHthcGlfcm9vdH0vbGFiZWwvY3JmP2Zvcm1hdD1qc29uYDtcbiAgICAgICAgdGhpcy51cmxfc2VydmVyX3VzciA9IGAke2FwaV9yb290fS9sYWJlbC8ke3RoaXMuZGF0YV9zdWJtaXRfbGV2ZWx9YDtcbiAgICAgICAgdGhpcy5kYXRhX3VzciA9IHsgYzogMCwgcTogMCwgZnJhbWVzOiBbXSB9O1xuICAgIH1cbiAgICBzZXRfY3JmX2RhdGEoZGF0YSkge1xuICAgICAgICBkYXRhLmZvckVhY2goKHYpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAodi50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImdyb3VwXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YV9ncm91cHMuc2V0KHYuZ3JvdXAsIHYpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFfY3JmLnNldCh2LmlkLCB2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldF9jcmZfZGF0YShpZCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkNSRlwiLHRoaXMuZGF0YS5jcmYpXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFfY3JmLmdldChpZCk7XG4gICAgfVxuICAgIGdldF9jcmZfZGF0YV9hbGwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFfY3JmO1xuICAgIH1cbiAgICBzZXRfdXNyX2RhdGEoc3RyKSB7XG4gICAgICAgIHRoaXMuZGF0YV91c3IgPSAoMCwgbGFiZWxzeXNfY29tbXVuaWNhdGVfMS5pbXBvcnRfdXNyX2pzb24pKHN0cik7XG4gICAgfVxuICAgIGdldF91c3JfZGF0YSgpIHtcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmRhdGFfdXNyO1xuICAgICAgICBkYXRhLmMgPSBkYXRhLmZyYW1lcy5sZW5ndGg7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGxhYmVsc3lzX2NvbW11bmljYXRlXzEuZXhwb3J0X3Vzcl9qc29uKShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldF9jcmZfZ3JvdXBzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhX2dyb3VwcztcbiAgICB9XG4gICAgc2V0X2dsb2JhbChncm91cCwgdmFsdWUpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJzZXQgZ2xvYmFsIHZhbHVlOlwiLCBncm91cCwgXCI8LVwiLCB2YWx1ZSk7XG4gICAgICAgIHN3aXRjaCAoZ3JvdXApIHtcbiAgICAgICAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhX3Vzci5xID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJ1bmtub3duIGdsb2JhbDpcIiwgZ3JvdXApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBsb2FkKCk7XG4gICAgfVxuICAgIGdldF9nbG9iYWwoZ3JvdXApIHtcbiAgICAgICAgc3dpdGNoIChncm91cCkge1xuICAgICAgICAgICAgY2FzZSBcInFcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhX3Vzci5xO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRfcGFnZShwYWdlLCBkYXRhKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBzZXQgcGFnZT0ke3BhZ2V9OmAsIGRhdGEpXG4gICAgICAgIHRoaXMuZGF0YV91c3IuZnJhbWVzW3BhZ2VdID0gZGF0YTtcbiAgICAgICAgdGhpcy51cGxvYWQoKS50aGVuKChyZXNwKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcC5jb2RlICE9IDIwMCkge1xuICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihyZXNwLm1zZywgcmVzcC5jb2RlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0X3BhZ2UocGFnZSkge1xuICAgICAgICBpZiAodGhpcy5oYXNfcGFnZShwYWdlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YV91c3IuZnJhbWVzW3BhZ2VdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0X3BhZ2VfcGFydChwYWdlLCBpZCwgZGF0YSkge1xuICAgICAgICBsZXQgZnJhbWUgPSB0aGlzLmRhdGFfdXNyLmZyYW1lc1twYWdlXTtcbiAgICAgICAgZnJhbWUuY2xhYmVscy5zZXQoaWQsIGRhdGEpO1xuICAgICAgICB0aGlzLmRhdGFfdXNyLmZyYW1lc1twYWdlXSA9IGZyYW1lO1xuICAgIH1cbiAgICBjcmZHcm91cChncm91cCkge1xuICAgICAgICBsZXQgZGF0YSA9IFtdO1xuICAgICAgICB0aGlzLmRhdGFfY3JmLmZvckVhY2goKHYpID0+IHtcbiAgICAgICAgICAgIGlmICh2Lmdyb3VwID09PSBncm91cClcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2godik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgZ2V0X2dyb3VwX2RhdGEoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YV9ncm91cHMuZ2V0KGlkKTtcbiAgICB9XG4gICAgaGFzX3BhZ2UocGFnZSkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhX3VzcjtcbiAgICAgICAgaWYgKHRoaXMuZmxhZ19pbml0X3VzciAmJiBkYXRhLmZyYW1lcykge1xuICAgICAgICAgICAgcmV0dXJuIChwYWdlID4gZGF0YS5mcmFtZXMubGVuZ3RoKSA/IGZhbHNlIDogISFkYXRhLmZyYW1lc1twYWdlXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZnRlcl9wYWdlKHBhZ2UpIHtcbiAgICAgICAgbGV0IHQgPSB0aGlzLmRhdGFfdXNyLmZyYW1lcy5sZW5ndGg7XG4gICAgICAgIHBhZ2UgPSAocGFnZSA8IHQpID8gcGFnZSA6IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdDsgaSsrKSB7XG4gICAgICAgICAgICBwYWdlID0gKHBhZ2UgPT09ICh0IC0gMSkpID8gMCA6IHBhZ2UgKyAxO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzX3BhZ2UocGFnZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBiZWZvcmVfcGFnZShwYWdlKSB7XG4gICAgICAgIGxldCB0ID0gdGhpcy5kYXRhX3Vzci5mcmFtZXMubGVuZ3RoO1xuICAgICAgICBwYWdlID0gKHBhZ2UgPCB0KSA/IHBhZ2UgOiB0IC0gMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0OyBpKyspIHtcbiAgICAgICAgICAgIHBhZ2UgPSAocGFnZSA9PT0gMCkgPyB0IC0gMSA6IHBhZ2UgLSAxO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzX3BhZ2UocGFnZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBEb3dubG9hZENyZigpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB5aWVsZCBjb21tb24uR2V0RGF0YSh0aGlzLnVybF9zZXJ2ZXJfY3JmKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfY3JmX2RhdGEocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5mbGFnX2luaXRfY3JmKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1wLm9uQ1JGRmluaXNoRG93bmxvYWQoKVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLmRvd25sb2FkRnVsbCgpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmxhZ19pbml0X2NyZiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCLlrprkuYnmoIfms6joioLngrkoQ1JGKeWQjOatpeWujOaIkFwiLCB0aGlzLmdldF9jcmZfZGF0YV9hbGwoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgRG93bmxvYWRVc3IoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnKFwidXNyX3VybDpcIix0aGlzLnVybF9zZXJ2ZXJfdXNyKVxuICAgICAgICAgICAgbGV0IHJlc3AgPSB5aWVsZCBjb21tb24uR2V0RGF0YSh0aGlzLnVybF9zZXJ2ZXJfdXNyKTtcbiAgICAgICAgICAgIGlmIChyZXNwLmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJkbCBfZnVsbDpcIixyZXNwLmRhdGEpXG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSByZXNwLmRhdGE7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRhdGFfY3JmX3R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIjRhcFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGRhdGEucmVwbGFjZSgvREFcIi9nLCAnREFPXCInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UoL0RBXy9nLCAnREFPXycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ2YW5cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UoL0RBXCIvZywgJ0RBT1wiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gZGF0YS5yZXBsYWNlKC9EQV8vZywgJ0RBT18nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNldF91c3JfZGF0YShkYXRhKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwi55So5oi35qCH5rOo5pWw5o2uKFVTUinlkIzmraXlrozmiJBcIiwgSlNPTi5wYXJzZSh0aGlzLmdldF91c3JfZGF0YSgpKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mbGFnX2luaXRfdXNyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlc3AuY29kZSA9PSAxMDAwMSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCLmlbDmja7ml6DmoIfms6hcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5mbGFnX2luaXRfdXNyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihyZXNwLm1zZywgYOagh+azqOaVsOaNruWQjOatpemUmeivr2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdXBsb2FkKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIHBhcmFtcy5zZXQoXCJsYWJlbF91dWlkXCIsIHRoaXMuZGF0YV9sYWJlbF91dWlkKTtcbiAgICAgICAgICAgIGNvbnN0IHRtcCA9IHtcbiAgICAgICAgICAgICAgICBtZWRpYTogdGhpcy5kYXRhX21lZGlhX3V1aWQsXG4gICAgICAgICAgICAgICAgZGF0YTogdGhpcy5nZXRfdXNyX2RhdGEoKSxcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICd1cGxvYWQnLFxuICAgICAgICAgICAgICAgIGFkbWluOiBcIlwiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGV0IHJlc3AgPSB5aWVsZCAoMCwgY29tbW9uXzEuUG9zdERhdGEpKCgwLCBjb21tb25fMS5CdWlsZFVSTCkodGhpcy51cmxfc2VydmVyX3VzciwgcGFyYW1zKSwgdG1wKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9zdF9hdXRob3Jfc3VibWl0KCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zdF91c2VyX2RvKFwic3VibWl0XCIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9zdF9yZXZpZXdlcl9jb25maXJtKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zdF91c2VyX2RvKFwiY29uZmlybVwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBvc3RfcmV2aWV3ZXJfcmVqZWN0KCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zdF91c2VyX2RvKFwicmVqZWN0XCIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9zdF91c2VyX2RvKGFjdGlvbikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbGV0IHBhcmFtcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIHBhcmFtcy5zZXQoXCJkb1wiLCBhY3Rpb24pO1xuICAgICAgICAgICAgY29uc3QgdG1wID0ge1xuICAgICAgICAgICAgICAgIG1lZGlhOiB0aGlzLmRhdGFfbWVkaWFfdXVpZCxcbiAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLmRhdGFfbGFiZWxfdXVpZCxcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICd1cGxvYWQnLFxuICAgICAgICAgICAgICAgIGFkbWluOiBcIlwiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGV0IHJlc3AgPSB5aWVsZCAoMCwgY29tbW9uXzEuUG9zdERhdGEpKCgwLCBjb21tb25fMS5CdWlsZFVSTCkodGhpcy51cmxfc2VydmVyX3VzciwgcGFyYW1zKSwgdG1wKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkxhYmVsRGF0YSA9IExhYmVsRGF0YTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/labelsys/labelsys_data.ts\n");

/***/ }),

/***/ "./src/labelsys/labelsys_panel.ts":
/*!****************************************!*\
  !*** ./src/labelsys/labelsys_panel.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SystemPanel = exports.CanvasPanel = exports.BasicPanel = void 0;\nconst labelsys_buttons_1 = __webpack_require__(/*! ./labelsys_buttons */ \"./src/labelsys/labelsys_buttons.ts\");\nconst common_1 = __webpack_require__(/*! ../common/common */ \"./src/common/common.ts\");\nconst toastr = __webpack_require__(/*! toastr */ \"./node_modules/toastr/toastr.js\");\n/**\n * 面板父类\n */\nclass BasicPanel {\n    constructor(ref_main, main_panel, label_data, ui) {\n        this.ref_main = ref_main;\n        this.ref_ui = ui;\n        this.usr_label_data = label_data;\n        this.ref_main_panel = main_panel;\n    }\n}\nexports.BasicPanel = BasicPanel;\n/**\n * 标注功能面板，左侧\n */\nclass CanvasPanel extends BasicPanel {\n    constructor(ref_main, main_panel, label_data, ui) {\n        super(ref_main, main_panel, label_data, ui);\n        // private data_current_page: number = 0\n        this.data_page_template = new Map();\n        this.ref_main_panel = main_panel;\n        this.data_groups = new Map;\n        this.data_btn_status = new Map;\n    }\n    set_canvas_ref(ref) {\n        this.ref_canvas_container = ref;\n    }\n    load_crf(crf_groups) {\n        // 标签信息\n        crf_groups.forEach((group) => {\n            let color;\n            switch (group.name) {\n                case \"通用标签\":\n                    color = \"yellow\";\n                    break;\n                case \"异常标签\":\n                    color = \"red\";\n                    break;\n                default:\n                    color = \"default\";\n                    break;\n            }\n            let obj = new labelsys_buttons_1.CanvasButtonGroup(this, group.name, group.gopen, color, undefined, (id) => {\n                this.on_l_click(id);\n            }, (id) => {\n                this.on_r_click(id);\n            });\n            obj.add_buttons(this.usr_label_data.crfGroup(group.group));\n            this.data_groups.set(group.group, obj);\n        });\n    }\n    on_l_click(btnId) {\n        // console.debug(\"canvas_panel_on_l\", this.id, this)\n        // const frame = this.get_current_page()\n        const stor = this.usr_label_data;\n        let crf = stor.get_crf_data(btnId);\n        if (!crf) {\n            toastr.error(\"cannot find crf meta:\" + btnId);\n            return;\n        }\n        let group = stor.get_group_data(crf.group);\n        if (!group) {\n            toastr.error(\"cannot find crf group:\" + crf.group);\n            return;\n        }\n        // console.debug(\"btnCrf:\", crf, \"btnGroup\", group)\n        let gid = crf.group;\n        let vOld = this.get_value(gid);\n        let vNew = btnId;\n        console.debug(\"L_Click:\", btnId, \"Value:\", vOld, \"->\", vNew);\n        if (group.gradio) {\n            let custom = (crf.value == \"INPUT\");\n            if (custom) {\n                let tmp = this.ref_ui.prompt(\"请输入状态\", (vOld) ? vOld : vNew);\n                if (tmp == null) {\n                    return;\n                }\n                else {\n                    vNew = tmp;\n                }\n            }\n            if (vOld) {\n                if (vNew && vNew !== vOld && this.ref_ui.confirm(\"确认调整\")) {\n                    this.set_button(this.usr_label_data.get_crf_data(vOld) ? vOld : \"SPEC\", \"off\", undefined);\n                    this.set_button(btnId, \"on\", (custom) ? vNew : undefined);\n                    this.set_value(gid, vNew, crf);\n                }\n            }\n            else {\n                this.set_button(btnId, \"on\", (custom) ? vNew : undefined);\n                this.set_value(gid, vNew, crf);\n            }\n        }\n        else {\n            const cc = this.ref_canvas_container;\n            if (cc && !cc.get_page_time_label()) {\n                toastr.error(\"请先进行时间标注\");\n                return;\n            }\n            if (vOld) {\n                cc === null || cc === void 0 ? void 0 : cc.deactivate(vOld);\n                this.set_button(vOld, (cc === null || cc === void 0 ? void 0 : cc.has_part(vOld)) ? \"on\" : \"off\", undefined);\n                if (vOld == vNew) {\n                    cc === null || cc === void 0 ? void 0 : cc.del_part(gid);\n                    return;\n                }\n            }\n            this.set_button(btnId, \"hold\", undefined);\n            cc === null || cc === void 0 ? void 0 : cc.activate(btnId, crf.type, crf.color);\n            this.set_value(gid, btnId, crf);\n        }\n    }\n    on_r_click(btnId) {\n        console.log(\"R_Click:\", btnId);\n    }\n    page_load(frame) {\n        this.page_clear();\n        let d = this.usr_label_data.get_page(frame);\n        console.info(\"page data:\", d);\n        if (d) {\n            if (d.clabels) {\n                d.clabels.forEach((a, id) => {\n                    this.set_button(id, \"on\", undefined);\n                    this.data_page_template.set(id, \"on\");\n                });\n            }\n            if (d.cid) {\n                this.data_page_template.set(\"t\", d.cid);\n                if (d.cid === \"SPEC\") {\n                    this.set_button(d.cid, \"on\", d.cdescribe);\n                }\n                else {\n                    this.set_button(d.cid, \"on\", undefined);\n                }\n            }\n        }\n    }\n    page_clear() {\n        // console.debug(\"page_clear.button status\", this.data_btn_status)\n        this.data_btn_status.forEach((v, id) => {\n            // console.log(\"check:\", id, v)\n            switch (v) {\n                case \"on\":\n                case \"hold\":\n                    let crf = this.usr_label_data.get_crf_data(id);\n                    if (crf && crf.domain != \"global\") {\n                        // console.info(`clear: ${id}`, crf)\n                        this.set_button(id, \"off\", undefined);\n                    }\n                    else {\n                        console.debug(\"ignore global:\", id);\n                    }\n            }\n        });\n        this.data_page_template = new Map();\n    }\n    // set_current_page(frame: number): boolean {\n    //     if (frame < 0) {\n    //         return false\n    //     }\n    //\n    //     this.data_current_page = frame\n    //     return this.page_load(this.data_current_page)\n    // }\n    // get_current_page(): number {\n    //     return this.data_current_page\n    // }\n    set_button(id, status, text) {\n        // console.log(`cp set button id-> ${id} status-> ${status}`)\n        if (!id) {\n            toastr.error(\"未知按钮\");\n            return;\n        }\n        let crf = this.usr_label_data.get_crf_data(id);\n        if (!crf) {\n            toastr.error(\"未知CRF:\" + id);\n            return;\n        }\n        let target = this.data_groups.get(crf.group);\n        switch (status) {\n            case \"hold\":\n                target === null || target === void 0 ? void 0 : target.hold(id);\n                this.data_btn_status.set(id, status);\n                break;\n            case \"off\":\n                target === null || target === void 0 ? void 0 : target.off(id);\n                target === null || target === void 0 ? void 0 : target.text(id, crf.name);\n                this.data_btn_status.delete(id);\n                break;\n            case \"on\":\n                target === null || target === void 0 ? void 0 : target.on(id);\n                this.data_btn_status.set(id, status);\n                if (text != undefined) {\n                    target === null || target === void 0 ? void 0 : target.text(id, text);\n                }\n                break;\n            default:\n                toastr.error(\"按钮状态异常：\" + status);\n        }\n    }\n    set_value(id, value_new, crf) {\n        console.log(\"canvas_panel_set_value:\", id, value_new, crf);\n        const cc = this.ref_canvas_container;\n        if (cc) {\n            this.data_page_template.set(id, value_new);\n            switch (id) {\n                case \"t\":\n                    const media_current = this.ref_main_panel.get_current_play_info();\n                    cc.set_page_time_label(crf.id, value_new, media_current.time);\n                    break;\n                case \"q\":\n                    this.usr_label_data.set_global(crf.group, parseInt(crf.value));\n                    break;\n            }\n        }\n    }\n    get_value(id) {\n        return this.data_page_template.get(id);\n    }\n}\nexports.CanvasPanel = CanvasPanel;\n/**\n * 系统面板，右侧隐藏\n */\nclass SystemPanel extends BasicPanel {\n    constructor(ref_main, main_panel, label_data, ui, api_root) {\n        super(ref_main, main_panel, label_data, ui);\n        // let ul = $('<ul class=\"nav nav-pills nav-sidebar flex-column nav-flat\" data-widget=\"treeview\" role=\"menu\" data-accordion=\"false\"/>')\n        // let nav = $('<nav class=\"mt-0\" />').append(ul)\n        // this.ref_main_list = ul\n        // this.obj_main.addClass(\"sidebar\").append(nav)\n        // 用户备注\n        this.memo = new labelsys_buttons_1.CanvasButtonGroup(this, \"备注内容\", true, undefined, undefined, undefined, undefined);\n        this.memo.add_input(\"memo\", 5, \"输入备注信息……\", \"保存备注\", api_root + '/label/memo');\n        this.system = new SystemButtonGroup(this, \"系统工具\", true, ui, label_data, api_root);\n        this.admin = new AdminButtonGroup(this, \"管理工具\", true, ui, label_data, api_root);\n    }\n    exit() {\n        this.ref_main_panel.exit();\n    }\n}\nexports.SystemPanel = SystemPanel;\n/**\n * 系统按钮组\n */\nclass SystemButtonGroup extends labelsys_buttons_1.CanvasButtonGroup {\n    constructor(parent, title, open, ui, label_stor, api_root) {\n        super(parent, title, open, undefined, undefined, undefined, undefined);\n        let senddata = { media: label_stor.data_media_uuid, direction: \"upload\", admin: \"\", data: null };\n        switch (label_stor.data_submit_level) {\n            case \"author\":\n                let btn = new labelsys_buttons_1.Button(\"usr-submit\", \"提交审核\", 12, \"#67afe5\", 0, () => {\n                    label_stor.post_author_submit().then((resp) => {\n                        if (resp.code == 200) {\n                            toastr.success(\"已提交审核\");\n                            if (resp.data == \"exit\") {\n                                parent.exit();\n                            }\n                        }\n                        else {\n                            toastr.error(resp.msg, resp.code.toString());\n                        }\n                    });\n                }, undefined);\n                btn.set_color_default();\n                this.ref_main.append(btn.get_object());\n                break;\n            case \"review\":\n                let btnReject = new labelsys_buttons_1.Button(\"usr-reject\", \"驳回\", 6, \"#cc6666\", 0, () => {\n                    if (ui.confirm(\"确认驳回？\")) {\n                        label_stor.post_reviewer_reject().then((resp) => {\n                            if (resp.code === 200) {\n                                toastr.success(\"如需要，请在备注中注明驳回原因\", \"已驳回\");\n                                if (resp.data === \"exit\") {\n                                    parent.exit();\n                                }\n                            }\n                            else {\n                                toastr.error(resp.msg, resp.code.toString());\n                            }\n                        });\n                    }\n                }, undefined);\n                let btnConfirm = new labelsys_buttons_1.Button(\"usr-confirm\", \"通过\", 6, \"#99ffcc\", 0, () => {\n                    label_stor.post_reviewer_confirm().then((resp) => {\n                        if (resp.code === 200) {\n                            toastr.success(\"已提交审核通过\");\n                            if (resp.data === \"exit\") {\n                                parent.exit();\n                            }\n                        }\n                        else {\n                            toastr.error(resp.msg, resp.code.toString());\n                        }\n                    });\n                }, undefined);\n                btnReject.set_color_default();\n                btnConfirm.set_color_default();\n                this.ref_main.append(btnConfirm.get_object()).append(btnReject.get_object());\n                break;\n        }\n    }\n}\n/**\n * 管理员按钮组\n */\nclass AdminButtonGroup extends labelsys_buttons_1.CanvasButtonGroup {\n    constructor(parent, title, open, ui, label_stor, api_root) {\n        super(parent, title, open, undefined, undefined, undefined, undefined);\n        let obj = new labelsys_buttons_1.Button(\"usr-drop\", \"清空全部标注\", 12, \"#dc3545\", 0, () => {\n            if (ui.confirm(\"警告！确认后将清空本媒体对应的全部标注数据\")) {\n                toastr.error(\"未授权操作\");\n            }\n        }, undefined);\n        obj.set_color_default();\n        this.ref_main.append(obj.get_object());\n        obj = new labelsys_buttons_1.Button(\"usr-export\", \"导出标注\", 6, \"\", 0, () => {\n            ui.prompt(\"标注内容\", label_stor.get_usr_data());\n        }, undefined);\n        this.ref_main.append(obj.get_object());\n        obj = new labelsys_buttons_1.Button(\"usr-import\", \"导入标注\", 6, \"\", 0, () => {\n            let data = ui.prompt(\"数据内容\", label_stor.get_usr_data());\n            if (data) {\n                label_stor.set_usr_data(data);\n                label_stor.upload().then((resp) => {\n                    if (resp.code == 200) {\n                        toastr.success(\"完成\");\n                    }\n                    else {\n                        toastr.error(resp.msg, resp.code.toString());\n                    }\n                });\n            }\n            else {\n                toastr.warning(\"导入已取消\");\n            }\n        }, undefined);\n        this.ref_main.append(obj.get_object());\n        obj = new labelsys_buttons_1.Button(\"usr-release\", \"至无标注状态\", 6, \"\", 6, () => {\n            let data = ui.prompt(\"需要管理员提权，删除后本窗口将关闭\", undefined);\n            if (data) {\n                $.ajax({\n                    url: api_root + '/label/full',\n                    type: 'DELETE',\n                    data: JSON.stringify({ \"admin\": data }),\n                }).done(resp => {\n                    if (resp.code == 200) {\n                        toastr.success(\"操作完成\");\n                        switch (resp.data) {\n                            case \"exit\":\n                                parent.exit();\n                                break;\n                            case \"\":\n                                break;\n                            default:\n                                toastr.info(resp.data);\n                        }\n                    }\n                    else {\n                        toastr.error(resp.msg, resp.code);\n                    }\n                });\n            }\n        }, undefined);\n        this.ref_main.append(obj.get_object());\n        obj = new labelsys_buttons_1.Button(\"revoke\", \"至无审阅状态\", 6, \"\", 6, () => {\n            let data = ui.prompt(\"调整审阅状态需要管理员提权\", undefined);\n            if (data) {\n                const senddata = { admin: data, direction: \"upload\", media: \"\", data: label_stor.data_label_uuid };\n                // console.log(\"senddata\", senddata)\n                // /api/v1/media/MEDIA/label/:op\n                const url = api_root + '/label/review?do=revoke';\n                (0, common_1.PostData)(url, senddata).then((data) => {\n                    if (data == undefined) {\n                        return undefined;\n                    }\n                    let resp = data;\n                    if (resp.code == 200) {\n                        toastr.success(\"操作完成\");\n                        switch (resp.data) {\n                            case \"exit\":\n                                parent.exit();\n                                break;\n                            case \"\":\n                                break;\n                            default:\n                                toastr.info(resp.data);\n                        }\n                    }\n                    else {\n                        toastr.error(resp.msg, resp.data);\n                    }\n                });\n            }\n        }, undefined);\n        this.ref_main.append(obj.get_object());\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/labelsys/labelsys_panel.ts\n");

/***/ }),

/***/ "./src/labelsys/labelsys_parts.ts":
/*!****************************************!*\
  !*** ./src/labelsys/labelsys_parts.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PolyPart = void 0;\nconst jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"));\nconst XMLNS = \"http://www.w3.org/2000/svg\";\n/**\n * 标注结构父类，基础描点功能\n */\nclass BasicPart {\n    constructor(id, canvas_container, color, qualified_name) {\n        this.data_undo = [];\n        this.data_active = false;\n        this.data_modified = false;\n        this.data_point_pick = \"\";\n        this.data_point_count = 0;\n        this.data_points = new Map();\n        this.data_points_ref = new Map();\n        this.obj_svg = this.new_svg(qualified_name).attr(\"id\", id).attr(\"fill\", color);\n        this.id = id;\n        this.obj_canvas_container = canvas_container;\n        this.data_color = color;\n        let offset = canvas_container.ref_main.offset();\n        if (offset) {\n            this.data_offset = {\n                left: offset.left,\n                top: offset.top,\n                height: canvas_container.get_window_info().height,\n                width: canvas_container.get_window_info().width,\n            };\n        }\n        else {\n            this.data_offset = {\n                left: 0, top: 0, height: 0, width: 0\n            };\n        }\n        this.set_is_activate(false);\n        canvas_container.ref_svg.append(this.obj_svg);\n    }\n    new_svg(qualified_name) {\n        let obj = document.createElementNS(XMLNS, qualified_name);\n        return (0, jquery_1.default)(obj);\n    }\n    get_is_modified() {\n        return this.data_modified;\n    }\n    set_is_modified(b) {\n        this.data_modified = b;\n    }\n    set_is_activate(b) {\n        this.data_active = b;\n    }\n    get_is_activate() {\n        return this.data_active;\n    }\n    set_point_data(d) {\n        d.forEach((p, k) => {\n            let data = {\n                h: parseFloat(p[1].toFixed(3)),\n                w: parseFloat(p[0].toFixed(3)),\n                x: 0,\n                y: 0\n            };\n            this.data_points.set(k, data);\n        });\n    }\n    get_point_data() {\n        return this.data_points;\n    }\n    set pointPick(id) {\n        this.data_point_pick = id;\n    }\n    get pointPick() {\n        return this.data_point_pick;\n    }\n    get_point_string() {\n        let str = \"\";\n        this.data_points.forEach((p) => {\n            p = this.WHtoXY(p);\n            str += `${p.x},${p.y} `;\n        });\n        return str;\n    }\n    set resolution(r) {\n        this.data_offset.width = r.w;\n        this.data_offset.height = r.h;\n        this.onResize();\n    }\n    activate() {\n        if (!this.get_is_activate()) {\n            this.set_is_activate(true);\n            this.points_show();\n        }\n    }\n    /**\n     *\n     * @returns {boolean} obj是否存在\n     */\n    deactivate() {\n        // console.warn(`basic part deactivate: ${this.id}`)\n        this.set_is_activate(false);\n        this.points_hide();\n        this.redraw();\n        // console.log(\"basic part data:\", this.data)\n        if (this.data_points.size > 0) {\n            this.get_is_modified() ? this.confirm() : this.cancel();\n            // 激活按钮\n            this.obj_canvas_container.ref_main_panel.obj_canvas_panel.set_button(this.id, \"on\", undefined);\n            return true;\n        }\n        else {\n            this.remove();\n            // 关闭按钮\n            this.obj_canvas_container.ref_main_panel.obj_canvas_panel.set_button(this.id, \"off\", undefined);\n            return false;\n        }\n    }\n    points_show() {\n        console.groupCollapsed(\"show_part_points:\", this.id);\n        this.data_points.forEach((d, id) => {\n            console.log(\"show point\", id);\n            this.data_points_ref.set(id, this.point_create(d, id));\n        });\n        console.groupEnd();\n    }\n    points_hide() {\n        // if (this.get_is_modified()) {\n        //     this.confirm()\n        // }\n        console.groupCollapsed(\"hide_part_points:\", this.id);\n        this.data_points_ref.forEach((obj, id) => {\n            console.log(\"remove point\", id);\n            obj.remove();\n            this.data_points_ref.delete(id);\n        });\n        console.groupEnd();\n    }\n    points_get_all() {\n        return this.data_points_ref;\n    }\n    moveTop() {\n        this.obj_svg.parent().children().last().after(this.obj_svg);\n    }\n    moveBottom() {\n        this.obj_svg.parent().children().first().before(this.obj_svg);\n    }\n    confirm() {\n        if (this.get_is_modified()) {\n            this.set_is_modified(false);\n            let p_data = new Map();\n            this.get_point_data().forEach((point_data, index) => {\n                p_data.set(index, [point_data.w, point_data.h]);\n            });\n            this.obj_canvas_container.update_part(this.id, { cPoints: p_data });\n        }\n    }\n    cancel() {\n        this.redraw();\n    }\n    redraw() {\n        // console.log(\"basic redraw\")\n    }\n    remove() {\n        this.points_hide();\n        this.obj_svg.remove();\n    }\n    /**\n     * 创建锚点\n     * @param p 坐标数据 {w:p.w,h:p.h}\n     * @param id ID\n     * @returns {*} SVG\n     */\n    point_create(p, id) {\n        while (!id || this.data_points_ref.has(id)) {\n            id = `${this.id}_${this.data_point_count}`;\n            this.data_point_count++;\n        }\n        // console.log(`point create: ${id}`)\n        p = this.WHtoXY(p);\n        let obj = this.new_svg(\"circle\").attr(\"cx\", `${p.x}`).attr(\"cy\", `${p.y}`).attr(\"id\", id)\n            .attr(\"r\", 3.2).attr(\"fill\", \"red\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5)\n            .on(\"mouseenter\", this.switch_color).on(\"mouseleave\", this.switch_color)\n            .on(\"click\", (e) => {\n            this.point_on_l_click(e);\n        }).on(\"contextmenu\", (e) => {\n            this.point_on_r_click(e);\n        });\n        this.obj_svg.parent().append(obj);\n        this.data_points.set(id, { w: p.w, h: p.h, x: 0, y: 0 });\n        this.data_undo = [];\n        return obj;\n    }\n    point_move(p, id) {\n        this.set_is_modified(true);\n        // console.log(`point move: ${id} ->`, p)\n        let obj = this.data_points_ref.get(id);\n        if (obj) {\n            obj.attr(\"cx\", p.x).attr('cy', p.y);\n        }\n    }\n    pointSave(p, id) {\n        this.set_is_modified(true);\n        if (!id) {\n            id = this.pointPick;\n        }\n        this.data_points.set(id, { w: p.w, h: p.h, x: 0, y: 0 });\n    }\n    pointRemove(id) {\n        console.log(\"BasicPart.pointRemove()\");\n        this.set_is_modified(true);\n        if (!id) {\n            id = this.pointPick;\n        }\n        console.log(`point remove: ${id}`);\n        //c.pointRefs.get(id).remove()\n        //c.points.get(id).remove()\n        //c.pointRefs.delete(id)\n        let hist = { id: id, data: this.data_points.get(id) };\n        this.data_undo.push(hist);\n        this.data_points.delete(id);\n        // console.log(\"c = this(bp).data = \", this.data)\n    }\n    pointCancel(id) {\n        if (!id) {\n            id = this.pointPick;\n        }\n        let pdata = this.data_points.get(id);\n        if (pdata == undefined) {\n            return;\n        }\n        let p = this.WHtoXY(pdata);\n        this.obj_svg.parent().off(\"mousemove\");\n        let obj = this.data_points_ref.get(id);\n        if (obj) {\n            obj.attr(\"cx\", p.x).attr(\"cy\", p.y)\n                .off(\"mousemove\").off(\"mouseleave\")\n                .on(\"mouseenter\", this.switch_color).on(\"mouseleave\", this.switch_color);\n            this.pointPick = \"\";\n        }\n    }\n    pointUndo() {\n        console.log(\"BasicPart.pointUndo()\");\n        //let keys = this.data.pointRefs.keys()\n        let keys = this.data_points.keys();\n        let id = \"\";\n        while (true) {\n            let o = keys.next();\n            if (o.done) {\n                break;\n            }\n            id = o.value;\n        }\n        console.log(\"point latest id:\", id);\n        if (id !== \"\") {\n            console.log(\"id = \", id);\n            this.pointRemove(id);\n            return id;\n        }\n        else {\n            // ui.message('无法再撤销。', false);\n            return false;\n        }\n    }\n    pointRedo() {\n        console.log(\"BasicPart.pointUndo()\");\n        let evt = this.data_undo.pop();\n        if (evt == undefined) {\n            // ui.message('无法再重做。', false);\n            return false;\n        }\n        let evt_data = evt.data;\n        if (evt_data != undefined) {\n            this.data_points.set(evt.id, evt_data);\n        }\n        // console.log(\"this(bp).data = \", this.data)\n    }\n    onResize() {\n        let obj = this.obj_canvas_container;\n        let offset = obj.ref_main.offset();\n        if (offset) {\n            this.data_offset = {\n                left: offset.left,\n                top: offset.top,\n                height: obj.get_window_info().height,\n                width: obj.get_window_info().width,\n            };\n        }\n        else {\n            this.data_offset = {\n                left: 0, top: 0, height: 0, width: 0\n            };\n        }\n    }\n    switch_color(e) {\n        let obj = (0, jquery_1.default)(e.target);\n        let cs = obj.attr(\"fill\");\n        let cf = obj.attr(\"stroke\");\n        if (cs !== undefined && cf != undefined) {\n            obj.attr('fill', cf).attr('stroke', cs);\n        }\n    }\n    point_on_l_click(e) {\n        e.stopPropagation();\n        const obj = (0, jquery_1.default)(e.target);\n        if (this.pointPick) {\n            // 已选择点，放下\n            obj.off(\"mousemove\").off(\"mouseleave\")\n                .on(\"mouseenter\", this.switch_color).on(\"mouseleave\", this.switch_color);\n            this.obj_svg.parent().off(\"mousemove\");\n            this.pointSave(this.getPosition(e), null);\n            this.pointPick = \"\";\n            this.redraw();\n        }\n        else {\n            // 未选择点，拾起\n            let id = e.target.id;\n            this.pointPick = id;\n            obj.off(\"mouseenter\").off(\"mouseleave\")\n                .on(\"mousemove\", (e) => {\n                this.point_move(this.getPosition(e), id);\n            });\n            this.obj_svg.parent().on(\"mousemove\", (e) => {\n                this.point_move(this.getPosition(e), id);\n            });\n        }\n    }\n    point_on_r_click(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        this.pointCancel(e.target.id);\n    }\n    WHtoXY(p) {\n        p.x = parseFloat((p.w * this.data_offset.width / 100).toFixed(3));\n        p.y = parseFloat((p.h * this.data_offset.height / 100).toFixed(3));\n        return p;\n    }\n    XYtoWH(p) {\n        p.w = parseFloat((p.x * 100 / this.data_offset.width).toFixed(3));\n        p.h = parseFloat((p.y * 100 / this.data_offset.height).toFixed(3));\n        return p;\n    }\n    getPosition(e) {\n        let x = (e.pageX - this.data_offset.left);\n        let y = (e.pageY - this.data_offset.top);\n        let d = {\n            x: x, y: y, w: 0, h: 0\n        };\n        return this.XYtoWH(d);\n    }\n}\n/**\n * 多边形标注结构\n */\nclass PolyPart extends BasicPart {\n    constructor(id, container, color) {\n        // console.log(`new polygon: ${id} @`, container)\n        super(id, container, color, \"polygon\");\n        this.obj_svg.attr(\"opacity\", 0.5)\n            .attr(\"stroke-width\", 1).attr(\"stroke\", \"black\")\n            .on(\"mouseenter\", this.switch_color).on(\"mouseleave\", this.switch_color)\n            .on(\"click\", () => {\n            this.moveBottom();\n        })\n            .on(\"contextmenu\", (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.get_is_activate() ? this.deactivate() : this.activate();\n        });\n    }\n    redraw() {\n        super.redraw();\n        this.obj_svg.attr(\"points\", this.get_point_string());\n    }\n}\nexports.PolyPart = PolyPart;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/labelsys/labelsys_parts.ts\n");

/***/ }),

/***/ "./src/labelsys/labelsys_timer.ts":
/*!****************************************!*\
  !*** ./src/labelsys/labelsys_timer.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MediaLockerObj = exports.Timer = void 0;\n/**\n * 定时器父类\n * @param: Class\n */\nconst common_1 = __webpack_require__(/*! ../common/common */ \"./src/common/common.ts\");\nclass Timer {\n    constructor(func) {\n        // console.warn(\"create a new timer\")\n        this.func = func;\n        this.interval = 0;\n    }\n    start(interval) {\n        // console.warn(\"timer interval:\",interval)\n        this.stop();\n        if (interval > 0) {\n            this.interval = interval;\n        }\n        if (this.interval > 0) {\n            this.timer = setInterval(this.func, this.interval);\n            return this.timer;\n        }\n        else {\n            return false;\n        }\n    }\n    stop() {\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = null;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\nexports.Timer = Timer;\n/**\n * 媒体锁\n */\nclass MediaLockerObj extends Timer {\n    constructor(lockInterval, apiLock) {\n        super(() => {\n            if (this.lockInterval > 0) {\n                (0, common_1.PostData)(this.urlLock, null).then((data) => {\n                    if (data == undefined) {\n                        return undefined;\n                    }\n                    let resp = data;\n                    if (resp.code !== 200) {\n                        console.warn(resp.msg);\n                    }\n                });\n            }\n        });\n        this.urlLock = \"\";\n        this.lockInterval = 0;\n        if (lockInterval > 0) {\n            this.lockInterval = lockInterval;\n            this.urlLock = apiLock;\n        }\n        else {\n            console.warn(\"user media auto-lock disabled\");\n        }\n    }\n    lock() {\n        if (this.lockInterval > 0) {\n            return super.start(this.lockInterval);\n        }\n    }\n    unlock(func) {\n        if (this.lockInterval > 0) {\n            let r = super.stop();\n            $.ajax({\n                url: this.urlLock,\n                type: 'DELETE',\n            }).done(resp => {\n                if (resp.code === 200 && !!func) {\n                    console.log(\"post-unlock\");\n                    func();\n                }\n            });\n            return r;\n        }\n    }\n}\nexports.MediaLockerObj = MediaLockerObj;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGFiZWxzeXMvbGFiZWxzeXNfdGltZXIudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2xhYmVsc3lzL2xhYmVsc3lzX3RpbWVyLnRzP2ZmODIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1lZGlhTG9ja2VyT2JqID0gZXhwb3J0cy5UaW1lciA9IHZvaWQgMDtcbi8qKlxuICog5a6a5pe25Zmo54i257G7XG4gKiBAcGFyYW06IENsYXNzXG4gKi9cbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb21tb25cIik7XG5jbGFzcyBUaW1lciB7XG4gICAgY29uc3RydWN0b3IoZnVuYykge1xuICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJjcmVhdGUgYSBuZXcgdGltZXJcIilcbiAgICAgICAgdGhpcy5mdW5jID0gZnVuYztcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IDA7XG4gICAgfVxuICAgIHN0YXJ0KGludGVydmFsKSB7XG4gICAgICAgIC8vIGNvbnNvbGUud2FybihcInRpbWVyIGludGVydmFsOlwiLGludGVydmFsKVxuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgaWYgKGludGVydmFsID4gMCkge1xuICAgICAgICAgICAgdGhpcy5pbnRlcnZhbCA9IGludGVydmFsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmludGVydmFsID4gMCkge1xuICAgICAgICAgICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKHRoaXMuZnVuYywgdGhpcy5pbnRlcnZhbCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICBpZiAodGhpcy50aW1lcikge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICAgICAgICAgIHRoaXMudGltZXIgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlRpbWVyID0gVGltZXI7XG4vKipcbiAqIOWqkuS9k+mUgVxuICovXG5jbGFzcyBNZWRpYUxvY2tlck9iaiBleHRlbmRzIFRpbWVyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NrSW50ZXJ2YWwsIGFwaUxvY2spIHtcbiAgICAgICAgc3VwZXIoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMubG9ja0ludGVydmFsID4gMCkge1xuICAgICAgICAgICAgICAgICgwLCBjb21tb25fMS5Qb3N0RGF0YSkodGhpcy51cmxMb2NrLCBudWxsKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzcCA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwLmNvZGUgIT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKHJlc3AubXNnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cmxMb2NrID0gXCJcIjtcbiAgICAgICAgdGhpcy5sb2NrSW50ZXJ2YWwgPSAwO1xuICAgICAgICBpZiAobG9ja0ludGVydmFsID4gMCkge1xuICAgICAgICAgICAgdGhpcy5sb2NrSW50ZXJ2YWwgPSBsb2NrSW50ZXJ2YWw7XG4gICAgICAgICAgICB0aGlzLnVybExvY2sgPSBhcGlMb2NrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwidXNlciBtZWRpYSBhdXRvLWxvY2sgZGlzYWJsZWRcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbG9jaygpIHtcbiAgICAgICAgaWYgKHRoaXMubG9ja0ludGVydmFsID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnN0YXJ0KHRoaXMubG9ja0ludGVydmFsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1bmxvY2soZnVuYykge1xuICAgICAgICBpZiAodGhpcy5sb2NrSW50ZXJ2YWwgPiAwKSB7XG4gICAgICAgICAgICBsZXQgciA9IHN1cGVyLnN0b3AoKTtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLnVybExvY2ssXG4gICAgICAgICAgICAgICAgdHlwZTogJ0RFTEVURScsXG4gICAgICAgICAgICB9KS5kb25lKHJlc3AgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwLmNvZGUgPT09IDIwMCAmJiAhIWZ1bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJwb3N0LXVubG9ja1wiKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuYygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLk1lZGlhTG9ja2VyT2JqID0gTWVkaWFMb2NrZXJPYmo7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/labelsys/labelsys_timer.ts\n");

/***/ }),

/***/ "./src/labelsys/labelsys_ui.ts":
/*!*************************************!*\
  !*** ./src/labelsys/labelsys_ui.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UI = void 0;\nconst jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"));\nclass UI {\n    constructor() {\n        this.flag_show_popup_msgbox = true;\n        this.data = {};\n        this.ref_popup_msgbox = (0, jquery_1.default)(`<div class=\"modal fade\" id=\"modal-overlay\" style=\"display: none;\">\n              <div class=\"modal-dialog\"><div class=\"modal-content\">\n                <div class=\"overlay\"><i class=\"fas fa-2x fa-sync fa-spin\"></i></div>\n                <div class=\"modal-body\"><p></p></div>            </div></div></div>`);\n        (0, jquery_1.default)(\"#ui-message-window\").append(this.ref_popup_msgbox);\n        this.ref_backdrop = (0, jquery_1.default)('<div class=\"modal-backdrop fade\"></div>');\n        this.message(\"系统正在初始化\", false);\n    }\n    message(msg, warn) {\n        if (warn) {\n            console.warn(\"MSG :\", msg);\n        }\n        else {\n            console.info(\"WARN:\", msg);\n        }\n    }\n    confirm(msg) {\n        return confirm(msg);\n    }\n    prompt(msg, def) {\n        return prompt(msg, def);\n    }\n    alert(msg) {\n        return alert(msg);\n    }\n    set popupContent(msg) {\n        const ref = this.ref_popup_msgbox;\n        if (msg) {\n            if (!this.flag_show_popup_msgbox) {\n                ref.addClass(\"show\").css(\"display\", \"block\");\n                ref.find(\"p\").text(msg);\n                this.flag_show_popup_msgbox = true;\n            }\n            else {\n                ref.find(\"p\").text(msg);\n            }\n        }\n        else {\n            ref.removeClass(\"show\").css(\"display\", \"none\");\n            this.flag_show_popup_msgbox = false;\n        }\n    }\n    bgFrozen(show) {\n        let backdrop = this.ref_backdrop;\n        if (show) {\n            // console.debug(\"bg frozen\")\n            (0, jquery_1.default)(document.body).append(backdrop);\n            backdrop.addClass(\"show\");\n        }\n        else {\n            // console.debug(\"bg unfrozen\")\n            backdrop.removeClass(\"show\");\n            backdrop.remove();\n        }\n    }\n    bgUnfrozen() {\n        // console.log(\"ui unfrozen\",this)\n        this.bgFrozen(false);\n    }\n}\nexports.UI = UI;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGFiZWxzeXMvbGFiZWxzeXNfdWkudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2xhYmVsc3lzL2xhYmVsc3lzX3VpLnRzPzM5ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVJID0gdm9pZCAwO1xuY29uc3QganF1ZXJ5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImpxdWVyeVwiKSk7XG5jbGFzcyBVSSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZmxhZ19zaG93X3BvcHVwX21zZ2JveCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IHt9O1xuICAgICAgICB0aGlzLnJlZl9wb3B1cF9tc2dib3ggPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoYDxkaXYgY2xhc3M9XCJtb2RhbCBmYWRlXCIgaWQ9XCJtb2RhbC1vdmVybGF5XCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZGlhbG9nXCI+PGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheVwiPjxpIGNsYXNzPVwiZmFzIGZhLTJ4IGZhLXN5bmMgZmEtc3BpblwiPjwvaT48L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPjwvcD48L2Rpdj4gICAgICAgICAgICA8L2Rpdj48L2Rpdj48L2Rpdj5gKTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKFwiI3VpLW1lc3NhZ2Utd2luZG93XCIpLmFwcGVuZCh0aGlzLnJlZl9wb3B1cF9tc2dib3gpO1xuICAgICAgICB0aGlzLnJlZl9iYWNrZHJvcCA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnPGRpdiBjbGFzcz1cIm1vZGFsLWJhY2tkcm9wIGZhZGVcIj48L2Rpdj4nKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlKFwi57O757uf5q2j5Zyo5Yid5aeL5YyWXCIsIGZhbHNlKTtcbiAgICB9XG4gICAgbWVzc2FnZShtc2csIHdhcm4pIHtcbiAgICAgICAgaWYgKHdhcm4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk1TRyA6XCIsIG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oXCJXQVJOOlwiLCBtc2cpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbmZpcm0obXNnKSB7XG4gICAgICAgIHJldHVybiBjb25maXJtKG1zZyk7XG4gICAgfVxuICAgIHByb21wdChtc2csIGRlZikge1xuICAgICAgICByZXR1cm4gcHJvbXB0KG1zZywgZGVmKTtcbiAgICB9XG4gICAgYWxlcnQobXNnKSB7XG4gICAgICAgIHJldHVybiBhbGVydChtc2cpO1xuICAgIH1cbiAgICBzZXQgcG9wdXBDb250ZW50KG1zZykge1xuICAgICAgICBjb25zdCByZWYgPSB0aGlzLnJlZl9wb3B1cF9tc2dib3g7XG4gICAgICAgIGlmIChtc2cpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5mbGFnX3Nob3dfcG9wdXBfbXNnYm94KSB7XG4gICAgICAgICAgICAgICAgcmVmLmFkZENsYXNzKFwic2hvd1wiKS5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XG4gICAgICAgICAgICAgICAgcmVmLmZpbmQoXCJwXCIpLnRleHQobXNnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZsYWdfc2hvd19wb3B1cF9tc2dib3ggPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVmLmZpbmQoXCJwXCIpLnRleHQobXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlZi5yZW1vdmVDbGFzcyhcInNob3dcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgICAgICAgICB0aGlzLmZsYWdfc2hvd19wb3B1cF9tc2dib3ggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBiZ0Zyb3plbihzaG93KSB7XG4gICAgICAgIGxldCBiYWNrZHJvcCA9IHRoaXMucmVmX2JhY2tkcm9wO1xuICAgICAgICBpZiAoc2hvdykge1xuICAgICAgICAgICAgLy8gY29uc29sZS5kZWJ1ZyhcImJnIGZyb3plblwiKVxuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGRvY3VtZW50LmJvZHkpLmFwcGVuZChiYWNrZHJvcCk7XG4gICAgICAgICAgICBiYWNrZHJvcC5hZGRDbGFzcyhcInNob3dcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnKFwiYmcgdW5mcm96ZW5cIilcbiAgICAgICAgICAgIGJhY2tkcm9wLnJlbW92ZUNsYXNzKFwic2hvd1wiKTtcbiAgICAgICAgICAgIGJhY2tkcm9wLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGJnVW5mcm96ZW4oKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwidWkgdW5mcm96ZW5cIix0aGlzKVxuICAgICAgICB0aGlzLmJnRnJvemVuKGZhbHNlKTtcbiAgICB9XG59XG5leHBvcnRzLlVJID0gVUk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/labelsys/labelsys_ui.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd define */
/******/ 	(() => {
/******/ 		__webpack_require__.amdD = function () {
/******/ 			throw new Error('define cannot be used indirect');
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/labelsys/entry.ts");
/******/ 	
/******/ })()
;